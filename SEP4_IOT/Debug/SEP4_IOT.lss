
SEP4_IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000486  00800200  0000556e  00005602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000556e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bf9  00800686  00800686  00005a88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008f0  00000000  00000000  00005b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b980  00000000  00000000  00006414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b80  00000000  00000000  00011d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a92  00000000  00000000  00014914  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002190  00000000  00000000  0001a3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a42  00000000  00000000  0001c538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ae24  00000000  00000000  0001ff7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000898  00000000  00000000  0002ad9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dc c3       	rjmp	.+1976   	; 0x7ea <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__vector_25>
      68:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 8b 1f 	jmp	0x3f16	; 0x3f16 <__vector_36>
      94:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 48 23 	jmp	0x4690	; 0x4690 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__vector_51>
      d0:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__vector_54>
      dc:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f9 16       	cp	r15, r25
      e6:	f9 16       	cp	r15, r25
      e8:	f9 16       	cp	r15, r25
      ea:	30 17       	cp	r19, r16
      ec:	38 17       	cp	r19, r24
      ee:	4d 17       	cp	r20, r29
      f0:	f9 16       	cp	r15, r25
      f2:	f9 16       	cp	r15, r25
      f4:	30 17       	cp	r19, r16
      f6:	38 17       	cp	r19, r24
      f8:	6a 23       	and	r22, r26
      fa:	da 23       	and	r29, r26
      fc:	da 23       	and	r29, r26
      fe:	da 23       	and	r29, r26
     100:	da 23       	and	r29, r26
     102:	da 23       	and	r29, r26
     104:	da 23       	and	r29, r26
     106:	da 23       	and	r29, r26
     108:	6a 23       	and	r22, r26
     10a:	da 23       	and	r29, r26
     10c:	da 23       	and	r29, r26
     10e:	da 23       	and	r29, r26
     110:	da 23       	and	r29, r26
     112:	da 23       	and	r29, r26
     114:	da 23       	and	r29, r26
     116:	da 23       	and	r29, r26
     118:	6c 23       	and	r22, r28
     11a:	da 23       	and	r29, r26
     11c:	da 23       	and	r29, r26
     11e:	da 23       	and	r29, r26
     120:	da 23       	and	r29, r26
     122:	da 23       	and	r29, r26
     124:	da 23       	and	r29, r26
     126:	da 23       	and	r29, r26
     128:	da 23       	and	r29, r26
     12a:	da 23       	and	r29, r26
     12c:	da 23       	and	r29, r26
     12e:	da 23       	and	r29, r26
     130:	da 23       	and	r29, r26
     132:	da 23       	and	r29, r26
     134:	da 23       	and	r29, r26
     136:	da 23       	and	r29, r26
     138:	6c 23       	and	r22, r28
     13a:	da 23       	and	r29, r26
     13c:	da 23       	and	r29, r26
     13e:	da 23       	and	r29, r26
     140:	da 23       	and	r29, r26
     142:	da 23       	and	r29, r26
     144:	da 23       	and	r29, r26
     146:	da 23       	and	r29, r26
     148:	da 23       	and	r29, r26
     14a:	da 23       	and	r29, r26
     14c:	da 23       	and	r29, r26
     14e:	da 23       	and	r29, r26
     150:	da 23       	and	r29, r26
     152:	da 23       	and	r29, r26
     154:	da 23       	and	r29, r26
     156:	da 23       	and	r29, r26
     158:	d6 23       	and	r29, r22
     15a:	da 23       	and	r29, r26
     15c:	da 23       	and	r29, r26
     15e:	da 23       	and	r29, r26
     160:	da 23       	and	r29, r26
     162:	da 23       	and	r29, r26
     164:	da 23       	and	r29, r26
     166:	da 23       	and	r29, r26
     168:	a1 23       	and	r26, r17
     16a:	da 23       	and	r29, r26
     16c:	da 23       	and	r29, r26
     16e:	da 23       	and	r29, r26
     170:	da 23       	and	r29, r26
     172:	da 23       	and	r29, r26
     174:	da 23       	and	r29, r26
     176:	da 23       	and	r29, r26
     178:	da 23       	and	r29, r26
     17a:	da 23       	and	r29, r26
     17c:	da 23       	and	r29, r26
     17e:	da 23       	and	r29, r26
     180:	da 23       	and	r29, r26
     182:	da 23       	and	r29, r26
     184:	da 23       	and	r29, r26
     186:	da 23       	and	r29, r26
     188:	95 23       	and	r25, r21
     18a:	da 23       	and	r29, r26
     18c:	da 23       	and	r29, r26
     18e:	da 23       	and	r29, r26
     190:	da 23       	and	r29, r26
     192:	da 23       	and	r29, r26
     194:	da 23       	and	r29, r26
     196:	da 23       	and	r29, r26
     198:	b9 23       	and	r27, r25

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 49 0b 	call	0x1692	; 0x1692 <prvCheckTasksWaitingTermination>
     19e:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	5b d2       	rcall	.+1206   	; 0x65e <vPortYield>
     1a8:	0e 94 76 17 	call	0x2eec	; 0x2eec <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 76 14 	call	0x28ec	; 0x28ec <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	16 e0       	ldi	r17, 0x06	; 6
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ee e6       	ldi	r30, 0x6E	; 110
     1e4:	f5 e5       	ldi	r31, 0x55	; 85
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a6 38       	cpi	r26, 0x86	; 134
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	22 e1       	ldi	r18, 0x12	; 18
     1f8:	a6 e8       	ldi	r26, 0x86	; 134
     1fa:	b6 e0       	ldi	r27, 0x06	; 6
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	af 37       	cpi	r26, 0x7F	; 127
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 41 19 	call	0x3282	; 0x3282 <main>
     20a:	0c 94 b5 2a 	jmp	0x556a	; 0x556a <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     210:	e2 e9       	ldi	r30, 0x92	; 146
     212:	f6 e0       	ldi	r31, 0x06	; 6
     214:	a6 e9       	ldi	r26, 0x96	; 150
     216:	b6 e0       	ldi	r27, 0x06	; 6
     218:	b1 83       	std	Z+1, r27	; 0x01
     21a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21c:	13 82       	std	Z+3, r1	; 0x03
     21e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     220:	e6 e5       	ldi	r30, 0x56	; 86
     222:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     224:	f0 93 91 06 	sts	0x0691, r31	; 0x800691 <pxEnd+0x1>
     228:	e0 93 90 06 	sts	0x0690, r30	; 0x800690 <pxEnd>
    pxEnd->xBlockSize = 0;
     22c:	13 82       	std	Z+3, r1	; 0x03
     22e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     230:	11 82       	std	Z+1, r1	; 0x01
     232:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     234:	80 ec       	ldi	r24, 0xC0	; 192
     236:	99 e0       	ldi	r25, 0x09	; 9
     238:	13 96       	adiw	r26, 0x03	; 3
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     240:	ed 93       	st	X+, r30
     242:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     244:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     248:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24c:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     250:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e8       	ldi	r25, 0x80	; 128
     258:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <__data_end+0x1>
     25c:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__data_end>
     260:	08 95       	ret

00000262 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     268:	a2 e9       	ldi	r26, 0x92	; 146
     26a:	b6 e0       	ldi	r27, 0x06	; 6
     26c:	01 c0       	rjmp	.+2      	; 0x270 <prvInsertBlockIntoFreeList+0xe>
     26e:	df 01       	movw	r26, r30
     270:	ed 91       	ld	r30, X+
     272:	fc 91       	ld	r31, X
     274:	11 97       	sbiw	r26, 0x01	; 1
     276:	ec 17       	cp	r30, r28
     278:	fd 07       	cpc	r31, r29
     27a:	c8 f3       	brcs	.-14     	; 0x26e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	8d 91       	ld	r24, X+
     280:	9c 91       	ld	r25, X
     282:	13 97       	sbiw	r26, 0x03	; 3
     284:	9d 01       	movw	r18, r26
     286:	28 0f       	add	r18, r24
     288:	39 1f       	adc	r19, r25
     28a:	c2 17       	cp	r28, r18
     28c:	d3 07       	cpc	r29, r19
     28e:	49 f4       	brne	.+18     	; 0x2a2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     290:	2a 81       	ldd	r18, Y+2	; 0x02
     292:	3b 81       	ldd	r19, Y+3	; 0x03
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	13 96       	adiw	r26, 0x03	; 3
     29a:	9c 93       	st	X, r25
     29c:	8e 93       	st	-X, r24
     29e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2a0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	9e 01       	movw	r18, r28
     2a8:	28 0f       	add	r18, r24
     2aa:	39 1f       	adc	r19, r25
     2ac:	e2 17       	cp	r30, r18
     2ae:	f3 07       	cpc	r31, r19
     2b0:	c1 f4       	brne	.+48     	; 0x2e2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b2:	20 91 90 06 	lds	r18, 0x0690	; 0x800690 <pxEnd>
     2b6:	30 91 91 06 	lds	r19, 0x0691	; 0x800691 <pxEnd+0x1>
     2ba:	e2 17       	cp	r30, r18
     2bc:	f3 07       	cpc	r31, r19
     2be:	71 f0       	breq	.+28     	; 0x2dc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2c0:	22 81       	ldd	r18, Z+2	; 0x02
     2c2:	33 81       	ldd	r19, Z+3	; 0x03
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	9b 83       	std	Y+3, r25	; 0x03
     2ca:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2cc:	ed 91       	ld	r30, X+
     2ce:	fc 91       	ld	r31, X
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	99 83       	std	Y+1, r25	; 0x01
     2d8:	88 83       	st	Y, r24
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2dc:	39 83       	std	Y+1, r19	; 0x01
     2de:	28 83       	st	Y, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e2:	f9 83       	std	Y+1, r31	; 0x01
     2e4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e6:	ca 17       	cp	r28, r26
     2e8:	db 07       	cpc	r29, r27
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ec:	cd 93       	st	X+, r28
     2ee:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     304:	0e 94 94 0c 	call	0x1928	; 0x1928 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     308:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxEnd>
     30c:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxEnd+0x1>
     310:	89 2b       	or	r24, r25
     312:	09 f4       	brne	.+2      	; 0x316 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     314:	7d df       	rcall	.-262    	; 0x210 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     316:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <__data_end>
     31a:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <__data_end+0x1>
     31e:	80 23       	and	r24, r16
     320:	91 23       	and	r25, r17
     322:	89 2b       	or	r24, r25
     324:	09 f0       	breq	.+2      	; 0x328 <pvPortMalloc+0x32>
     326:	76 c0       	rjmp	.+236    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     328:	01 15       	cp	r16, r1
     32a:	11 05       	cpc	r17, r1
     32c:	49 f0       	breq	.+18     	; 0x340 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     32e:	c8 01       	movw	r24, r16
     330:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	18 f0       	brcs	.+6      	; 0x33e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	01 c0       	rjmp	.+2      	; 0x340 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     33e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     340:	01 15       	cp	r16, r1
     342:	11 05       	cpc	r17, r1
     344:	09 f4       	brne	.+2      	; 0x348 <pvPortMalloc+0x52>
     346:	69 c0       	rjmp	.+210    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     348:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xFreeBytesRemaining>
     34c:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     350:	80 17       	cp	r24, r16
     352:	91 07       	cpc	r25, r17
     354:	08 f4       	brcc	.+2      	; 0x358 <pvPortMalloc+0x62>
     356:	64 c0       	rjmp	.+200    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     358:	c0 91 92 06 	lds	r28, 0x0692	; 0x800692 <xStart>
     35c:	d0 91 93 06 	lds	r29, 0x0693	; 0x800693 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     360:	e2 e9       	ldi	r30, 0x92	; 146
     362:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     364:	02 c0       	rjmp	.+4      	; 0x36a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     366:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     368:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	9b 81       	ldd	r25, Y+3	; 0x03
     36e:	80 17       	cp	r24, r16
     370:	91 07       	cpc	r25, r17
     372:	20 f4       	brcc	.+8      	; 0x37c <pvPortMalloc+0x86>
     374:	88 81       	ld	r24, Y
     376:	99 81       	ldd	r25, Y+1	; 0x01
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	a9 f7       	brne	.-22     	; 0x366 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     37c:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <pxEnd>
     380:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <pxEnd+0x1>
     384:	c8 17       	cp	r28, r24
     386:	d9 07       	cpc	r29, r25
     388:	09 f4       	brne	.+2      	; 0x38c <pvPortMalloc+0x96>
     38a:	4d c0       	rjmp	.+154    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     38c:	e0 80       	ld	r14, Z
     38e:	f1 80       	ldd	r15, Z+1	; 0x01
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	e8 0e       	add	r14, r24
     394:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     396:	88 81       	ld	r24, Y
     398:	99 81       	ldd	r25, Y+1	; 0x01
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	20 1b       	sub	r18, r16
     3a4:	31 0b       	sbc	r19, r17
     3a6:	29 30       	cpi	r18, 0x09	; 9
     3a8:	31 05       	cpc	r19, r1
     3aa:	48 f0       	brcs	.+18     	; 0x3be <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3ac:	ce 01       	movw	r24, r28
     3ae:	80 0f       	add	r24, r16
     3b0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3b2:	fc 01       	movw	r30, r24
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b8:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3ba:	0a 83       	std	Y+2, r16	; 0x02
     3bc:	52 df       	rcall	.-348    	; 0x262 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xFreeBytesRemaining>
     3c6:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     3d2:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d6:	40 91 8c 06 	lds	r20, 0x068C	; 0x80068c <xMinimumEverFreeBytesRemaining>
     3da:	50 91 8d 06 	lds	r21, 0x068D	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	20 f4       	brcc	.+8      	; 0x3ec <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e4:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <xMinimumEverFreeBytesRemaining+0x1>
     3e8:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3ec:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <__data_end>
     3f0:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <__data_end+0x1>
     3f4:	28 2b       	or	r18, r24
     3f6:	39 2b       	or	r19, r25
     3f8:	3b 83       	std	Y+3, r19	; 0x03
     3fa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     400:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <xNumberOfSuccessfulAllocations>
     404:	90 91 8b 06 	lds	r25, 0x068B	; 0x80068b <xNumberOfSuccessfulAllocations+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 8b 06 	sts	0x068B, r25	; 0x80068b <xNumberOfSuccessfulAllocations+0x1>
     40e:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xNumberOfSuccessfulAllocations>
     412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
     418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41a:	e1 2c       	mov	r14, r1
     41c:	f1 2c       	mov	r15, r1
     41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	e1 2c       	mov	r14, r1
     428:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     42a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     42e:	e1 14       	cp	r14, r1
     430:	f1 04       	cpc	r15, r1
     432:	11 f4       	brne	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     434:	0e 94 82 17 	call	0x2f04	; 0x2f04 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     438:	c7 01       	movw	r24, r14
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	91 f1       	breq	.+100    	; 0x4b8 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     454:	ec 01       	movw	r28, r24
     456:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     458:	4a 81       	ldd	r20, Y+2	; 0x02
     45a:	5b 81       	ldd	r21, Y+3	; 0x03
     45c:	20 91 86 06 	lds	r18, 0x0686	; 0x800686 <__data_end>
     460:	30 91 87 06 	lds	r19, 0x0687	; 0x800687 <__data_end+0x1>
     464:	ba 01       	movw	r22, r20
     466:	62 23       	and	r22, r18
     468:	73 23       	and	r23, r19
     46a:	67 2b       	or	r22, r23
     46c:	29 f1       	breq	.+74     	; 0x4b8 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     46e:	68 81       	ld	r22, Y
     470:	79 81       	ldd	r23, Y+1	; 0x01
     472:	67 2b       	or	r22, r23
     474:	09 f5       	brne	.+66     	; 0x4b8 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     476:	20 95       	com	r18
     478:	30 95       	com	r19
     47a:	24 23       	and	r18, r20
     47c:	35 23       	and	r19, r21
     47e:	3b 83       	std	Y+3, r19	; 0x03
     480:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     482:	0e 94 94 0c 	call	0x1928	; 0x1928 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	9b 81       	ldd	r25, Y+3	; 0x03
     48a:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <xFreeBytesRemaining>
     48e:	30 91 8f 06 	lds	r19, 0x068F	; 0x80068f <xFreeBytesRemaining+0x1>
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xFreeBytesRemaining+0x1>
     49a:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     49e:	ce 01       	movw	r24, r28
     4a0:	e0 de       	rcall	.-576    	; 0x262 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4a2:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <xNumberOfSuccessfulFrees>
     4a6:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <xNumberOfSuccessfulFrees+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <xNumberOfSuccessfulFrees+0x1>
     4b0:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4b4:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4c2:	fc 01       	movw	r30, r24
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	92 83       	std	Z+2, r25	; 0x02
     4c8:	81 83       	std	Z+1, r24	; 0x01
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	5f ef       	ldi	r21, 0xFF	; 255
     4ce:	ba 01       	movw	r22, r20
     4d0:	43 83       	std	Z+3, r20	; 0x03
     4d2:	54 83       	std	Z+4, r21	; 0x04
     4d4:	65 83       	std	Z+5, r22	; 0x05
     4d6:	76 83       	std	Z+6, r23	; 0x06
     4d8:	90 87       	std	Z+8, r25	; 0x08
     4da:	87 83       	std	Z+7, r24	; 0x07
     4dc:	92 87       	std	Z+10, r25	; 0x0a
     4de:	81 87       	std	Z+9, r24	; 0x09
     4e0:	10 82       	st	Z, r1
     4e2:	08 95       	ret

000004e4 <vListInitialiseItem>:
     4e4:	fc 01       	movw	r30, r24
     4e6:	13 86       	std	Z+11, r1	; 0x0b
     4e8:	12 86       	std	Z+10, r1	; 0x0a
     4ea:	08 95       	ret

000004ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f6:	08 81       	ld	r16, Y
     4f8:	19 81       	ldd	r17, Y+1	; 0x01
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4fe:	0f 3f       	cpi	r16, 0xFF	; 255
     500:	4f ef       	ldi	r20, 0xFF	; 255
     502:	14 07       	cpc	r17, r20
     504:	24 07       	cpc	r18, r20
     506:	34 07       	cpc	r19, r20
     508:	21 f4       	brne	.+8      	; 0x512 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     50a:	fc 01       	movw	r30, r24
     50c:	a1 85       	ldd	r26, Z+9	; 0x09
     50e:	b2 85       	ldd	r27, Z+10	; 0x0a
     510:	11 c0       	rjmp	.+34     	; 0x534 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     512:	dc 01       	movw	r26, r24
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	01 c0       	rjmp	.+2      	; 0x51a <vListInsert+0x2e>
     518:	df 01       	movw	r26, r30
     51a:	14 96       	adiw	r26, 0x04	; 4
     51c:	ed 91       	ld	r30, X+
     51e:	fc 91       	ld	r31, X
     520:	15 97       	sbiw	r26, 0x05	; 5
     522:	40 81       	ld	r20, Z
     524:	51 81       	ldd	r21, Z+1	; 0x01
     526:	62 81       	ldd	r22, Z+2	; 0x02
     528:	73 81       	ldd	r23, Z+3	; 0x03
     52a:	04 17       	cp	r16, r20
     52c:	15 07       	cpc	r17, r21
     52e:	26 07       	cpc	r18, r22
     530:	37 07       	cpc	r19, r23
     532:	90 f7       	brcc	.-28     	; 0x518 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     534:	14 96       	adiw	r26, 0x04	; 4
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	fd 83       	std	Y+5, r31	; 0x05
     53e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     540:	d7 83       	std	Z+7, r29	; 0x07
     542:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     544:	bf 83       	std	Y+7, r27	; 0x07
     546:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     548:	15 96       	adiw	r26, 0x05	; 5
     54a:	dc 93       	st	X, r29
     54c:	ce 93       	st	-X, r28
     54e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     550:	9b 87       	std	Y+11, r25	; 0x0b
     552:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     554:	fc 01       	movw	r30, r24
     556:	20 81       	ld	r18, Z
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	20 83       	st	Z, r18
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     56c:	a2 85       	ldd	r26, Z+10	; 0x0a
     56e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     570:	c4 81       	ldd	r28, Z+4	; 0x04
     572:	d5 81       	ldd	r29, Z+5	; 0x05
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	97 81       	ldd	r25, Z+7	; 0x07
     578:	9f 83       	std	Y+7, r25	; 0x07
     57a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     57c:	c6 81       	ldd	r28, Z+6	; 0x06
     57e:	d7 81       	ldd	r29, Z+7	; 0x07
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	9d 83       	std	Y+5, r25	; 0x05
     586:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     588:	11 96       	adiw	r26, 0x01	; 1
     58a:	8d 91       	ld	r24, X+
     58c:	9c 91       	ld	r25, X
     58e:	12 97       	sbiw	r26, 0x02	; 2
     590:	e8 17       	cp	r30, r24
     592:	f9 07       	cpc	r31, r25
     594:	31 f4       	brne	.+12     	; 0x5a2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     596:	86 81       	ldd	r24, Z+6	; 0x06
     598:	97 81       	ldd	r25, Z+7	; 0x07
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
     5a0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5a2:	13 86       	std	Z+11, r1	; 0x0b
     5a4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a6:	8c 91       	ld	r24, X
     5a8:	81 50       	subi	r24, 0x01	; 1
     5aa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5ac:	8c 91       	ld	r24, X
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5b4:	a8 95       	wdr
     5b6:	90 ec       	ldi	r25, 0xC0	; 192
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	a8 95       	wdr
     5c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ca:	08 95       	ret

000005cc <pxPortInitialiseStack>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	60 83       	st	Z, r22
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	70 83       	st	Z, r23
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	20 e8       	ldi	r18, 0x80	; 128
     5e0:	20 83       	st	Z, r18
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	10 82       	st	Z, r1
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	10 82       	st	Z, r1
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	10 82       	st	Z, r1
     5ee:	77 97       	sbiw	r30, 0x17	; 23
     5f0:	40 83       	st	Z, r20
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	50 83       	st	Z, r21
     5f6:	86 97       	sbiw	r24, 0x26	; 38
     5f8:	08 95       	ret

000005fa <xPortStartScheduler>:
     5fa:	dc df       	rcall	.-72     	; 0x5b4 <prvSetupTimerInterrupt>
     5fc:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     600:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     604:	cd 91       	ld	r28, X+
     606:	cd bf       	out	0x3d, r28	; 61
     608:	dd 91       	ld	r29, X+
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	3f 90       	pop	r3
     646:	2f 90       	pop	r2
     648:	1f 90       	pop	r1
     64a:	0f 90       	pop	r0
     64c:	0c be       	out	0x3c, r0	; 60
     64e:	0f 90       	pop	r0
     650:	0b be       	out	0x3b, r0	; 59
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	08 95       	ret
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <vPortYield>:
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	0f 92       	push	r0
     666:	0b b6       	in	r0, 0x3b	; 59
     668:	0f 92       	push	r0
     66a:	0c b6       	in	r0, 0x3c	; 60
     66c:	0f 92       	push	r0
     66e:	1f 92       	push	r1
     670:	11 24       	eor	r1, r1
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     6b2:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     6b6:	0d b6       	in	r0, 0x3d	; 61
     6b8:	0d 92       	st	X+, r0
     6ba:	0e b6       	in	r0, 0x3e	; 62
     6bc:	0d 92       	st	X+, r0
     6be:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <vTaskSwitchContext>
     6c2:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     6c6:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     6ca:	cd 91       	ld	r28, X+
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	dd 91       	ld	r29, X+
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	3f 90       	pop	r3
     70c:	2f 90       	pop	r2
     70e:	1f 90       	pop	r1
     710:	0f 90       	pop	r0
     712:	0c be       	out	0x3c, r0	; 60
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	08 95       	ret

00000720 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	0f 92       	push	r0
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	0c b6       	in	r0, 0x3c	; 60
     72e:	0f 92       	push	r0
     730:	1f 92       	push	r1
     732:	11 24       	eor	r1, r1
     734:	2f 92       	push	r2
     736:	3f 92       	push	r3
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	6f 92       	push	r6
     73e:	7f 92       	push	r7
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     774:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     778:	0d b6       	in	r0, 0x3d	; 61
     77a:	0d 92       	st	X+, r0
     77c:	0e b6       	in	r0, 0x3e	; 62
     77e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     780:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     782:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xTaskIncrementTick>
     786:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     788:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     78c:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
     790:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
     794:	cd 91       	ld	r28, X+
     796:	cd bf       	out	0x3d, r28	; 61
     798:	dd 91       	ld	r29, X+
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	1f 90       	pop	r1
     7da:	0f 90       	pop	r0
     7dc:	0c be       	out	0x3c, r0	; 60
     7de:	0f 90       	pop	r0
     7e0:	0b be       	out	0x3b, r0	; 59
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7e8:	08 95       	ret

000007ea <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     7ea:	9a df       	rcall	.-204    	; 0x720 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     7ec:	18 95       	reti

000007ee <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	0f 92       	push	r0
     7f4:	fc 01       	movw	r30, r24
     7f6:	86 8d       	ldd	r24, Z+30	; 0x1e
     7f8:	81 11       	cpse	r24, r1
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <prvIsQueueEmpty+0x12>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <prvIsQueueEmpty+0x14>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	08 95       	ret

00000808 <prvIsQueueFull>:
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	0f 92       	push	r0
     80e:	fc 01       	movw	r30, r24
     810:	26 8d       	ldd	r18, Z+30	; 0x1e
     812:	87 8d       	ldd	r24, Z+31	; 0x1f
     814:	28 13       	cpse	r18, r24
     816:	02 c0       	rjmp	.+4      	; 0x81c <prvIsQueueFull+0x14>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	01 c0       	rjmp	.+2      	; 0x81e <prvIsQueueFull+0x16>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	08 95       	ret

00000824 <prvCopyDataToQueue>:
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	04 2f       	mov	r16, r20
     830:	1e 8d       	ldd	r17, Y+30	; 0x1e
     832:	48 a1       	ldd	r20, Y+32	; 0x20
     834:	41 11       	cpse	r20, r1
     836:	0c c0       	rjmp	.+24     	; 0x850 <prvCopyDataToQueue+0x2c>
     838:	88 81       	ld	r24, Y
     83a:	99 81       	ldd	r25, Y+1	; 0x01
     83c:	89 2b       	or	r24, r25
     83e:	09 f0       	breq	.+2      	; 0x842 <prvCopyDataToQueue+0x1e>
     840:	42 c0       	rjmp	.+132    	; 0x8c6 <prvCopyDataToQueue+0xa2>
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	0e 94 41 11 	call	0x2282	; 0x2282 <xTaskPriorityDisinherit>
     84a:	1d 82       	std	Y+5, r1	; 0x05
     84c:	1c 82       	std	Y+4, r1	; 0x04
     84e:	42 c0       	rjmp	.+132    	; 0x8d4 <prvCopyDataToQueue+0xb0>
     850:	01 11       	cpse	r16, r1
     852:	17 c0       	rjmp	.+46     	; 0x882 <prvCopyDataToQueue+0x5e>
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	9b 81       	ldd	r25, Y+3	; 0x03
     85a:	0e 94 38 27 	call	0x4e70	; 0x4e70 <memcpy>
     85e:	28 a1       	ldd	r18, Y+32	; 0x20
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	9b 81       	ldd	r25, Y+3	; 0x03
     864:	82 0f       	add	r24, r18
     866:	91 1d       	adc	r25, r1
     868:	9b 83       	std	Y+3, r25	; 0x03
     86a:	8a 83       	std	Y+2, r24	; 0x02
     86c:	2c 81       	ldd	r18, Y+4	; 0x04
     86e:	3d 81       	ldd	r19, Y+5	; 0x05
     870:	82 17       	cp	r24, r18
     872:	93 07       	cpc	r25, r19
     874:	50 f1       	brcs	.+84     	; 0x8ca <prvCopyDataToQueue+0xa6>
     876:	88 81       	ld	r24, Y
     878:	99 81       	ldd	r25, Y+1	; 0x01
     87a:	9b 83       	std	Y+3, r25	; 0x03
     87c:	8a 83       	std	Y+2, r24	; 0x02
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	29 c0       	rjmp	.+82     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	0e 94 38 27 	call	0x4e70	; 0x4e70 <memcpy>
     88c:	88 a1       	ldd	r24, Y+32	; 0x20
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	91 95       	neg	r25
     892:	81 95       	neg	r24
     894:	91 09       	sbc	r25, r1
     896:	2e 81       	ldd	r18, Y+6	; 0x06
     898:	3f 81       	ldd	r19, Y+7	; 0x07
     89a:	28 0f       	add	r18, r24
     89c:	39 1f       	adc	r19, r25
     89e:	3f 83       	std	Y+7, r19	; 0x07
     8a0:	2e 83       	std	Y+6, r18	; 0x06
     8a2:	48 81       	ld	r20, Y
     8a4:	59 81       	ldd	r21, Y+1	; 0x01
     8a6:	24 17       	cp	r18, r20
     8a8:	35 07       	cpc	r19, r21
     8aa:	30 f4       	brcc	.+12     	; 0x8b8 <prvCopyDataToQueue+0x94>
     8ac:	2c 81       	ldd	r18, Y+4	; 0x04
     8ae:	3d 81       	ldd	r19, Y+5	; 0x05
     8b0:	82 0f       	add	r24, r18
     8b2:	93 1f       	adc	r25, r19
     8b4:	9f 83       	std	Y+7, r25	; 0x07
     8b6:	8e 83       	std	Y+6, r24	; 0x06
     8b8:	02 30       	cpi	r16, 0x02	; 2
     8ba:	49 f4       	brne	.+18     	; 0x8ce <prvCopyDataToQueue+0xaa>
     8bc:	11 23       	and	r17, r17
     8be:	49 f0       	breq	.+18     	; 0x8d2 <prvCopyDataToQueue+0xae>
     8c0:	11 50       	subi	r17, 0x01	; 1
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <prvCopyDataToQueue+0xb0>
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	1f 5f       	subi	r17, 0xFF	; 255
     8d6:	1e 8f       	std	Y+30, r17	; 0x1e
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <prvCopyDataFromQueue>:
     8e2:	fc 01       	movw	r30, r24
     8e4:	40 a1       	ldd	r20, Z+32	; 0x20
     8e6:	44 23       	and	r20, r20
     8e8:	a9 f0       	breq	.+42     	; 0x914 <prvCopyDataFromQueue+0x32>
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	26 81       	ldd	r18, Z+6	; 0x06
     8ee:	37 81       	ldd	r19, Z+7	; 0x07
     8f0:	24 0f       	add	r18, r20
     8f2:	35 1f       	adc	r19, r21
     8f4:	37 83       	std	Z+7, r19	; 0x07
     8f6:	26 83       	std	Z+6, r18	; 0x06
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	95 81       	ldd	r25, Z+5	; 0x05
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	20 f0       	brcs	.+8      	; 0x90a <prvCopyDataFromQueue+0x28>
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	97 83       	std	Z+7, r25	; 0x07
     908:	86 83       	std	Z+6, r24	; 0x06
     90a:	cb 01       	movw	r24, r22
     90c:	66 81       	ldd	r22, Z+6	; 0x06
     90e:	77 81       	ldd	r23, Z+7	; 0x07
     910:	0c 94 38 27 	jmp	0x4e70	; 0x4e70 <memcpy>
     914:	08 95       	ret

00000916 <prvUnlockQueue>:
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	0f 92       	push	r0
     924:	1a a1       	ldd	r17, Y+34	; 0x22
     926:	0b c0       	rjmp	.+22     	; 0x93e <prvUnlockQueue+0x28>
     928:	8b 89       	ldd	r24, Y+19	; 0x13
     92a:	88 23       	and	r24, r24
     92c:	51 f0       	breq	.+20     	; 0x942 <prvUnlockQueue+0x2c>
     92e:	ce 01       	movw	r24, r28
     930:	43 96       	adiw	r24, 0x13	; 19
     932:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskRemoveFromEventList>
     936:	81 11       	cpse	r24, r1
     938:	0e 94 2a 11 	call	0x2254	; 0x2254 <vTaskMissedYield>
     93c:	11 50       	subi	r17, 0x01	; 1
     93e:	11 16       	cp	r1, r17
     940:	9c f3       	brlt	.-26     	; 0x928 <prvUnlockQueue+0x12>
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	8a a3       	std	Y+34, r24	; 0x22
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	0f 92       	push	r0
     950:	19 a1       	ldd	r17, Y+33	; 0x21
     952:	0b c0       	rjmp	.+22     	; 0x96a <prvUnlockQueue+0x54>
     954:	88 85       	ldd	r24, Y+8	; 0x08
     956:	88 23       	and	r24, r24
     958:	51 f0       	breq	.+20     	; 0x96e <prvUnlockQueue+0x58>
     95a:	ce 01       	movw	r24, r28
     95c:	08 96       	adiw	r24, 0x08	; 8
     95e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskRemoveFromEventList>
     962:	81 11       	cpse	r24, r1
     964:	0e 94 2a 11 	call	0x2254	; 0x2254 <vTaskMissedYield>
     968:	11 50       	subi	r17, 0x01	; 1
     96a:	11 16       	cp	r1, r17
     96c:	9c f3       	brlt	.-26     	; 0x954 <prvUnlockQueue+0x3e>
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	89 a3       	std	Y+33, r24	; 0x21
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	08 95       	ret

0000097e <xQueueGenericReset>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	0f 92       	push	r0
     98a:	e8 81       	ld	r30, Y
     98c:	f9 81       	ldd	r31, Y+1	; 0x01
     98e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     990:	28 a1       	ldd	r18, Y+32	; 0x20
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	82 9f       	mul	r24, r18
     998:	a0 01       	movw	r20, r0
     99a:	83 9f       	mul	r24, r19
     99c:	50 0d       	add	r21, r0
     99e:	92 9f       	mul	r25, r18
     9a0:	50 0d       	add	r21, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	4e 0f       	add	r20, r30
     9a6:	5f 1f       	adc	r21, r31
     9a8:	5d 83       	std	Y+5, r21	; 0x05
     9aa:	4c 83       	std	Y+4, r20	; 0x04
     9ac:	1e 8e       	std	Y+30, r1	; 0x1e
     9ae:	fb 83       	std	Y+3, r31	; 0x03
     9b0:	ea 83       	std	Y+2, r30	; 0x02
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	28 9f       	mul	r18, r24
     9b6:	a0 01       	movw	r20, r0
     9b8:	29 9f       	mul	r18, r25
     9ba:	50 0d       	add	r21, r0
     9bc:	38 9f       	mul	r19, r24
     9be:	50 0d       	add	r21, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	cf 01       	movw	r24, r30
     9c4:	84 0f       	add	r24, r20
     9c6:	95 1f       	adc	r25, r21
     9c8:	9f 83       	std	Y+7, r25	; 0x07
     9ca:	8e 83       	std	Y+6, r24	; 0x06
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	89 a3       	std	Y+33, r24	; 0x21
     9d0:	8a a3       	std	Y+34, r24	; 0x22
     9d2:	61 11       	cpse	r22, r1
     9d4:	0b c0       	rjmp	.+22     	; 0x9ec <xQueueGenericReset+0x6e>
     9d6:	88 85       	ldd	r24, Y+8	; 0x08
     9d8:	88 23       	and	r24, r24
     9da:	71 f0       	breq	.+28     	; 0x9f8 <xQueueGenericReset+0x7a>
     9dc:	ce 01       	movw	r24, r28
     9de:	08 96       	adiw	r24, 0x08	; 8
     9e0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskRemoveFromEventList>
     9e4:	88 23       	and	r24, r24
     9e6:	41 f0       	breq	.+16     	; 0x9f8 <xQueueGenericReset+0x7a>
     9e8:	3a de       	rcall	.-908    	; 0x65e <vPortYield>
     9ea:	06 c0       	rjmp	.+12     	; 0x9f8 <xQueueGenericReset+0x7a>
     9ec:	ce 01       	movw	r24, r28
     9ee:	08 96       	adiw	r24, 0x08	; 8
     9f0:	68 dd       	rcall	.-1328   	; 0x4c2 <vListInitialise>
     9f2:	ce 01       	movw	r24, r28
     9f4:	43 96       	adiw	r24, 0x13	; 19
     9f6:	65 dd       	rcall	.-1334   	; 0x4c2 <vListInitialise>
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <prvInitialiseNewQueue>:
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	f8 01       	movw	r30, r16
     a0a:	61 11       	cpse	r22, r1
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <prvInitialiseNewQueue+0x10>
     a0e:	11 83       	std	Z+1, r17	; 0x01
     a10:	00 83       	st	Z, r16
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <prvInitialiseNewQueue+0x14>
     a14:	51 83       	std	Z+1, r21	; 0x01
     a16:	40 83       	st	Z, r20
     a18:	87 8f       	std	Z+31, r24	; 0x1f
     a1a:	60 a3       	std	Z+32, r22	; 0x20
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	cf 01       	movw	r24, r30
     a20:	ae df       	rcall	.-164    	; 0x97e <xQueueGenericReset>
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <xQueueGenericCreate>:
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	f8 2e       	mov	r15, r24
     a38:	e6 2e       	mov	r14, r22
     a3a:	d4 2e       	mov	r13, r20
     a3c:	86 9f       	mul	r24, r22
     a3e:	c0 01       	movw	r24, r0
     a40:	11 24       	eor	r1, r1
     a42:	83 96       	adiw	r24, 0x23	; 35
     a44:	58 dc       	rcall	.-1872   	; 0x2f6 <pvPortMalloc>
     a46:	ec 01       	movw	r28, r24
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	41 f0       	breq	.+16     	; 0xa5c <xQueueGenericCreate+0x34>
     a4c:	8c 01       	movw	r16, r24
     a4e:	2d 2d       	mov	r18, r13
     a50:	ac 01       	movw	r20, r24
     a52:	4d 5d       	subi	r20, 0xDD	; 221
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	6e 2d       	mov	r22, r14
     a58:	8f 2d       	mov	r24, r15
     a5a:	d4 df       	rcall	.-88     	; 0xa04 <prvInitialiseNewQueue>
     a5c:	ce 01       	movw	r24, r28
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	08 95       	ret

00000a6e <xQueueGenericSend>:
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	29 97       	sbiw	r28, 0x09	; 9
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	7c 01       	movw	r14, r24
     a90:	6b 01       	movw	r12, r22
     a92:	2e 83       	std	Y+6, r18	; 0x06
     a94:	3f 83       	std	Y+7, r19	; 0x07
     a96:	48 87       	std	Y+8, r20	; 0x08
     a98:	59 87       	std	Y+9, r21	; 0x09
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	0f 92       	push	r0
     aa2:	f7 01       	movw	r30, r14
     aa4:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa6:	87 8d       	ldd	r24, Z+31	; 0x1f
     aa8:	98 17       	cp	r25, r24
     aaa:	10 f0       	brcs	.+4      	; 0xab0 <xQueueGenericSend+0x42>
     aac:	02 30       	cpi	r16, 0x02	; 2
     aae:	b1 f4       	brne	.+44     	; 0xadc <xQueueGenericSend+0x6e>
     ab0:	40 2f       	mov	r20, r16
     ab2:	b6 01       	movw	r22, r12
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 de       	rcall	.-660    	; 0x824 <prvCopyDataToQueue>
     ab8:	f7 01       	movw	r30, r14
     aba:	93 89       	ldd	r25, Z+19	; 0x13
     abc:	99 23       	and	r25, r25
     abe:	41 f0       	breq	.+16     	; 0xad0 <xQueueGenericSend+0x62>
     ac0:	c7 01       	movw	r24, r14
     ac2:	43 96       	adiw	r24, 0x13	; 19
     ac4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskRemoveFromEventList>
     ac8:	88 23       	and	r24, r24
     aca:	21 f0       	breq	.+8      	; 0xad4 <xQueueGenericSend+0x66>
     acc:	c8 dd       	rcall	.-1136   	; 0x65e <vPortYield>
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <xQueueGenericSend+0x66>
     ad0:	81 11       	cpse	r24, r1
     ad2:	c5 dd       	rcall	.-1142   	; 0x65e <vPortYield>
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	4c c0       	rjmp	.+152    	; 0xb74 <xQueueGenericSend+0x106>
     adc:	8e 81       	ldd	r24, Y+6	; 0x06
     ade:	9f 81       	ldd	r25, Y+7	; 0x07
     ae0:	a8 85       	ldd	r26, Y+8	; 0x08
     ae2:	b9 85       	ldd	r27, Y+9	; 0x09
     ae4:	89 2b       	or	r24, r25
     ae6:	8a 2b       	or	r24, r26
     ae8:	8b 2b       	or	r24, r27
     aea:	21 f4       	brne	.+8      	; 0xaf4 <xQueueGenericSend+0x86>
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	40 c0       	rjmp	.+128    	; 0xb74 <xQueueGenericSend+0x106>
     af4:	11 11       	cpse	r17, r1
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <xQueueGenericSend+0x94>
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	0e 94 b3 10 	call	0x2166	; 0x2166 <vTaskInternalSetTimeOutState>
     b00:	11 e0       	ldi	r17, 0x01	; 1
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	10 d7       	rcall	.+3616   	; 0x1928 <vTaskSuspendAll>
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	0f 92       	push	r0
     b0e:	f7 01       	movw	r30, r14
     b10:	81 a1       	ldd	r24, Z+33	; 0x21
     b12:	8f 3f       	cpi	r24, 0xFF	; 255
     b14:	09 f4       	brne	.+2      	; 0xb18 <xQueueGenericSend+0xaa>
     b16:	11 a2       	std	Z+33, r1	; 0x21
     b18:	f7 01       	movw	r30, r14
     b1a:	82 a1       	ldd	r24, Z+34	; 0x22
     b1c:	8f 3f       	cpi	r24, 0xFF	; 255
     b1e:	09 f4       	brne	.+2      	; 0xb22 <xQueueGenericSend+0xb4>
     b20:	12 a2       	std	Z+34, r1	; 0x22
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	be 01       	movw	r22, r28
     b28:	6a 5f       	subi	r22, 0xFA	; 250
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	0e 94 c4 10 	call	0x2188	; 0x2188 <xTaskCheckForTimeOut>
     b34:	81 11       	cpse	r24, r1
     b36:	19 c0       	rjmp	.+50     	; 0xb6a <xQueueGenericSend+0xfc>
     b38:	c7 01       	movw	r24, r14
     b3a:	66 de       	rcall	.-820    	; 0x808 <prvIsQueueFull>
     b3c:	88 23       	and	r24, r24
     b3e:	81 f0       	breq	.+32     	; 0xb60 <xQueueGenericSend+0xf2>
     b40:	4e 81       	ldd	r20, Y+6	; 0x06
     b42:	5f 81       	ldd	r21, Y+7	; 0x07
     b44:	68 85       	ldd	r22, Y+8	; 0x08
     b46:	79 85       	ldd	r23, Y+9	; 0x09
     b48:	c7 01       	movw	r24, r14
     b4a:	08 96       	adiw	r24, 0x08	; 8
     b4c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <vTaskPlaceOnEventList>
     b50:	c7 01       	movw	r24, r14
     b52:	e1 de       	rcall	.-574    	; 0x916 <prvUnlockQueue>
     b54:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>
     b58:	81 11       	cpse	r24, r1
     b5a:	a0 cf       	rjmp	.-192    	; 0xa9c <xQueueGenericSend+0x2e>
     b5c:	80 dd       	rcall	.-1280   	; 0x65e <vPortYield>
     b5e:	9e cf       	rjmp	.-196    	; 0xa9c <xQueueGenericSend+0x2e>
     b60:	c7 01       	movw	r24, r14
     b62:	d9 de       	rcall	.-590    	; 0x916 <prvUnlockQueue>
     b64:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>
     b68:	99 cf       	rjmp	.-206    	; 0xa9c <xQueueGenericSend+0x2e>
     b6a:	c7 01       	movw	r24, r14
     b6c:	d4 de       	rcall	.-600    	; 0x916 <prvUnlockQueue>
     b6e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	29 96       	adiw	r28, 0x09	; 9
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	08 95       	ret

00000b92 <prvInitialiseMutex>:
     b92:	0f 93       	push	r16
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	69 f0       	breq	.+26     	; 0xbb2 <prvInitialiseMutex+0x20>
     b98:	fc 01       	movw	r30, r24
     b9a:	15 82       	std	Z+5, r1	; 0x05
     b9c:	14 82       	std	Z+4, r1	; 0x04
     b9e:	11 82       	std	Z+1, r1	; 0x01
     ba0:	10 82       	st	Z, r1
     ba2:	16 82       	std	Z+6, r1	; 0x06
     ba4:	00 e0       	ldi	r16, 0x00	; 0
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	a9 01       	movw	r20, r18
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	5e df       	rcall	.-324    	; 0xa6e <xQueueGenericSend>
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <xQueueCreateMutex>:
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	48 2f       	mov	r20, r24
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	33 df       	rcall	.-410    	; 0xa28 <xQueueGenericCreate>
     bc2:	ec 01       	movw	r28, r24
     bc4:	e6 df       	rcall	.-52     	; 0xb92 <prvInitialiseMutex>
     bc6:	ce 01       	movw	r24, r28
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <xQueueGenericSendFromISR>:
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	8a 01       	movw	r16, r20
     bdc:	fc 01       	movw	r30, r24
     bde:	56 8d       	ldd	r21, Z+30	; 0x1e
     be0:	37 8d       	ldd	r19, Z+31	; 0x1f
     be2:	53 17       	cp	r21, r19
     be4:	10 f0       	brcs	.+4      	; 0xbea <xQueueGenericSendFromISR+0x1c>
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	f9 f4       	brne	.+62     	; 0xc28 <xQueueGenericSendFromISR+0x5a>
     bea:	42 2f       	mov	r20, r18
     bec:	78 01       	movw	r14, r16
     bee:	ec 01       	movw	r28, r24
     bf0:	1a a1       	ldd	r17, Y+34	; 0x22
     bf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bf4:	ce 01       	movw	r24, r28
     bf6:	16 de       	rcall	.-980    	; 0x824 <prvCopyDataToQueue>
     bf8:	1f 3f       	cpi	r17, 0xFF	; 255
     bfa:	81 f4       	brne	.+32     	; 0xc1c <xQueueGenericSendFromISR+0x4e>
     bfc:	8b 89       	ldd	r24, Y+19	; 0x13
     bfe:	88 23       	and	r24, r24
     c00:	a9 f0       	breq	.+42     	; 0xc2c <xQueueGenericSendFromISR+0x5e>
     c02:	ce 01       	movw	r24, r28
     c04:	43 96       	adiw	r24, 0x13	; 19
     c06:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskRemoveFromEventList>
     c0a:	88 23       	and	r24, r24
     c0c:	89 f0       	breq	.+34     	; 0xc30 <xQueueGenericSendFromISR+0x62>
     c0e:	e1 14       	cp	r14, r1
     c10:	f1 04       	cpc	r15, r1
     c12:	81 f0       	breq	.+32     	; 0xc34 <xQueueGenericSendFromISR+0x66>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	f7 01       	movw	r30, r14
     c18:	80 83       	st	Z, r24
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <xQueueGenericSendFromISR+0x68>
     c1c:	ff 24       	eor	r15, r15
     c1e:	f3 94       	inc	r15
     c20:	f1 0e       	add	r15, r17
     c22:	fa a2       	std	Y+34, r15	; 0x22
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	07 c0       	rjmp	.+14     	; 0xc36 <xQueueGenericSendFromISR+0x68>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <xQueueGenericSendFromISR+0x68>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <xQueueGenericSendFromISR+0x68>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <xQueueGenericSendFromISR+0x68>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <xQueueReceive>:
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	29 97       	sbiw	r28, 0x09	; 9
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8c 01       	movw	r16, r24
     c66:	6b 01       	movw	r12, r22
     c68:	2e 83       	std	Y+6, r18	; 0x06
     c6a:	3f 83       	std	Y+7, r19	; 0x07
     c6c:	48 87       	std	Y+8, r20	; 0x08
     c6e:	59 87       	std	Y+9, r21	; 0x09
     c70:	e1 2c       	mov	r14, r1
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	0f 92       	push	r0
     c78:	f8 01       	movw	r30, r16
     c7a:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c7c:	ff 20       	and	r15, r15
     c7e:	99 f0       	breq	.+38     	; 0xca6 <xQueueReceive+0x62>
     c80:	b6 01       	movw	r22, r12
     c82:	c8 01       	movw	r24, r16
     c84:	2e de       	rcall	.-932    	; 0x8e2 <prvCopyDataFromQueue>
     c86:	fa 94       	dec	r15
     c88:	f8 01       	movw	r30, r16
     c8a:	f6 8e       	std	Z+30, r15	; 0x1e
     c8c:	80 85       	ldd	r24, Z+8	; 0x08
     c8e:	88 23       	and	r24, r24
     c90:	31 f0       	breq	.+12     	; 0xc9e <xQueueReceive+0x5a>
     c92:	c8 01       	movw	r24, r16
     c94:	08 96       	adiw	r24, 0x08	; 8
     c96:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <xTaskRemoveFromEventList>
     c9a:	81 11       	cpse	r24, r1
     c9c:	e0 dc       	rcall	.-1600   	; 0x65e <vPortYield>
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	4f c0       	rjmp	.+158    	; 0xd44 <xQueueReceive+0x100>
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	a8 85       	ldd	r26, Y+8	; 0x08
     cac:	b9 85       	ldd	r27, Y+9	; 0x09
     cae:	89 2b       	or	r24, r25
     cb0:	8a 2b       	or	r24, r26
     cb2:	8b 2b       	or	r24, r27
     cb4:	21 f4       	brne	.+8      	; 0xcbe <xQueueReceive+0x7a>
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	43 c0       	rjmp	.+134    	; 0xd44 <xQueueReceive+0x100>
     cbe:	e1 10       	cpse	r14, r1
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <xQueueReceive+0x8a>
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	0e 94 b3 10 	call	0x2166	; 0x2166 <vTaskInternalSetTimeOutState>
     cca:	ee 24       	eor	r14, r14
     ccc:	e3 94       	inc	r14
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	2a d6       	rcall	.+3156   	; 0x1928 <vTaskSuspendAll>
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	0f 92       	push	r0
     cda:	f8 01       	movw	r30, r16
     cdc:	81 a1       	ldd	r24, Z+33	; 0x21
     cde:	8f 3f       	cpi	r24, 0xFF	; 255
     ce0:	09 f4       	brne	.+2      	; 0xce4 <xQueueReceive+0xa0>
     ce2:	11 a2       	std	Z+33, r1	; 0x21
     ce4:	f8 01       	movw	r30, r16
     ce6:	82 a1       	ldd	r24, Z+34	; 0x22
     ce8:	8f 3f       	cpi	r24, 0xFF	; 255
     cea:	09 f4       	brne	.+2      	; 0xcee <xQueueReceive+0xaa>
     cec:	12 a2       	std	Z+34, r1	; 0x22
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	be 01       	movw	r22, r28
     cf4:	6a 5f       	subi	r22, 0xFA	; 250
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 c4 10 	call	0x2188	; 0x2188 <xTaskCheckForTimeOut>
     d00:	81 11       	cpse	r24, r1
     d02:	17 c0       	rjmp	.+46     	; 0xd32 <xQueueReceive+0xee>
     d04:	c8 01       	movw	r24, r16
     d06:	73 dd       	rcall	.-1306   	; 0x7ee <prvIsQueueEmpty>
     d08:	88 23       	and	r24, r24
     d0a:	79 f0       	breq	.+30     	; 0xd2a <xQueueReceive+0xe6>
     d0c:	4e 81       	ldd	r20, Y+6	; 0x06
     d0e:	5f 81       	ldd	r21, Y+7	; 0x07
     d10:	68 85       	ldd	r22, Y+8	; 0x08
     d12:	79 85       	ldd	r23, Y+9	; 0x09
     d14:	c8 01       	movw	r24, r16
     d16:	43 96       	adiw	r24, 0x13	; 19
     d18:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <vTaskPlaceOnEventList>
     d1c:	c8 01       	movw	r24, r16
     d1e:	fb dd       	rcall	.-1034   	; 0x916 <prvUnlockQueue>
     d20:	43 d7       	rcall	.+3718   	; 0x1ba8 <xTaskResumeAll>
     d22:	81 11       	cpse	r24, r1
     d24:	a6 cf       	rjmp	.-180    	; 0xc72 <xQueueReceive+0x2e>
     d26:	9b dc       	rcall	.-1738   	; 0x65e <vPortYield>
     d28:	a4 cf       	rjmp	.-184    	; 0xc72 <xQueueReceive+0x2e>
     d2a:	c8 01       	movw	r24, r16
     d2c:	f4 dd       	rcall	.-1048   	; 0x916 <prvUnlockQueue>
     d2e:	3c d7       	rcall	.+3704   	; 0x1ba8 <xTaskResumeAll>
     d30:	a0 cf       	rjmp	.-192    	; 0xc72 <xQueueReceive+0x2e>
     d32:	c8 01       	movw	r24, r16
     d34:	f0 dd       	rcall	.-1056   	; 0x916 <prvUnlockQueue>
     d36:	38 d7       	rcall	.+3696   	; 0x1ba8 <xTaskResumeAll>
     d38:	c8 01       	movw	r24, r16
     d3a:	59 dd       	rcall	.-1358   	; 0x7ee <prvIsQueueEmpty>
     d3c:	88 23       	and	r24, r24
     d3e:	09 f4       	brne	.+2      	; 0xd42 <xQueueReceive+0xfe>
     d40:	98 cf       	rjmp	.-208    	; 0xc72 <xQueueReceive+0x2e>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	29 96       	adiw	r28, 0x09	; 9
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	08 95       	ret

00000d62 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	0f 92       	push	r0
     d6e:	89 a1       	ldd	r24, Y+33	; 0x21
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	09 f4       	brne	.+2      	; 0xd76 <vQueueWaitForMessageRestricted+0x14>
     d74:	19 a2       	std	Y+33, r1	; 0x21
     d76:	8a a1       	ldd	r24, Y+34	; 0x22
     d78:	8f 3f       	cpi	r24, 0xFF	; 255
     d7a:	09 f4       	brne	.+2      	; 0xd7e <vQueueWaitForMessageRestricted+0x1c>
     d7c:	1a a2       	std	Y+34, r1	; 0x22
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d84:	81 11       	cpse	r24, r1
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d88:	ce 01       	movw	r24, r28
     d8a:	43 96       	adiw	r24, 0x13	; 19
     d8c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d90:	ce 01       	movw	r24, r28
     d92:	c1 dd       	rcall	.-1150   	; 0x916 <prvUnlockQueue>
    }
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     d9a:	fc 01       	movw	r30, r24
     d9c:	44 81       	ldd	r20, Z+4	; 0x04
     d9e:	55 81       	ldd	r21, Z+5	; 0x05
     da0:	22 81       	ldd	r18, Z+2	; 0x02
     da2:	33 81       	ldd	r19, Z+3	; 0x03
     da4:	24 0f       	add	r18, r20
     da6:	35 1f       	adc	r19, r21
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	b9 01       	movw	r22, r18
     dae:	68 1b       	sub	r22, r24
     db0:	79 0b       	sbc	r23, r25
     db2:	cb 01       	movw	r24, r22
     db4:	64 17       	cp	r22, r20
     db6:	75 07       	cpc	r23, r21
     db8:	10 f0       	brcs	.+4      	; 0xdbe <prvBytesInBuffer+0x24>
     dba:	84 1b       	sub	r24, r20
     dbc:	95 0b       	sbc	r25, r21
     dbe:	08 95       	ret

00000dc0 <prvInitialiseNewStreamBuffer>:
     dc0:	0f 93       	push	r16
     dc2:	fc 01       	movw	r30, r24
     dc4:	8f e0       	ldi	r24, 0x0F	; 15
     dc6:	df 01       	movw	r26, r30
     dc8:	1d 92       	st	X+, r1
     dca:	8a 95       	dec	r24
     dcc:	e9 f7       	brne	.-6      	; 0xdc8 <prvInitialiseNewStreamBuffer+0x8>
     dce:	75 87       	std	Z+13, r23	; 0x0d
     dd0:	64 87       	std	Z+12, r22	; 0x0c
     dd2:	55 83       	std	Z+5, r21	; 0x05
     dd4:	44 83       	std	Z+4, r20	; 0x04
     dd6:	37 83       	std	Z+7, r19	; 0x07
     dd8:	26 83       	std	Z+6, r18	; 0x06
     dda:	06 87       	std	Z+14, r16	; 0x0e
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <prvWriteBytesToBuffer>:
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	6c 01       	movw	r12, r24
     df6:	5b 01       	movw	r10, r22
     df8:	7a 01       	movw	r14, r20
     dfa:	fc 01       	movw	r30, r24
     dfc:	c2 81       	ldd	r28, Z+2	; 0x02
     dfe:	d3 81       	ldd	r29, Z+3	; 0x03
     e00:	04 81       	ldd	r16, Z+4	; 0x04
     e02:	15 81       	ldd	r17, Z+5	; 0x05
     e04:	0c 1b       	sub	r16, r28
     e06:	1d 0b       	sbc	r17, r29
     e08:	40 17       	cp	r20, r16
     e0a:	51 07       	cpc	r21, r17
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <prvWriteBytesToBuffer+0x30>
     e0e:	8a 01       	movw	r16, r20
     e10:	f6 01       	movw	r30, r12
     e12:	84 85       	ldd	r24, Z+12	; 0x0c
     e14:	95 85       	ldd	r25, Z+13	; 0x0d
     e16:	a8 01       	movw	r20, r16
     e18:	b5 01       	movw	r22, r10
     e1a:	8c 0f       	add	r24, r28
     e1c:	9d 1f       	adc	r25, r29
     e1e:	0e 94 38 27 	call	0x4e70	; 0x4e70 <memcpy>
     e22:	0e 15       	cp	r16, r14
     e24:	1f 05       	cpc	r17, r15
     e26:	58 f4       	brcc	.+22     	; 0xe3e <prvWriteBytesToBuffer+0x5e>
     e28:	a7 01       	movw	r20, r14
     e2a:	40 1b       	sub	r20, r16
     e2c:	51 0b       	sbc	r21, r17
     e2e:	b5 01       	movw	r22, r10
     e30:	60 0f       	add	r22, r16
     e32:	71 1f       	adc	r23, r17
     e34:	f6 01       	movw	r30, r12
     e36:	84 85       	ldd	r24, Z+12	; 0x0c
     e38:	95 85       	ldd	r25, Z+13	; 0x0d
     e3a:	0e 94 38 27 	call	0x4e70	; 0x4e70 <memcpy>
     e3e:	ce 01       	movw	r24, r28
     e40:	8e 0d       	add	r24, r14
     e42:	9f 1d       	adc	r25, r15
     e44:	f6 01       	movw	r30, r12
     e46:	24 81       	ldd	r18, Z+4	; 0x04
     e48:	35 81       	ldd	r19, Z+5	; 0x05
     e4a:	82 17       	cp	r24, r18
     e4c:	93 07       	cpc	r25, r19
     e4e:	10 f0       	brcs	.+4      	; 0xe54 <prvWriteBytesToBuffer+0x74>
     e50:	82 1b       	sub	r24, r18
     e52:	93 0b       	sbc	r25, r19
     e54:	f6 01       	movw	r30, r12
     e56:	93 83       	std	Z+3, r25	; 0x03
     e58:	82 83       	std	Z+2, r24	; 0x02
     e5a:	c7 01       	movw	r24, r14
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	08 95       	ret

00000e72 <prvWriteMessageToBuffer>:
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	1f 92       	push	r1
     e84:	1f 92       	push	r1
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	7c 01       	movw	r14, r24
     e8c:	6b 01       	movw	r12, r22
     e8e:	5a 83       	std	Y+2, r21	; 0x02
     e90:	49 83       	std	Y+1, r20	; 0x01
     e92:	21 15       	cp	r18, r1
     e94:	31 05       	cpc	r19, r1
     e96:	c1 f0       	breq	.+48     	; 0xec8 <prvWriteMessageToBuffer+0x56>
     e98:	fc 01       	movw	r30, r24
     e9a:	86 85       	ldd	r24, Z+14	; 0x0e
     e9c:	80 fd       	sbrc	r24, 0
     e9e:	08 c0       	rjmp	.+16     	; 0xeb0 <prvWriteMessageToBuffer+0x3e>
     ea0:	42 17       	cp	r20, r18
     ea2:	53 07       	cpc	r21, r19
     ea4:	08 f4       	brcc	.+2      	; 0xea8 <prvWriteMessageToBuffer+0x36>
     ea6:	9a 01       	movw	r18, r20
     ea8:	3a 83       	std	Y+2, r19	; 0x02
     eaa:	29 83       	std	Y+1, r18	; 0x01
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0f c0       	rjmp	.+30     	; 0xece <prvWriteMessageToBuffer+0x5c>
     eb0:	20 17       	cp	r18, r16
     eb2:	31 07       	cpc	r19, r17
     eb4:	58 f0       	brcs	.+22     	; 0xecc <prvWriteMessageToBuffer+0x5a>
     eb6:	42 e0       	ldi	r20, 0x02	; 2
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	be 01       	movw	r22, r28
     ebc:	6f 5f       	subi	r22, 0xFF	; 255
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	c7 01       	movw	r24, r14
     ec2:	8e df       	rcall	.-228    	; 0xde0 <prvWriteBytesToBuffer>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <prvWriteMessageToBuffer+0x5c>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	01 c0       	rjmp	.+2      	; 0xece <prvWriteMessageToBuffer+0x5c>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	88 23       	and	r24, r24
     ed0:	31 f0       	breq	.+12     	; 0xede <prvWriteMessageToBuffer+0x6c>
     ed2:	49 81       	ldd	r20, Y+1	; 0x01
     ed4:	5a 81       	ldd	r21, Y+2	; 0x02
     ed6:	b6 01       	movw	r22, r12
     ed8:	c7 01       	movw	r24, r14
     eda:	82 df       	rcall	.-252    	; 0xde0 <prvWriteBytesToBuffer>
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <prvWriteMessageToBuffer+0x70>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	08 95       	ret

00000ef8 <prvReadBytesFromBuffer>:
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	7c 01       	movw	r14, r24
     f0e:	5b 01       	movw	r10, r22
     f10:	e9 01       	movw	r28, r18
     f12:	42 17       	cp	r20, r18
     f14:	53 07       	cpc	r21, r19
     f16:	08 f4       	brcc	.+2      	; 0xf1a <prvReadBytesFromBuffer+0x22>
     f18:	ea 01       	movw	r28, r20
     f1a:	20 97       	sbiw	r28, 0x00	; 0
     f1c:	81 f1       	breq	.+96     	; 0xf7e <prvReadBytesFromBuffer+0x86>
     f1e:	f7 01       	movw	r30, r14
     f20:	00 81       	ld	r16, Z
     f22:	11 81       	ldd	r17, Z+1	; 0x01
     f24:	84 81       	ldd	r24, Z+4	; 0x04
     f26:	95 81       	ldd	r25, Z+5	; 0x05
     f28:	80 1b       	sub	r24, r16
     f2a:	91 0b       	sbc	r25, r17
     f2c:	6e 01       	movw	r12, r28
     f2e:	8c 17       	cp	r24, r28
     f30:	9d 07       	cpc	r25, r29
     f32:	08 f4       	brcc	.+2      	; 0xf36 <prvReadBytesFromBuffer+0x3e>
     f34:	6c 01       	movw	r12, r24
     f36:	f7 01       	movw	r30, r14
     f38:	64 85       	ldd	r22, Z+12	; 0x0c
     f3a:	75 85       	ldd	r23, Z+13	; 0x0d
     f3c:	60 0f       	add	r22, r16
     f3e:	71 1f       	adc	r23, r17
     f40:	a6 01       	movw	r20, r12
     f42:	c5 01       	movw	r24, r10
     f44:	0e 94 38 27 	call	0x4e70	; 0x4e70 <memcpy>
     f48:	cc 16       	cp	r12, r28
     f4a:	dd 06       	cpc	r13, r29
     f4c:	58 f4       	brcc	.+22     	; 0xf64 <prvReadBytesFromBuffer+0x6c>
     f4e:	ae 01       	movw	r20, r28
     f50:	4c 19       	sub	r20, r12
     f52:	5d 09       	sbc	r21, r13
     f54:	f7 01       	movw	r30, r14
     f56:	64 85       	ldd	r22, Z+12	; 0x0c
     f58:	75 85       	ldd	r23, Z+13	; 0x0d
     f5a:	c5 01       	movw	r24, r10
     f5c:	8c 0d       	add	r24, r12
     f5e:	9d 1d       	adc	r25, r13
     f60:	0e 94 38 27 	call	0x4e70	; 0x4e70 <memcpy>
     f64:	0c 0f       	add	r16, r28
     f66:	1d 1f       	adc	r17, r29
     f68:	f7 01       	movw	r30, r14
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	95 81       	ldd	r25, Z+5	; 0x05
     f6e:	08 17       	cp	r16, r24
     f70:	19 07       	cpc	r17, r25
     f72:	10 f0       	brcs	.+4      	; 0xf78 <prvReadBytesFromBuffer+0x80>
     f74:	08 1b       	sub	r16, r24
     f76:	19 0b       	sbc	r17, r25
     f78:	f7 01       	movw	r30, r14
     f7a:	11 83       	std	Z+1, r17	; 0x01
     f7c:	00 83       	st	Z, r16
     f7e:	ce 01       	movw	r24, r28
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	08 95       	ret

00000f96 <prvReadMessageFromBuffer>:
     f96:	6f 92       	push	r6
     f98:	7f 92       	push	r7
     f9a:	8f 92       	push	r8
     f9c:	9f 92       	push	r9
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	1f 92       	push	r1
     fb4:	1f 92       	push	r1
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	6c 01       	movw	r12, r24
     fbc:	4b 01       	movw	r8, r22
     fbe:	5a 01       	movw	r10, r20
     fc0:	79 01       	movw	r14, r18
     fc2:	01 15       	cp	r16, r1
     fc4:	11 05       	cpc	r17, r1
     fc6:	b1 f0       	breq	.+44     	; 0xff4 <prvReadMessageFromBuffer+0x5e>
     fc8:	fc 01       	movw	r30, r24
     fca:	60 80       	ld	r6, Z
     fcc:	71 80       	ldd	r7, Z+1	; 0x01
     fce:	a8 01       	movw	r20, r16
     fd0:	be 01       	movw	r22, r28
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	90 df       	rcall	.-224    	; 0xef8 <prvReadBytesFromBuffer>
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	e0 1a       	sub	r14, r16
     fde:	f1 0a       	sbc	r15, r17
     fe0:	a8 16       	cp	r10, r24
     fe2:	b9 06       	cpc	r11, r25
     fe4:	30 f4       	brcc	.+12     	; 0xff2 <prvReadMessageFromBuffer+0x5c>
     fe6:	f6 01       	movw	r30, r12
     fe8:	71 82       	std	Z+1, r7	; 0x01
     fea:	60 82       	st	Z, r6
     fec:	a1 2c       	mov	r10, r1
     fee:	b1 2c       	mov	r11, r1
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <prvReadMessageFromBuffer+0x5e>
     ff2:	5c 01       	movw	r10, r24
     ff4:	97 01       	movw	r18, r14
     ff6:	a5 01       	movw	r20, r10
     ff8:	b4 01       	movw	r22, r8
     ffa:	c6 01       	movw	r24, r12
     ffc:	7d df       	rcall	.-262    	; 0xef8 <prvReadBytesFromBuffer>
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	7f 90       	pop	r7
    101c:	6f 90       	pop	r6
    101e:	08 95       	ret

00001020 <xStreamBufferGenericCreate>:
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
    1030:	6b 01       	movw	r12, r22
    1032:	41 30       	cpi	r20, 0x01	; 1
    1034:	11 f4       	brne	.+4      	; 0x103a <xStreamBufferGenericCreate+0x1a>
    1036:	01 e0       	ldi	r16, 0x01	; 1
    1038:	01 c0       	rjmp	.+2      	; 0x103c <xStreamBufferGenericCreate+0x1c>
    103a:	00 e0       	ldi	r16, 0x00	; 0
    103c:	c1 14       	cp	r12, r1
    103e:	d1 04       	cpc	r13, r1
    1040:	19 f4       	brne	.+6      	; 0x1048 <xStreamBufferGenericCreate+0x28>
    1042:	cc 24       	eor	r12, r12
    1044:	c3 94       	inc	r12
    1046:	d1 2c       	mov	r13, r1
    1048:	ce 01       	movw	r24, r28
    104a:	40 96       	adiw	r24, 0x10	; 16
    104c:	c8 17       	cp	r28, r24
    104e:	d9 07       	cpc	r29, r25
    1050:	20 f4       	brcc	.+8      	; 0x105a <xStreamBufferGenericCreate+0x3a>
    1052:	21 96       	adiw	r28, 0x01	; 1
    1054:	50 d9       	rcall	.-3424   	; 0x2f6 <pvPortMalloc>
    1056:	7c 01       	movw	r14, r24
    1058:	02 c0       	rjmp	.+4      	; 0x105e <xStreamBufferGenericCreate+0x3e>
    105a:	e1 2c       	mov	r14, r1
    105c:	f1 2c       	mov	r15, r1
    105e:	e1 14       	cp	r14, r1
    1060:	f1 04       	cpc	r15, r1
    1062:	39 f0       	breq	.+14     	; 0x1072 <xStreamBufferGenericCreate+0x52>
    1064:	96 01       	movw	r18, r12
    1066:	ae 01       	movw	r20, r28
    1068:	b7 01       	movw	r22, r14
    106a:	61 5f       	subi	r22, 0xF1	; 241
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	c7 01       	movw	r24, r14
    1070:	a7 de       	rcall	.-690    	; 0xdc0 <prvInitialiseNewStreamBuffer>
    1072:	c7 01       	movw	r24, r14
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	08 95       	ret

00001084 <xStreamBufferReset>:
    1084:	0f 93       	push	r16
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	0f 92       	push	r0
    108c:	fc 01       	movw	r30, r24
    108e:	20 85       	ldd	r18, Z+8	; 0x08
    1090:	31 85       	ldd	r19, Z+9	; 0x09
    1092:	23 2b       	or	r18, r19
    1094:	71 f4       	brne	.+28     	; 0x10b2 <xStreamBufferReset+0x2e>
    1096:	22 85       	ldd	r18, Z+10	; 0x0a
    1098:	33 85       	ldd	r19, Z+11	; 0x0b
    109a:	23 2b       	or	r18, r19
    109c:	61 f4       	brne	.+24     	; 0x10b6 <xStreamBufferReset+0x32>
    109e:	26 81       	ldd	r18, Z+6	; 0x06
    10a0:	37 81       	ldd	r19, Z+7	; 0x07
    10a2:	44 81       	ldd	r20, Z+4	; 0x04
    10a4:	55 81       	ldd	r21, Z+5	; 0x05
    10a6:	64 85       	ldd	r22, Z+12	; 0x0c
    10a8:	75 85       	ldd	r23, Z+13	; 0x0d
    10aa:	06 85       	ldd	r16, Z+14	; 0x0e
    10ac:	89 de       	rcall	.-750    	; 0xdc0 <prvInitialiseNewStreamBuffer>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <xStreamBufferReset+0x34>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <xStreamBufferReset+0x34>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <xStreamBufferSpacesAvailable>:
    10c0:	fc 01       	movw	r30, r24
    10c2:	24 81       	ldd	r18, Z+4	; 0x04
    10c4:	35 81       	ldd	r19, Z+5	; 0x05
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	42 81       	ldd	r20, Z+2	; 0x02
    10d0:	53 81       	ldd	r21, Z+3	; 0x03
    10d2:	84 1b       	sub	r24, r20
    10d4:	95 0b       	sbc	r25, r21
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	82 17       	cp	r24, r18
    10da:	93 07       	cpc	r25, r19
    10dc:	10 f0       	brcs	.+4      	; 0x10e2 <xStreamBufferSpacesAvailable+0x22>
    10de:	82 1b       	sub	r24, r18
    10e0:	93 0b       	sbc	r25, r19
    10e2:	08 95       	ret

000010e4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    10e4:	2f 92       	push	r2
    10e6:	3f 92       	push	r3
    10e8:	4f 92       	push	r4
    10ea:	5f 92       	push	r5
    10ec:	6f 92       	push	r6
    10ee:	7f 92       	push	r7
    10f0:	8f 92       	push	r8
    10f2:	9f 92       	push	r9
    10f4:	af 92       	push	r10
    10f6:	bf 92       	push	r11
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	2b 97       	sbiw	r28, 0x0b	; 11
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	4c 01       	movw	r8, r24
    111a:	7b 87       	std	Y+11, r23	; 0x0b
    111c:	6a 87       	std	Y+10, r22	; 0x0a
    111e:	1a 01       	movw	r2, r20
    1120:	0e 83       	std	Y+6, r16	; 0x06
    1122:	1f 83       	std	Y+7, r17	; 0x07
    1124:	28 87       	std	Y+8, r18	; 0x08
    1126:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1128:	fc 01       	movw	r30, r24
    112a:	84 81       	ldd	r24, Z+4	; 0x04
    112c:	95 81       	ldd	r25, Z+5	; 0x05
    112e:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1130:	26 85       	ldd	r18, Z+14	; 0x0e
    1132:	20 ff       	sbrs	r18, 0
    1134:	0c c0       	rjmp	.+24     	; 0x114e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1136:	2a 01       	movw	r4, r20
    1138:	f2 e0       	ldi	r31, 0x02	; 2
    113a:	4f 0e       	add	r4, r31
    113c:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    113e:	84 15       	cp	r24, r4
    1140:	95 05       	cpc	r25, r5
    1142:	58 f4       	brcc	.+22     	; 0x115a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1144:	1e 82       	std	Y+6, r1	; 0x06
    1146:	1f 82       	std	Y+7, r1	; 0x07
    1148:	18 86       	std	Y+8, r1	; 0x08
    114a:	19 86       	std	Y+9, r1	; 0x09
    114c:	06 c0       	rjmp	.+12     	; 0x115a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    114e:	84 17       	cp	r24, r20
    1150:	95 07       	cpc	r25, r21
    1152:	10 f0       	brcs	.+4      	; 0x1158 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1154:	2a 01       	movw	r4, r20
    1156:	01 c0       	rjmp	.+2      	; 0x115a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1158:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    115a:	8e 81       	ldd	r24, Y+6	; 0x06
    115c:	9f 81       	ldd	r25, Y+7	; 0x07
    115e:	a8 85       	ldd	r26, Y+8	; 0x08
    1160:	b9 85       	ldd	r27, Y+9	; 0x09
    1162:	89 2b       	or	r24, r25
    1164:	8a 2b       	or	r24, r26
    1166:	8b 2b       	or	r24, r27
    1168:	09 f4       	brne	.+2      	; 0x116c <xStreamBufferSend+0x88>
    116a:	36 c0       	rjmp	.+108    	; 0x11d8 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    116c:	ce 01       	movw	r24, r28
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	e4 d7       	rcall	.+4040   	; 0x213a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1178:	c4 01       	movw	r24, r8
    117a:	a2 df       	rcall	.-188    	; 0x10c0 <xStreamBufferSpacesAvailable>
    117c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    117e:	84 15       	cp	r24, r4
    1180:	95 05       	cpc	r25, r5
    1182:	38 f5       	brcc	.+78     	; 0x11d2 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    118e:	0e 94 2e 11 	call	0x225c	; 0x225c <xTaskGetCurrentTaskHandle>
    1192:	f4 01       	movw	r30, r8
    1194:	93 87       	std	Z+11, r25	; 0x0b
    1196:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    119c:	ae 80       	ldd	r10, Y+6	; 0x06
    119e:	bf 80       	ldd	r11, Y+7	; 0x07
    11a0:	c8 84       	ldd	r12, Y+8	; 0x08
    11a2:	d9 84       	ldd	r13, Y+9	; 0x09
    11a4:	e1 2c       	mov	r14, r1
    11a6:	f1 2c       	mov	r15, r1
    11a8:	00 e0       	ldi	r16, 0x00	; 0
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	98 01       	movw	r18, r16
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	ba 01       	movw	r22, r20
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    11ba:	f4 01       	movw	r30, r8
    11bc:	13 86       	std	Z+11, r1	; 0x0b
    11be:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    11c0:	be 01       	movw	r22, r28
    11c2:	6a 5f       	subi	r22, 0xFA	; 250
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	ce 01       	movw	r24, r28
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	de d7       	rcall	.+4028   	; 0x2188 <xTaskCheckForTimeOut>
    11cc:	88 23       	and	r24, r24
    11ce:	89 f2       	breq	.-94     	; 0x1172 <xStreamBufferSend+0x8e>
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
                    break;
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    11d8:	61 2c       	mov	r6, r1
    11da:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    11dc:	61 14       	cp	r6, r1
    11de:	71 04       	cpc	r7, r1
    11e0:	19 f4       	brne	.+6      	; 0x11e8 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11e2:	c4 01       	movw	r24, r8
    11e4:	6d df       	rcall	.-294    	; 0x10c0 <xStreamBufferSpacesAvailable>
    11e6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    11e8:	82 01       	movw	r16, r4
    11ea:	93 01       	movw	r18, r6
    11ec:	a1 01       	movw	r20, r2
    11ee:	6a 85       	ldd	r22, Y+10	; 0x0a
    11f0:	7b 85       	ldd	r23, Y+11	; 0x0b
    11f2:	c4 01       	movw	r24, r8
    11f4:	3e de       	rcall	.-900    	; 0xe72 <prvWriteMessageToBuffer>
    11f6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    11f8:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    11fa:	e9 f0       	breq	.+58     	; 0x1236 <xStreamBufferSend+0x152>
    11fc:	c4 01       	movw	r24, r8
    11fe:	cd dd       	rcall	.-1126   	; 0xd9a <prvBytesInBuffer>
    1200:	f4 01       	movw	r30, r8
    1202:	26 81       	ldd	r18, Z+6	; 0x06
    1204:	37 81       	ldd	r19, Z+7	; 0x07
    1206:	82 17       	cp	r24, r18
    1208:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    120a:	a8 f0       	brcs	.+42     	; 0x1236 <xStreamBufferSend+0x152>
    120c:	8d d3       	rcall	.+1818   	; 0x1928 <vTaskSuspendAll>
    120e:	f4 01       	movw	r30, r8
    1210:	80 85       	ldd	r24, Z+8	; 0x08
    1212:	91 85       	ldd	r25, Z+9	; 0x09
    1214:	89 2b       	or	r24, r25
    1216:	71 f0       	breq	.+28     	; 0x1234 <xStreamBufferSend+0x150>
    1218:	80 85       	ldd	r24, Z+8	; 0x08
    121a:	91 85       	ldd	r25, Z+9	; 0x09
    121c:	e1 2c       	mov	r14, r1
    121e:	f1 2c       	mov	r15, r1
    1220:	00 e0       	ldi	r16, 0x00	; 0
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	a9 01       	movw	r20, r18
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskGenericNotify>
    122e:	f4 01       	movw	r30, r8
    1230:	11 86       	std	Z+9, r1	; 0x09
    1232:	10 86       	std	Z+8, r1	; 0x08
    1234:	b9 d4       	rcall	.+2418   	; 0x1ba8 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1236:	c6 01       	movw	r24, r12
    1238:	2b 96       	adiw	r28, 0x0b	; 11
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	9f 90       	pop	r9
    125a:	8f 90       	pop	r8
    125c:	7f 90       	pop	r7
    125e:	6f 90       	pop	r6
    1260:	5f 90       	pop	r5
    1262:	4f 90       	pop	r4
    1264:	3f 90       	pop	r3
    1266:	2f 90       	pop	r2
    1268:	08 95       	ret

0000126a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ec 01       	movw	r28, r24
    1280:	7b 01       	movw	r14, r22
    1282:	5a 01       	movw	r10, r20
    1284:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1286:	8e 85       	ldd	r24, Y+14	; 0x0e
    1288:	80 ff       	sbrs	r24, 0
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    128c:	8a 01       	movw	r16, r20
    128e:	0e 5f       	subi	r16, 0xFE	; 254
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1294:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1296:	ce 01       	movw	r24, r28
    1298:	13 df       	rcall	.-474    	; 0x10c0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    129a:	9c 01       	movw	r18, r24
    129c:	a5 01       	movw	r20, r10
    129e:	b7 01       	movw	r22, r14
    12a0:	ce 01       	movw	r24, r28
    12a2:	e7 dd       	rcall	.-1074   	; 0xe72 <prvWriteMessageToBuffer>
    12a4:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    12a6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12a8:	c1 f0       	breq	.+48     	; 0x12da <xStreamBufferSendFromISR+0x70>
    12aa:	ce 01       	movw	r24, r28
    12ac:	76 dd       	rcall	.-1300   	; 0xd9a <prvBytesInBuffer>
    12ae:	2e 81       	ldd	r18, Y+6	; 0x06
    12b0:	3f 81       	ldd	r19, Y+7	; 0x07
    12b2:	82 17       	cp	r24, r18
    12b4:	93 07       	cpc	r25, r19
    12b6:	88 f0       	brcs	.+34     	; 0x12da <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    12b8:	88 85       	ldd	r24, Y+8	; 0x08
    12ba:	99 85       	ldd	r25, Y+9	; 0x09
    12bc:	89 2b       	or	r24, r25
    12be:	69 f0       	breq	.+26     	; 0x12da <xStreamBufferSendFromISR+0x70>
    12c0:	88 85       	ldd	r24, Y+8	; 0x08
    12c2:	99 85       	ldd	r25, Y+9	; 0x09
    12c4:	e1 2c       	mov	r14, r1
    12c6:	f1 2c       	mov	r15, r1
    12c8:	00 e0       	ldi	r16, 0x00	; 0
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	a9 01       	movw	r20, r18
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	0e 94 3a 13 	call	0x2674	; 0x2674 <xTaskGenericNotifyFromISR>
    12d6:	19 86       	std	Y+9, r1	; 0x09
    12d8:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    12da:	c5 01       	movw	r24, r10
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	df 90       	pop	r13
    12ea:	cf 90       	pop	r12
    12ec:	bf 90       	pop	r11
    12ee:	af 90       	pop	r10
    12f0:	08 95       	ret

000012f2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    12f2:	4f 92       	push	r4
    12f4:	5f 92       	push	r5
    12f6:	6f 92       	push	r6
    12f8:	7f 92       	push	r7
    12fa:	8f 92       	push	r8
    12fc:	9f 92       	push	r9
    12fe:	af 92       	push	r10
    1300:	bf 92       	push	r11
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	ec 01       	movw	r28, r24
    1314:	2b 01       	movw	r4, r22
    1316:	3a 01       	movw	r6, r20
    1318:	58 01       	movw	r10, r16
    131a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    131c:	8e 85       	ldd	r24, Y+14	; 0x0e
    131e:	80 ff       	sbrs	r24, 0
    1320:	05 c0       	rjmp	.+10     	; 0x132c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1322:	68 94       	set
    1324:	88 24       	eor	r8, r8
    1326:	81 f8       	bld	r8, 1
    1328:	91 2c       	mov	r9, r1
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    132c:	81 2c       	mov	r8, r1
    132e:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1330:	a1 14       	cp	r10, r1
    1332:	b1 04       	cpc	r11, r1
    1334:	c1 04       	cpc	r12, r1
    1336:	d1 04       	cpc	r13, r1
    1338:	31 f1       	breq	.+76     	; 0x1386 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1340:	ce 01       	movw	r24, r28
    1342:	2b dd       	rcall	.-1450   	; 0xd9a <prvBytesInBuffer>
    1344:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1346:	88 16       	cp	r8, r24
    1348:	99 06       	cpc	r9, r25
    134a:	40 f0       	brcs	.+16     	; 0x135c <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1356:	82 d7       	rcall	.+3844   	; 0x225c <xTaskGetCurrentTaskHandle>
    1358:	99 87       	std	Y+9, r25	; 0x09
    135a:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1360:	8e 14       	cp	r8, r14
    1362:	9f 04       	cpc	r9, r15
    1364:	98 f0       	brcs	.+38     	; 0x138c <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1366:	e1 2c       	mov	r14, r1
    1368:	f1 2c       	mov	r15, r1
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	98 01       	movw	r18, r16
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	ba 01       	movw	r22, r20
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	df d7       	rcall	.+4030   	; 0x2338 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    137a:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    137c:	18 86       	std	Y+8, r1	; 0x08
    137e:	ce 01       	movw	r24, r28
    1380:	0c dd       	rcall	.-1512   	; 0xd9a <prvBytesInBuffer>
    1382:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1384:	03 c0       	rjmp	.+6      	; 0x138c <xStreamBufferReceive+0x9a>
    1386:	ce 01       	movw	r24, r28
    1388:	08 dd       	rcall	.-1520   	; 0xd9a <prvBytesInBuffer>
    138a:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    138c:	8e 14       	cp	r8, r14
    138e:	9f 04       	cpc	r9, r15
    1390:	e8 f4       	brcc	.+58     	; 0x13cc <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1392:	84 01       	movw	r16, r8
    1394:	97 01       	movw	r18, r14
    1396:	a3 01       	movw	r20, r6
    1398:	b2 01       	movw	r22, r4
    139a:	ce 01       	movw	r24, r28
    139c:	fc dd       	rcall	.-1032   	; 0xf96 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    139e:	6c 01       	movw	r12, r24
    13a0:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    13a2:	b1 f0       	breq	.+44     	; 0x13d0 <xStreamBufferReceive+0xde>
    13a4:	c1 d2       	rcall	.+1410   	; 0x1928 <vTaskSuspendAll>
    13a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    13aa:	89 2b       	or	r24, r25
    13ac:	69 f0       	breq	.+26     	; 0x13c8 <xStreamBufferReceive+0xd6>
    13ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b2:	e1 2c       	mov	r14, r1
    13b4:	f1 2c       	mov	r15, r1
    13b6:	00 e0       	ldi	r16, 0x00	; 0
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	0e 94 43 12 	call	0x2486	; 0x2486 <xTaskGenericNotify>
    13c4:	1b 86       	std	Y+11, r1	; 0x0b
    13c6:	1a 86       	std	Y+10, r1	; 0x0a
    13c8:	ef d3       	rcall	.+2014   	; 0x1ba8 <xTaskResumeAll>
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    13cc:	c1 2c       	mov	r12, r1
    13ce:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    13d0:	c6 01       	movw	r24, r12
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	9f 90       	pop	r9
    13e8:	8f 90       	pop	r8
    13ea:	7f 90       	pop	r7
    13ec:	6f 90       	pop	r6
    13ee:	5f 90       	pop	r5
    13f0:	4f 90       	pop	r4
    13f2:	08 95       	ret

000013f4 <prvResetNextTaskUnblockTime>:
    13f4:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    13f8:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    13fc:	80 81       	ld	r24, Z
    13fe:	81 11       	cpse	r24, r1
    1400:	0c c0       	rjmp	.+24     	; 0x141a <prvResetNextTaskUnblockTime+0x26>
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	dc 01       	movw	r26, r24
    1408:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    140c:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    1410:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    1414:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    1418:	08 95       	ret
    141a:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    141e:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1422:	07 80       	ldd	r0, Z+7	; 0x07
    1424:	f0 85       	ldd	r31, Z+8	; 0x08
    1426:	e0 2d       	mov	r30, r0
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	a2 81       	ldd	r26, Z+2	; 0x02
    142e:	b3 81       	ldd	r27, Z+3	; 0x03
    1430:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    1434:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    1438:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    143c:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    1440:	08 95       	ret

00001442 <prvDeleteTCB>:
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ec 01       	movw	r28, r24
    1448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144c:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <prvInitialiseNewTask>:
    145c:	4f 92       	push	r4
    145e:	5f 92       	push	r5
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	2c 01       	movw	r4, r24
    147c:	5b 01       	movw	r10, r22
    147e:	4a 01       	movw	r8, r20
    1480:	39 01       	movw	r6, r18
    1482:	e6 01       	movw	r28, r12
    1484:	65 ea       	ldi	r22, 0xA5	; 165
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148c:	0e 94 41 27 	call	0x4e82	; 0x4e82 <memset>
    1490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1494:	21 e0       	ldi	r18, 0x01	; 1
    1496:	82 1a       	sub	r8, r18
    1498:	91 08       	sbc	r9, r1
    149a:	88 0e       	add	r8, r24
    149c:	99 1e       	adc	r9, r25
    149e:	a1 14       	cp	r10, r1
    14a0:	b1 04       	cpc	r11, r1
    14a2:	89 f4       	brne	.+34     	; 0x14c6 <prvInitialiseNewTask+0x6a>
    14a4:	15 c0       	rjmp	.+42     	; 0x14d0 <prvInitialiseNewTask+0x74>
    14a6:	82 2f       	mov	r24, r18
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	f5 01       	movw	r30, r10
    14ac:	e8 0f       	add	r30, r24
    14ae:	f9 1f       	adc	r31, r25
    14b0:	30 81       	ld	r19, Z
    14b2:	de 01       	movw	r26, r28
    14b4:	a8 0f       	add	r26, r24
    14b6:	b9 1f       	adc	r27, r25
    14b8:	5d 96       	adiw	r26, 0x1d	; 29
    14ba:	3c 93       	st	X, r19
    14bc:	80 81       	ld	r24, Z
    14be:	88 23       	and	r24, r24
    14c0:	29 f0       	breq	.+10     	; 0x14cc <prvInitialiseNewTask+0x70>
    14c2:	2f 5f       	subi	r18, 0xFF	; 255
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <prvInitialiseNewTask+0x6c>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	20 31       	cpi	r18, 0x10	; 16
    14ca:	68 f3       	brcs	.-38     	; 0x14a6 <prvInitialiseNewTask+0x4a>
    14cc:	1c a6       	std	Y+44, r1	; 0x2c
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <prvInitialiseNewTask+0x76>
    14d0:	1d 8e       	std	Y+29, r1	; 0x1d
    14d2:	0a 30       	cpi	r16, 0x0A	; 10
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <prvInitialiseNewTask+0x7c>
    14d6:	09 e0       	ldi	r16, 0x09	; 9
    14d8:	0a 8f       	std	Y+26, r16	; 0x1a
    14da:	0d a7       	std	Y+45, r16	; 0x2d
    14dc:	1e a6       	std	Y+46, r1	; 0x2e
    14de:	ce 01       	movw	r24, r28
    14e0:	02 96       	adiw	r24, 0x02	; 2
    14e2:	00 d8       	rcall	.-4096   	; 0x4e4 <vListInitialiseItem>
    14e4:	ce 01       	movw	r24, r28
    14e6:	0e 96       	adiw	r24, 0x0e	; 14
    14e8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInitialiseItem>
    14ec:	db 87       	std	Y+11, r29	; 0x0b
    14ee:	ca 87       	std	Y+10, r28	; 0x0a
    14f0:	8a e0       	ldi	r24, 0x0A	; 10
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 e0       	ldi	r26, 0x00	; 0
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	80 1b       	sub	r24, r16
    14fa:	91 09       	sbc	r25, r1
    14fc:	a1 09       	sbc	r26, r1
    14fe:	b1 09       	sbc	r27, r1
    1500:	8e 87       	std	Y+14, r24	; 0x0e
    1502:	9f 87       	std	Y+15, r25	; 0x0f
    1504:	a8 8b       	std	Y+16, r26	; 0x10
    1506:	b9 8b       	std	Y+17, r27	; 0x11
    1508:	df 8b       	std	Y+23, r29	; 0x17
    150a:	ce 8b       	std	Y+22, r28	; 0x16
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	fe 01       	movw	r30, r28
    1510:	bf 96       	adiw	r30, 0x2f	; 47
    1512:	df 01       	movw	r26, r30
    1514:	1d 92       	st	X+, r1
    1516:	8a 95       	dec	r24
    1518:	e9 f7       	brne	.-6      	; 0x1514 <prvInitialiseNewTask+0xb8>
    151a:	1b aa       	std	Y+51, r1	; 0x33
    151c:	a3 01       	movw	r20, r6
    151e:	b2 01       	movw	r22, r4
    1520:	c4 01       	movw	r24, r8
    1522:	54 d8       	rcall	.-3928   	; 0x5cc <pxPortInitialiseStack>
    1524:	99 83       	std	Y+1, r25	; 0x01
    1526:	88 83       	st	Y, r24
    1528:	e1 14       	cp	r14, r1
    152a:	f1 04       	cpc	r15, r1
    152c:	19 f0       	breq	.+6      	; 0x1534 <prvInitialiseNewTask+0xd8>
    152e:	f7 01       	movw	r30, r14
    1530:	d1 83       	std	Z+1, r29	; 0x01
    1532:	c0 83       	st	Z, r28
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	bf 90       	pop	r11
    1544:	af 90       	pop	r10
    1546:	9f 90       	pop	r9
    1548:	8f 90       	pop	r8
    154a:	7f 90       	pop	r7
    154c:	6f 90       	pop	r6
    154e:	5f 90       	pop	r5
    1550:	4f 90       	pop	r4
    1552:	08 95       	ret

00001554 <prvInitialiseTaskLists>:
    1554:	cf 93       	push	r28
    1556:	c0 e0       	ldi	r28, 0x00	; 0
    1558:	09 c0       	rjmp	.+18     	; 0x156c <prvInitialiseTaskLists+0x18>
    155a:	2b e0       	ldi	r18, 0x0B	; 11
    155c:	c2 9f       	mul	r28, r18
    155e:	c0 01       	movw	r24, r0
    1560:	11 24       	eor	r1, r1
    1562:	85 55       	subi	r24, 0x55	; 85
    1564:	9f 4e       	sbci	r25, 0xEF	; 239
    1566:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    156a:	cf 5f       	subi	r28, 0xFF	; 255
    156c:	ca 30       	cpi	r28, 0x0A	; 10
    156e:	a8 f3       	brcs	.-22     	; 0x155a <prvInitialiseTaskLists+0x6>
    1570:	80 ea       	ldi	r24, 0xA0	; 160
    1572:	90 e1       	ldi	r25, 0x10	; 16
    1574:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1578:	85 e9       	ldi	r24, 0x95	; 149
    157a:	90 e1       	ldi	r25, 0x10	; 16
    157c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1580:	86 e8       	ldi	r24, 0x86	; 134
    1582:	90 e1       	ldi	r25, 0x10	; 16
    1584:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1588:	8b e7       	ldi	r24, 0x7B	; 123
    158a:	90 e1       	ldi	r25, 0x10	; 16
    158c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1590:	8f e6       	ldi	r24, 0x6F	; 111
    1592:	90 e1       	ldi	r25, 0x10	; 16
    1594:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1598:	80 ea       	ldi	r24, 0xA0	; 160
    159a:	90 e1       	ldi	r25, 0x10	; 16
    159c:	90 93 94 10 	sts	0x1094, r25	; 0x801094 <pxDelayedTaskList+0x1>
    15a0:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <pxDelayedTaskList>
    15a4:	85 e9       	ldi	r24, 0x95	; 149
    15a6:	90 e1       	ldi	r25, 0x10	; 16
    15a8:	90 93 92 10 	sts	0x1092, r25	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    15ac:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <pxOverflowDelayedTaskList>
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <prvAddNewTaskToReadyList>:
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	ec 01       	movw	r28, r24
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	0f 92       	push	r0
    15c0:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	80 93 6e 10 	sts	0x106E, r24	; 0x80106e <uxCurrentNumberOfTasks>
    15ca:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    15ce:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    15d2:	89 2b       	or	r24, r25
    15d4:	51 f4       	brne	.+20     	; 0x15ea <prvAddNewTaskToReadyList+0x36>
    15d6:	d0 93 1a 11 	sts	0x111A, r29	; 0x80111a <pxCurrentTCB+0x1>
    15da:	c0 93 19 11 	sts	0x1119, r28	; 0x801119 <pxCurrentTCB>
    15de:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 f4       	brne	.+36     	; 0x160a <prvAddNewTaskToReadyList+0x56>
    15e6:	b6 df       	rcall	.-148    	; 0x1554 <prvInitialiseTaskLists>
    15e8:	10 c0       	rjmp	.+32     	; 0x160a <prvAddNewTaskToReadyList+0x56>
    15ea:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    15ee:	81 11       	cpse	r24, r1
    15f0:	0c c0       	rjmp	.+24     	; 0x160a <prvAddNewTaskToReadyList+0x56>
    15f2:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    15f6:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    15fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    15fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15fe:	89 17       	cp	r24, r25
    1600:	20 f0       	brcs	.+8      	; 0x160a <prvAddNewTaskToReadyList+0x56>
    1602:	d0 93 1a 11 	sts	0x111A, r29	; 0x80111a <pxCurrentTCB+0x1>
    1606:	c0 93 19 11 	sts	0x1119, r28	; 0x801119 <pxCurrentTCB>
    160a:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <uxTaskNumber>
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <uxTaskNumber>
    1614:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1616:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    161a:	8e 17       	cp	r24, r30
    161c:	10 f4       	brcc	.+4      	; 0x1622 <prvAddNewTaskToReadyList+0x6e>
    161e:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    1622:	8b e0       	ldi	r24, 0x0B	; 11
    1624:	8e 9f       	mul	r24, r30
    1626:	f0 01       	movw	r30, r0
    1628:	11 24       	eor	r1, r1
    162a:	e5 55       	subi	r30, 0x55	; 85
    162c:	ff 4e       	sbci	r31, 0xEF	; 239
    162e:	01 80       	ldd	r0, Z+1	; 0x01
    1630:	f2 81       	ldd	r31, Z+2	; 0x02
    1632:	e0 2d       	mov	r30, r0
    1634:	ff 83       	std	Y+7, r31	; 0x07
    1636:	ee 83       	std	Y+6, r30	; 0x06
    1638:	26 81       	ldd	r18, Z+6	; 0x06
    163a:	37 81       	ldd	r19, Z+7	; 0x07
    163c:	39 87       	std	Y+9, r19	; 0x09
    163e:	28 87       	std	Y+8, r18	; 0x08
    1640:	a6 81       	ldd	r26, Z+6	; 0x06
    1642:	b7 81       	ldd	r27, Z+7	; 0x07
    1644:	9e 01       	movw	r18, r28
    1646:	2e 5f       	subi	r18, 0xFE	; 254
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	15 96       	adiw	r26, 0x05	; 5
    164c:	3c 93       	st	X, r19
    164e:	2e 93       	st	-X, r18
    1650:	14 97       	sbiw	r26, 0x04	; 4
    1652:	37 83       	std	Z+7, r19	; 0x07
    1654:	26 83       	std	Z+6, r18	; 0x06
    1656:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1658:	8e 9f       	mul	r24, r30
    165a:	f0 01       	movw	r30, r0
    165c:	11 24       	eor	r1, r1
    165e:	e5 55       	subi	r30, 0x55	; 85
    1660:	ff 4e       	sbci	r31, 0xEF	; 239
    1662:	fd 87       	std	Y+13, r31	; 0x0d
    1664:	ec 87       	std	Y+12, r30	; 0x0c
    1666:	80 81       	ld	r24, Z
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	80 83       	st	Z, r24
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    1674:	88 23       	and	r24, r24
    1676:	51 f0       	breq	.+20     	; 0x168c <prvAddNewTaskToReadyList+0xd8>
    1678:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    167c:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1680:	92 8d       	ldd	r25, Z+26	; 0x1a
    1682:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1684:	98 17       	cp	r25, r24
    1686:	10 f4       	brcc	.+4      	; 0x168c <prvAddNewTaskToReadyList+0xd8>
    1688:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <prvCheckTasksWaitingTermination>:
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	1b c0       	rjmp	.+54     	; 0x16ce <prvCheckTasksWaitingTermination+0x3c>
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	0f 92       	push	r0
    169e:	e0 91 82 10 	lds	r30, 0x1082	; 0x801082 <xTasksWaitingTermination+0x7>
    16a2:	f0 91 83 10 	lds	r31, 0x1083	; 0x801083 <xTasksWaitingTermination+0x8>
    16a6:	c0 85       	ldd	r28, Z+8	; 0x08
    16a8:	d1 85       	ldd	r29, Z+9	; 0x09
    16aa:	ce 01       	movw	r24, r28
    16ac:	02 96       	adiw	r24, 0x02	; 2
    16ae:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    16b2:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    16b6:	81 50       	subi	r24, 0x01	; 1
    16b8:	80 93 6e 10 	sts	0x106E, r24	; 0x80106e <uxCurrentNumberOfTasks>
    16bc:	80 91 7a 10 	lds	r24, 0x107A	; 0x80107a <uxDeletedTasksWaitingCleanUp>
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	80 93 7a 10 	sts	0x107A, r24	; 0x80107a <uxDeletedTasksWaitingCleanUp>
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	ce 01       	movw	r24, r28
    16cc:	ba de       	rcall	.-652    	; 0x1442 <prvDeleteTCB>
    16ce:	80 91 7a 10 	lds	r24, 0x107A	; 0x80107a <uxDeletedTasksWaitingCleanUp>
    16d2:	81 11       	cpse	r24, r1
    16d4:	e1 cf       	rjmp	.-62     	; 0x1698 <prvCheckTasksWaitingTermination+0x6>
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <prvAddCurrentTaskToDelayedList>:
    16dc:	8f 92       	push	r8
    16de:	9f 92       	push	r9
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	6b 01       	movw	r12, r22
    16f2:	7c 01       	movw	r14, r24
    16f4:	c4 2f       	mov	r28, r20
    16f6:	80 90 6a 10 	lds	r8, 0x106A	; 0x80106a <xTickCount>
    16fa:	90 90 6b 10 	lds	r9, 0x106B	; 0x80106b <xTickCount+0x1>
    16fe:	a0 90 6c 10 	lds	r10, 0x106C	; 0x80106c <xTickCount+0x2>
    1702:	b0 90 6d 10 	lds	r11, 0x106D	; 0x80106d <xTickCount+0x3>
    1706:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    170a:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    170e:	02 96       	adiw	r24, 0x02	; 2
    1710:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	c8 16       	cp	r12, r24
    1718:	d8 06       	cpc	r13, r24
    171a:	e8 06       	cpc	r14, r24
    171c:	f8 06       	cpc	r15, r24
    171e:	b1 f5       	brne	.+108    	; 0x178c <prvAddCurrentTaskToDelayedList+0xb0>
    1720:	cc 23       	and	r28, r28
    1722:	a1 f1       	breq	.+104    	; 0x178c <prvAddCurrentTaskToDelayedList+0xb0>
    1724:	ef e6       	ldi	r30, 0x6F	; 111
    1726:	f0 e1       	ldi	r31, 0x10	; 16
    1728:	a1 81       	ldd	r26, Z+1	; 0x01
    172a:	b2 81       	ldd	r27, Z+2	; 0x02
    172c:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    1730:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1734:	bf 83       	std	Y+7, r27	; 0x07
    1736:	ae 83       	std	Y+6, r26	; 0x06
    1738:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    173c:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1740:	16 96       	adiw	r26, 0x06	; 6
    1742:	8d 91       	ld	r24, X+
    1744:	9c 91       	ld	r25, X
    1746:	17 97       	sbiw	r26, 0x07	; 7
    1748:	99 87       	std	Y+9, r25	; 0x09
    174a:	88 87       	std	Y+8, r24	; 0x08
    174c:	16 96       	adiw	r26, 0x06	; 6
    174e:	cd 91       	ld	r28, X+
    1750:	dc 91       	ld	r29, X
    1752:	17 97       	sbiw	r26, 0x07	; 7
    1754:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    1758:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    175c:	02 96       	adiw	r24, 0x02	; 2
    175e:	9d 83       	std	Y+5, r25	; 0x05
    1760:	8c 83       	std	Y+4, r24	; 0x04
    1762:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    1766:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    176a:	02 96       	adiw	r24, 0x02	; 2
    176c:	17 96       	adiw	r26, 0x07	; 7
    176e:	9c 93       	st	X, r25
    1770:	8e 93       	st	-X, r24
    1772:	16 97       	sbiw	r26, 0x06	; 6
    1774:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1778:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    177c:	1d 96       	adiw	r26, 0x0d	; 13
    177e:	fc 93       	st	X, r31
    1780:	ee 93       	st	-X, r30
    1782:	1c 97       	sbiw	r26, 0x0c	; 12
    1784:	80 81       	ld	r24, Z
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	80 83       	st	Z, r24
    178a:	3f c0       	rjmp	.+126    	; 0x180a <prvAddCurrentTaskToDelayedList+0x12e>
    178c:	c8 0c       	add	r12, r8
    178e:	d9 1c       	adc	r13, r9
    1790:	ea 1c       	adc	r14, r10
    1792:	fb 1c       	adc	r15, r11
    1794:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1798:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    179c:	c2 82       	std	Z+2, r12	; 0x02
    179e:	d3 82       	std	Z+3, r13	; 0x03
    17a0:	e4 82       	std	Z+4, r14	; 0x04
    17a2:	f5 82       	std	Z+5, r15	; 0x05
    17a4:	c8 14       	cp	r12, r8
    17a6:	d9 04       	cpc	r13, r9
    17a8:	ea 04       	cpc	r14, r10
    17aa:	fb 04       	cpc	r15, r11
    17ac:	68 f4       	brcc	.+26     	; 0x17c8 <prvAddCurrentTaskToDelayedList+0xec>
    17ae:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    17b2:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    17b6:	80 91 91 10 	lds	r24, 0x1091	; 0x801091 <pxOverflowDelayedTaskList>
    17ba:	90 91 92 10 	lds	r25, 0x1092	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    17be:	6e 5f       	subi	r22, 0xFE	; 254
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    17c6:	21 c0       	rjmp	.+66     	; 0x180a <prvAddCurrentTaskToDelayedList+0x12e>
    17c8:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    17cc:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    17d0:	80 91 93 10 	lds	r24, 0x1093	; 0x801093 <pxDelayedTaskList>
    17d4:	90 91 94 10 	lds	r25, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    17d8:	6e 5f       	subi	r22, 0xFE	; 254
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    17e0:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <xNextTaskUnblockTime>
    17e4:	90 91 5e 10 	lds	r25, 0x105E	; 0x80105e <xNextTaskUnblockTime+0x1>
    17e8:	a0 91 5f 10 	lds	r26, 0x105F	; 0x80105f <xNextTaskUnblockTime+0x2>
    17ec:	b0 91 60 10 	lds	r27, 0x1060	; 0x801060 <xNextTaskUnblockTime+0x3>
    17f0:	c8 16       	cp	r12, r24
    17f2:	d9 06       	cpc	r13, r25
    17f4:	ea 06       	cpc	r14, r26
    17f6:	fb 06       	cpc	r15, r27
    17f8:	40 f4       	brcc	.+16     	; 0x180a <prvAddCurrentTaskToDelayedList+0x12e>
    17fa:	c0 92 5d 10 	sts	0x105D, r12	; 0x80105d <xNextTaskUnblockTime>
    17fe:	d0 92 5e 10 	sts	0x105E, r13	; 0x80105e <xNextTaskUnblockTime+0x1>
    1802:	e0 92 5f 10 	sts	0x105F, r14	; 0x80105f <xNextTaskUnblockTime+0x2>
    1806:	f0 92 60 10 	sts	0x1060, r15	; 0x801060 <xNextTaskUnblockTime+0x3>
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	9f 90       	pop	r9
    181c:	8f 90       	pop	r8
    181e:	08 95       	ret

00001820 <xTaskCreate>:
    1820:	2f 92       	push	r2
    1822:	3f 92       	push	r3
    1824:	4f 92       	push	r4
    1826:	5f 92       	push	r5
    1828:	6f 92       	push	r6
    182a:	7f 92       	push	r7
    182c:	8f 92       	push	r8
    182e:	9f 92       	push	r9
    1830:	af 92       	push	r10
    1832:	bf 92       	push	r11
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	3c 01       	movw	r6, r24
    1844:	1b 01       	movw	r2, r22
    1846:	4a 01       	movw	r8, r20
    1848:	29 01       	movw	r4, r18
    184a:	ca 01       	movw	r24, r20
    184c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    1850:	6c 01       	movw	r12, r24
    1852:	89 2b       	or	r24, r25
    1854:	71 f0       	breq	.+28     	; 0x1872 <xTaskCreate+0x52>
    1856:	84 e3       	ldi	r24, 0x34	; 52
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    185e:	ec 01       	movw	r28, r24
    1860:	89 2b       	or	r24, r25
    1862:	19 f0       	breq	.+6      	; 0x186a <xTaskCreate+0x4a>
    1864:	dc 8e       	std	Y+28, r13	; 0x1c
    1866:	cb 8e       	std	Y+27, r12	; 0x1b
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <xTaskCreate+0x56>
    186a:	c6 01       	movw	r24, r12
    186c:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <xTaskCreate+0x56>
    1872:	c0 e0       	ldi	r28, 0x00	; 0
    1874:	d0 e0       	ldi	r29, 0x00	; 0
    1876:	20 97       	sbiw	r28, 0x00	; 0
    1878:	61 f0       	breq	.+24     	; 0x1892 <xTaskCreate+0x72>
    187a:	a1 2c       	mov	r10, r1
    187c:	b1 2c       	mov	r11, r1
    187e:	6e 01       	movw	r12, r28
    1880:	92 01       	movw	r18, r4
    1882:	a4 01       	movw	r20, r8
    1884:	b1 01       	movw	r22, r2
    1886:	c3 01       	movw	r24, r6
    1888:	e9 dd       	rcall	.-1070   	; 0x145c <prvInitialiseNewTask>
    188a:	ce 01       	movw	r24, r28
    188c:	93 de       	rcall	.-730    	; 0x15b4 <prvAddNewTaskToReadyList>
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <xTaskCreate+0x74>
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	9f 90       	pop	r9
    18a8:	8f 90       	pop	r8
    18aa:	7f 90       	pop	r7
    18ac:	6f 90       	pop	r6
    18ae:	5f 90       	pop	r5
    18b0:	4f 90       	pop	r4
    18b2:	3f 90       	pop	r3
    18b4:	2f 90       	pop	r2
    18b6:	08 95       	ret

000018b8 <vTaskStartScheduler>:
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	0f 2e       	mov	r0, r31
    18c0:	fb e5       	ldi	r31, 0x5B	; 91
    18c2:	ef 2e       	mov	r14, r31
    18c4:	f0 e1       	ldi	r31, 0x10	; 16
    18c6:	ff 2e       	mov	r15, r31
    18c8:	f0 2d       	mov	r31, r0
    18ca:	00 e0       	ldi	r16, 0x00	; 0
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 ec       	ldi	r20, 0xC0	; 192
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	6e e3       	ldi	r22, 0x3E	; 62
    18d6:	72 e0       	ldi	r23, 0x02	; 2
    18d8:	8d ec       	ldi	r24, 0xCD	; 205
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a1 df       	rcall	.-190    	; 0x1820 <xTaskCreate>
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <vTaskStartScheduler+0x2e>
    18e2:	0e 94 00 15 	call	0x2a00	; 0x2a00 <xTimerCreateTimerTask>
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	c9 f4       	brne	.+50     	; 0x191c <vTaskStartScheduler+0x64>
    18ea:	f8 94       	cli
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	dc 01       	movw	r26, r24
    18f2:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <xNextTaskUnblockTime>
    18f6:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <xNextTaskUnblockTime+0x1>
    18fa:	a0 93 5f 10 	sts	0x105F, r26	; 0x80105f <xNextTaskUnblockTime+0x2>
    18fe:	b0 93 60 10 	sts	0x1060, r27	; 0x801060 <xNextTaskUnblockTime+0x3>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 68 10 	sts	0x1068, r24	; 0x801068 <xSchedulerRunning>
    1908:	10 92 6a 10 	sts	0x106A, r1	; 0x80106a <xTickCount>
    190c:	10 92 6b 10 	sts	0x106B, r1	; 0x80106b <xTickCount+0x1>
    1910:	10 92 6c 10 	sts	0x106C, r1	; 0x80106c <xTickCount+0x2>
    1914:	10 92 6d 10 	sts	0x106D, r1	; 0x80106d <xTickCount+0x3>
    1918:	0e 94 fd 02 	call	0x5fa	; 0x5fa <xPortStartScheduler>
    191c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	08 95       	ret

00001928 <vTaskSuspendAll>:
    1928:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <uxSchedulerSuspended>
    1932:	08 95       	ret

00001934 <xTaskGetTickCount>:
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	0f 92       	push	r0
    193a:	60 91 6a 10 	lds	r22, 0x106A	; 0x80106a <xTickCount>
    193e:	70 91 6b 10 	lds	r23, 0x106B	; 0x80106b <xTickCount+0x1>
    1942:	80 91 6c 10 	lds	r24, 0x106C	; 0x80106c <xTickCount+0x2>
    1946:	90 91 6d 10 	lds	r25, 0x106D	; 0x80106d <xTickCount+0x3>
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	08 95       	ret

00001950 <xTaskIncrementTick>:
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1960:	81 11       	cpse	r24, r1
    1962:	05 c1       	rjmp	.+522    	; 0x1b6e <xTaskIncrementTick+0x21e>
    1964:	c0 90 6a 10 	lds	r12, 0x106A	; 0x80106a <xTickCount>
    1968:	d0 90 6b 10 	lds	r13, 0x106B	; 0x80106b <xTickCount+0x1>
    196c:	e0 90 6c 10 	lds	r14, 0x106C	; 0x80106c <xTickCount+0x2>
    1970:	f0 90 6d 10 	lds	r15, 0x106D	; 0x80106d <xTickCount+0x3>
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	c8 1a       	sub	r12, r24
    1978:	d8 0a       	sbc	r13, r24
    197a:	e8 0a       	sbc	r14, r24
    197c:	f8 0a       	sbc	r15, r24
    197e:	c0 92 6a 10 	sts	0x106A, r12	; 0x80106a <xTickCount>
    1982:	d0 92 6b 10 	sts	0x106B, r13	; 0x80106b <xTickCount+0x1>
    1986:	e0 92 6c 10 	sts	0x106C, r14	; 0x80106c <xTickCount+0x2>
    198a:	f0 92 6d 10 	sts	0x106D, r15	; 0x80106d <xTickCount+0x3>
    198e:	c1 14       	cp	r12, r1
    1990:	d1 04       	cpc	r13, r1
    1992:	e1 04       	cpc	r14, r1
    1994:	f1 04       	cpc	r15, r1
    1996:	b1 f4       	brne	.+44     	; 0x19c4 <xTaskIncrementTick+0x74>
    1998:	80 91 93 10 	lds	r24, 0x1093	; 0x801093 <pxDelayedTaskList>
    199c:	90 91 94 10 	lds	r25, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    19a0:	20 91 91 10 	lds	r18, 0x1091	; 0x801091 <pxOverflowDelayedTaskList>
    19a4:	30 91 92 10 	lds	r19, 0x1092	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    19a8:	30 93 94 10 	sts	0x1094, r19	; 0x801094 <pxDelayedTaskList+0x1>
    19ac:	20 93 93 10 	sts	0x1093, r18	; 0x801093 <pxDelayedTaskList>
    19b0:	90 93 92 10 	sts	0x1092, r25	; 0x801092 <pxOverflowDelayedTaskList+0x1>
    19b4:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <pxOverflowDelayedTaskList>
    19b8:	80 91 62 10 	lds	r24, 0x1062	; 0x801062 <xNumOfOverflows>
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	80 93 62 10 	sts	0x1062, r24	; 0x801062 <xNumOfOverflows>
    19c2:	18 dd       	rcall	.-1488   	; 0x13f4 <prvResetNextTaskUnblockTime>
    19c4:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <xNextTaskUnblockTime>
    19c8:	90 91 5e 10 	lds	r25, 0x105E	; 0x80105e <xNextTaskUnblockTime+0x1>
    19cc:	a0 91 5f 10 	lds	r26, 0x105F	; 0x80105f <xNextTaskUnblockTime+0x2>
    19d0:	b0 91 60 10 	lds	r27, 0x1060	; 0x801060 <xNextTaskUnblockTime+0x3>
    19d4:	c8 16       	cp	r12, r24
    19d6:	d9 06       	cpc	r13, r25
    19d8:	ea 06       	cpc	r14, r26
    19da:	fb 06       	cpc	r15, r27
    19dc:	20 f4       	brcc	.+8      	; 0x19e6 <xTaskIncrementTick+0x96>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	b2 c0       	rjmp	.+356    	; 0x1b46 <xTaskIncrementTick+0x1f6>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <xTaskIncrementTick+0x98>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    19ec:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    19f0:	90 81       	ld	r25, Z
    19f2:	91 11       	cpse	r25, r1
    19f4:	0c c0       	rjmp	.+24     	; 0x1a0e <xTaskIncrementTick+0xbe>
    19f6:	4f ef       	ldi	r20, 0xFF	; 255
    19f8:	5f ef       	ldi	r21, 0xFF	; 255
    19fa:	ba 01       	movw	r22, r20
    19fc:	40 93 5d 10 	sts	0x105D, r20	; 0x80105d <xNextTaskUnblockTime>
    1a00:	50 93 5e 10 	sts	0x105E, r21	; 0x80105e <xNextTaskUnblockTime+0x1>
    1a04:	60 93 5f 10 	sts	0x105F, r22	; 0x80105f <xNextTaskUnblockTime+0x2>
    1a08:	70 93 60 10 	sts	0x1060, r23	; 0x801060 <xNextTaskUnblockTime+0x3>
    1a0c:	9c c0       	rjmp	.+312    	; 0x1b46 <xTaskIncrementTick+0x1f6>
    1a0e:	e0 91 93 10 	lds	r30, 0x1093	; 0x801093 <pxDelayedTaskList>
    1a12:	f0 91 94 10 	lds	r31, 0x1094	; 0x801094 <pxDelayedTaskList+0x1>
    1a16:	07 80       	ldd	r0, Z+7	; 0x07
    1a18:	f0 85       	ldd	r31, Z+8	; 0x08
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	00 84       	ldd	r0, Z+8	; 0x08
    1a1e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a20:	e0 2d       	mov	r30, r0
    1a22:	42 81       	ldd	r20, Z+2	; 0x02
    1a24:	53 81       	ldd	r21, Z+3	; 0x03
    1a26:	64 81       	ldd	r22, Z+4	; 0x04
    1a28:	75 81       	ldd	r23, Z+5	; 0x05
    1a2a:	c4 16       	cp	r12, r20
    1a2c:	d5 06       	cpc	r13, r21
    1a2e:	e6 06       	cpc	r14, r22
    1a30:	f7 06       	cpc	r15, r23
    1a32:	48 f4       	brcc	.+18     	; 0x1a46 <xTaskIncrementTick+0xf6>
    1a34:	40 93 5d 10 	sts	0x105D, r20	; 0x80105d <xNextTaskUnblockTime>
    1a38:	50 93 5e 10 	sts	0x105E, r21	; 0x80105e <xNextTaskUnblockTime+0x1>
    1a3c:	60 93 5f 10 	sts	0x105F, r22	; 0x80105f <xNextTaskUnblockTime+0x2>
    1a40:	70 93 60 10 	sts	0x1060, r23	; 0x801060 <xNextTaskUnblockTime+0x3>
    1a44:	80 c0       	rjmp	.+256    	; 0x1b46 <xTaskIncrementTick+0x1f6>
    1a46:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a48:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a4a:	c6 81       	ldd	r28, Z+6	; 0x06
    1a4c:	d7 81       	ldd	r29, Z+7	; 0x07
    1a4e:	20 85       	ldd	r18, Z+8	; 0x08
    1a50:	31 85       	ldd	r19, Z+9	; 0x09
    1a52:	3f 83       	std	Y+7, r19	; 0x07
    1a54:	2e 83       	std	Y+6, r18	; 0x06
    1a56:	c0 85       	ldd	r28, Z+8	; 0x08
    1a58:	d1 85       	ldd	r29, Z+9	; 0x09
    1a5a:	26 81       	ldd	r18, Z+6	; 0x06
    1a5c:	37 81       	ldd	r19, Z+7	; 0x07
    1a5e:	3d 83       	std	Y+5, r19	; 0x05
    1a60:	2c 83       	std	Y+4, r18	; 0x04
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	4d 91       	ld	r20, X+
    1a66:	5c 91       	ld	r21, X
    1a68:	12 97       	sbiw	r26, 0x02	; 2
    1a6a:	9f 01       	movw	r18, r30
    1a6c:	2e 5f       	subi	r18, 0xFE	; 254
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	42 17       	cp	r20, r18
    1a72:	53 07       	cpc	r21, r19
    1a74:	31 f4       	brne	.+12     	; 0x1a82 <xTaskIncrementTick+0x132>
    1a76:	40 85       	ldd	r20, Z+8	; 0x08
    1a78:	51 85       	ldd	r21, Z+9	; 0x09
    1a7a:	12 96       	adiw	r26, 0x02	; 2
    1a7c:	5c 93       	st	X, r21
    1a7e:	4e 93       	st	-X, r20
    1a80:	11 97       	sbiw	r26, 0x01	; 1
    1a82:	15 86       	std	Z+13, r1	; 0x0d
    1a84:	14 86       	std	Z+12, r1	; 0x0c
    1a86:	9c 91       	ld	r25, X
    1a88:	91 50       	subi	r25, 0x01	; 1
    1a8a:	9c 93       	st	X, r25
    1a8c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a8e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a90:	10 97       	sbiw	r26, 0x00	; 0
    1a92:	09 f1       	breq	.+66     	; 0x1ad6 <xTaskIncrementTick+0x186>
    1a94:	c2 89       	ldd	r28, Z+18	; 0x12
    1a96:	d3 89       	ldd	r29, Z+19	; 0x13
    1a98:	44 89       	ldd	r20, Z+20	; 0x14
    1a9a:	55 89       	ldd	r21, Z+21	; 0x15
    1a9c:	5f 83       	std	Y+7, r21	; 0x07
    1a9e:	4e 83       	std	Y+6, r20	; 0x06
    1aa0:	c4 89       	ldd	r28, Z+20	; 0x14
    1aa2:	d5 89       	ldd	r29, Z+21	; 0x15
    1aa4:	42 89       	ldd	r20, Z+18	; 0x12
    1aa6:	53 89       	ldd	r21, Z+19	; 0x13
    1aa8:	5d 83       	std	Y+5, r21	; 0x05
    1aaa:	4c 83       	std	Y+4, r20	; 0x04
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	6d 91       	ld	r22, X+
    1ab0:	7c 91       	ld	r23, X
    1ab2:	12 97       	sbiw	r26, 0x02	; 2
    1ab4:	af 01       	movw	r20, r30
    1ab6:	42 5f       	subi	r20, 0xF2	; 242
    1ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aba:	64 17       	cp	r22, r20
    1abc:	75 07       	cpc	r23, r21
    1abe:	31 f4       	brne	.+12     	; 0x1acc <xTaskIncrementTick+0x17c>
    1ac0:	44 89       	ldd	r20, Z+20	; 0x14
    1ac2:	55 89       	ldd	r21, Z+21	; 0x15
    1ac4:	12 96       	adiw	r26, 0x02	; 2
    1ac6:	5c 93       	st	X, r21
    1ac8:	4e 93       	st	-X, r20
    1aca:	11 97       	sbiw	r26, 0x01	; 1
    1acc:	11 8e       	std	Z+25, r1	; 0x19
    1ace:	10 8e       	std	Z+24, r1	; 0x18
    1ad0:	9c 91       	ld	r25, X
    1ad2:	91 50       	subi	r25, 0x01	; 1
    1ad4:	9c 93       	st	X, r25
    1ad6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ad8:	90 91 69 10 	lds	r25, 0x1069	; 0x801069 <uxTopReadyPriority>
    1adc:	9a 17       	cp	r25, r26
    1ade:	10 f4       	brcc	.+4      	; 0x1ae4 <xTaskIncrementTick+0x194>
    1ae0:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    1ae4:	9b e0       	ldi	r25, 0x0B	; 11
    1ae6:	9a 9f       	mul	r25, r26
    1ae8:	d0 01       	movw	r26, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	a5 55       	subi	r26, 0x55	; 85
    1aee:	bf 4e       	sbci	r27, 0xEF	; 239
    1af0:	11 96       	adiw	r26, 0x01	; 1
    1af2:	0d 90       	ld	r0, X+
    1af4:	bc 91       	ld	r27, X
    1af6:	a0 2d       	mov	r26, r0
    1af8:	b7 83       	std	Z+7, r27	; 0x07
    1afa:	a6 83       	std	Z+6, r26	; 0x06
    1afc:	16 96       	adiw	r26, 0x06	; 6
    1afe:	4d 91       	ld	r20, X+
    1b00:	5c 91       	ld	r21, X
    1b02:	17 97       	sbiw	r26, 0x07	; 7
    1b04:	51 87       	std	Z+9, r21	; 0x09
    1b06:	40 87       	std	Z+8, r20	; 0x08
    1b08:	16 96       	adiw	r26, 0x06	; 6
    1b0a:	cd 91       	ld	r28, X+
    1b0c:	dc 91       	ld	r29, X
    1b0e:	17 97       	sbiw	r26, 0x07	; 7
    1b10:	3d 83       	std	Y+5, r19	; 0x05
    1b12:	2c 83       	std	Y+4, r18	; 0x04
    1b14:	17 96       	adiw	r26, 0x07	; 7
    1b16:	3c 93       	st	X, r19
    1b18:	2e 93       	st	-X, r18
    1b1a:	16 97       	sbiw	r26, 0x06	; 6
    1b1c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b1e:	9a 9f       	mul	r25, r26
    1b20:	d0 01       	movw	r26, r0
    1b22:	11 24       	eor	r1, r1
    1b24:	a5 55       	subi	r26, 0x55	; 85
    1b26:	bf 4e       	sbci	r27, 0xEF	; 239
    1b28:	b5 87       	std	Z+13, r27	; 0x0d
    1b2a:	a4 87       	std	Z+12, r26	; 0x0c
    1b2c:	9c 91       	ld	r25, X
    1b2e:	9f 5f       	subi	r25, 0xFF	; 255
    1b30:	9c 93       	st	X, r25
    1b32:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b34:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1b38:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1b3c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b3e:	29 17       	cp	r18, r25
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <xTaskIncrementTick+0x1f4>
    1b42:	4f cf       	rjmp	.-354    	; 0x19e2 <xTaskIncrementTick+0x92>
    1b44:	51 cf       	rjmp	.-350    	; 0x19e8 <xTaskIncrementTick+0x98>
    1b46:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1b4a:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1b4e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b50:	9b e0       	ldi	r25, 0x0B	; 11
    1b52:	e9 9f       	mul	r30, r25
    1b54:	f0 01       	movw	r30, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	e5 55       	subi	r30, 0x55	; 85
    1b5a:	ff 4e       	sbci	r31, 0xEF	; 239
    1b5c:	90 81       	ld	r25, Z
    1b5e:	92 30       	cpi	r25, 0x02	; 2
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <xTaskIncrementTick+0x214>
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 91 63 10 	lds	r25, 0x1063	; 0x801063 <xYieldPending>
    1b68:	91 11       	cpse	r25, r1
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <xTaskIncrementTick+0x248>
    1b6c:	16 c0       	rjmp	.+44     	; 0x1b9a <xTaskIncrementTick+0x24a>
    1b6e:	80 91 64 10 	lds	r24, 0x1064	; 0x801064 <xPendedTicks>
    1b72:	90 91 65 10 	lds	r25, 0x1065	; 0x801065 <xPendedTicks+0x1>
    1b76:	a0 91 66 10 	lds	r26, 0x1066	; 0x801066 <xPendedTicks+0x2>
    1b7a:	b0 91 67 10 	lds	r27, 0x1067	; 0x801067 <xPendedTicks+0x3>
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	a1 1d       	adc	r26, r1
    1b82:	b1 1d       	adc	r27, r1
    1b84:	80 93 64 10 	sts	0x1064, r24	; 0x801064 <xPendedTicks>
    1b88:	90 93 65 10 	sts	0x1065, r25	; 0x801065 <xPendedTicks+0x1>
    1b8c:	a0 93 66 10 	sts	0x1066, r26	; 0x801066 <xPendedTicks+0x2>
    1b90:	b0 93 67 10 	sts	0x1067, r27	; 0x801067 <xPendedTicks+0x3>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <xTaskIncrementTick+0x24a>
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	08 95       	ret

00001ba8 <xTaskResumeAll>:
    1ba8:	cf 92       	push	r12
    1baa:	df 92       	push	r13
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	0f 92       	push	r0
    1bba:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1bbe:	81 50       	subi	r24, 0x01	; 1
    1bc0:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <uxSchedulerSuspended>
    1bc4:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1bc8:	81 11       	cpse	r24, r1
    1bca:	be c0       	rjmp	.+380    	; 0x1d48 <xTaskResumeAll+0x1a0>
    1bcc:	80 91 6e 10 	lds	r24, 0x106E	; 0x80106e <uxCurrentNumberOfTasks>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	88 c0       	rjmp	.+272    	; 0x1ce4 <xTaskResumeAll+0x13c>
    1bd4:	bc c0       	rjmp	.+376    	; 0x1d4e <xTaskResumeAll+0x1a6>
    1bd6:	e0 91 8d 10 	lds	r30, 0x108D	; 0x80108d <xPendingReadyList+0x7>
    1bda:	f0 91 8e 10 	lds	r31, 0x108E	; 0x80108e <xPendingReadyList+0x8>
    1bde:	00 84       	ldd	r0, Z+8	; 0x08
    1be0:	f1 85       	ldd	r31, Z+9	; 0x09
    1be2:	e0 2d       	mov	r30, r0
    1be4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1be6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1be8:	c2 89       	ldd	r28, Z+18	; 0x12
    1bea:	d3 89       	ldd	r29, Z+19	; 0x13
    1bec:	84 89       	ldd	r24, Z+20	; 0x14
    1bee:	95 89       	ldd	r25, Z+21	; 0x15
    1bf0:	9f 83       	std	Y+7, r25	; 0x07
    1bf2:	8e 83       	std	Y+6, r24	; 0x06
    1bf4:	c4 89       	ldd	r28, Z+20	; 0x14
    1bf6:	d5 89       	ldd	r29, Z+21	; 0x15
    1bf8:	82 89       	ldd	r24, Z+18	; 0x12
    1bfa:	93 89       	ldd	r25, Z+19	; 0x13
    1bfc:	9d 83       	std	Y+5, r25	; 0x05
    1bfe:	8c 83       	std	Y+4, r24	; 0x04
    1c00:	11 96       	adiw	r26, 0x01	; 1
    1c02:	2d 91       	ld	r18, X+
    1c04:	3c 91       	ld	r19, X
    1c06:	12 97       	sbiw	r26, 0x02	; 2
    1c08:	cf 01       	movw	r24, r30
    1c0a:	0e 96       	adiw	r24, 0x0e	; 14
    1c0c:	28 17       	cp	r18, r24
    1c0e:	39 07       	cpc	r19, r25
    1c10:	31 f4       	brne	.+12     	; 0x1c1e <xTaskResumeAll+0x76>
    1c12:	84 89       	ldd	r24, Z+20	; 0x14
    1c14:	95 89       	ldd	r25, Z+21	; 0x15
    1c16:	12 96       	adiw	r26, 0x02	; 2
    1c18:	9c 93       	st	X, r25
    1c1a:	8e 93       	st	-X, r24
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	11 8e       	std	Z+25, r1	; 0x19
    1c20:	10 8e       	std	Z+24, r1	; 0x18
    1c22:	8c 91       	ld	r24, X
    1c24:	81 50       	subi	r24, 0x01	; 1
    1c26:	8c 93       	st	X, r24
    1c28:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c2a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c2c:	c6 81       	ldd	r28, Z+6	; 0x06
    1c2e:	d7 81       	ldd	r29, Z+7	; 0x07
    1c30:	80 85       	ldd	r24, Z+8	; 0x08
    1c32:	91 85       	ldd	r25, Z+9	; 0x09
    1c34:	9f 83       	std	Y+7, r25	; 0x07
    1c36:	8e 83       	std	Y+6, r24	; 0x06
    1c38:	c0 85       	ldd	r28, Z+8	; 0x08
    1c3a:	d1 85       	ldd	r29, Z+9	; 0x09
    1c3c:	86 81       	ldd	r24, Z+6	; 0x06
    1c3e:	97 81       	ldd	r25, Z+7	; 0x07
    1c40:	9d 83       	std	Y+5, r25	; 0x05
    1c42:	8c 83       	std	Y+4, r24	; 0x04
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	8d 91       	ld	r24, X+
    1c48:	9c 91       	ld	r25, X
    1c4a:	12 97       	sbiw	r26, 0x02	; 2
    1c4c:	9f 01       	movw	r18, r30
    1c4e:	2e 5f       	subi	r18, 0xFE	; 254
    1c50:	3f 4f       	sbci	r19, 0xFF	; 255
    1c52:	82 17       	cp	r24, r18
    1c54:	93 07       	cpc	r25, r19
    1c56:	31 f4       	brne	.+12     	; 0x1c64 <xTaskResumeAll+0xbc>
    1c58:	80 85       	ldd	r24, Z+8	; 0x08
    1c5a:	91 85       	ldd	r25, Z+9	; 0x09
    1c5c:	12 96       	adiw	r26, 0x02	; 2
    1c5e:	9c 93       	st	X, r25
    1c60:	8e 93       	st	-X, r24
    1c62:	11 97       	sbiw	r26, 0x01	; 1
    1c64:	15 86       	std	Z+13, r1	; 0x0d
    1c66:	14 86       	std	Z+12, r1	; 0x0c
    1c68:	8c 91       	ld	r24, X
    1c6a:	81 50       	subi	r24, 0x01	; 1
    1c6c:	8c 93       	st	X, r24
    1c6e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c70:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    1c74:	8a 17       	cp	r24, r26
    1c76:	10 f4       	brcc	.+4      	; 0x1c7c <xTaskResumeAll+0xd4>
    1c78:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    1c7c:	8b e0       	ldi	r24, 0x0B	; 11
    1c7e:	8a 9f       	mul	r24, r26
    1c80:	d0 01       	movw	r26, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	a5 55       	subi	r26, 0x55	; 85
    1c86:	bf 4e       	sbci	r27, 0xEF	; 239
    1c88:	11 96       	adiw	r26, 0x01	; 1
    1c8a:	0d 90       	ld	r0, X+
    1c8c:	bc 91       	ld	r27, X
    1c8e:	a0 2d       	mov	r26, r0
    1c90:	b7 83       	std	Z+7, r27	; 0x07
    1c92:	a6 83       	std	Z+6, r26	; 0x06
    1c94:	16 96       	adiw	r26, 0x06	; 6
    1c96:	4d 91       	ld	r20, X+
    1c98:	5c 91       	ld	r21, X
    1c9a:	17 97       	sbiw	r26, 0x07	; 7
    1c9c:	51 87       	std	Z+9, r21	; 0x09
    1c9e:	40 87       	std	Z+8, r20	; 0x08
    1ca0:	16 96       	adiw	r26, 0x06	; 6
    1ca2:	cd 91       	ld	r28, X+
    1ca4:	dc 91       	ld	r29, X
    1ca6:	17 97       	sbiw	r26, 0x07	; 7
    1ca8:	3d 83       	std	Y+5, r19	; 0x05
    1caa:	2c 83       	std	Y+4, r18	; 0x04
    1cac:	17 96       	adiw	r26, 0x07	; 7
    1cae:	3c 93       	st	X, r19
    1cb0:	2e 93       	st	-X, r18
    1cb2:	16 97       	sbiw	r26, 0x06	; 6
    1cb4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cb6:	8a 9f       	mul	r24, r26
    1cb8:	d0 01       	movw	r26, r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	a5 55       	subi	r26, 0x55	; 85
    1cbe:	bf 4e       	sbci	r27, 0xEF	; 239
    1cc0:	b5 87       	std	Z+13, r27	; 0x0d
    1cc2:	a4 87       	std	Z+12, r26	; 0x0c
    1cc4:	8c 91       	ld	r24, X
    1cc6:	8f 5f       	subi	r24, 0xFF	; 255
    1cc8:	8c 93       	st	X, r24
    1cca:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ccc:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1cd0:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1cd4:	5a 96       	adiw	r26, 0x1a	; 26
    1cd6:	8c 91       	ld	r24, X
    1cd8:	98 17       	cp	r25, r24
    1cda:	30 f0       	brcs	.+12     	; 0x1ce8 <xTaskResumeAll+0x140>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <xTaskResumeAll+0x140>
    1ce4:	e0 e0       	ldi	r30, 0x00	; 0
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 91 86 10 	lds	r24, 0x1086	; 0x801086 <xPendingReadyList>
    1cec:	81 11       	cpse	r24, r1
    1cee:	73 cf       	rjmp	.-282    	; 0x1bd6 <xTaskResumeAll+0x2e>
    1cf0:	ef 2b       	or	r30, r31
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <xTaskResumeAll+0x14e>
    1cf4:	7f db       	rcall	.-2306   	; 0x13f4 <prvResetNextTaskUnblockTime>
    1cf6:	c0 90 64 10 	lds	r12, 0x1064	; 0x801064 <xPendedTicks>
    1cfa:	d0 90 65 10 	lds	r13, 0x1065	; 0x801065 <xPendedTicks+0x1>
    1cfe:	e0 90 66 10 	lds	r14, 0x1066	; 0x801066 <xPendedTicks+0x2>
    1d02:	f0 90 67 10 	lds	r15, 0x1067	; 0x801067 <xPendedTicks+0x3>
    1d06:	c1 14       	cp	r12, r1
    1d08:	d1 04       	cpc	r13, r1
    1d0a:	e1 04       	cpc	r14, r1
    1d0c:	f1 04       	cpc	r15, r1
    1d0e:	a1 f0       	breq	.+40     	; 0x1d38 <xTaskResumeAll+0x190>
    1d10:	1f de       	rcall	.-962    	; 0x1950 <xTaskIncrementTick>
    1d12:	88 23       	and	r24, r24
    1d14:	19 f0       	breq	.+6      	; 0x1d1c <xTaskResumeAll+0x174>
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	c8 1a       	sub	r12, r24
    1d20:	d1 08       	sbc	r13, r1
    1d22:	e1 08       	sbc	r14, r1
    1d24:	f1 08       	sbc	r15, r1
    1d26:	a1 f7       	brne	.-24     	; 0x1d10 <xTaskResumeAll+0x168>
    1d28:	10 92 64 10 	sts	0x1064, r1	; 0x801064 <xPendedTicks>
    1d2c:	10 92 65 10 	sts	0x1065, r1	; 0x801065 <xPendedTicks+0x1>
    1d30:	10 92 66 10 	sts	0x1066, r1	; 0x801066 <xPendedTicks+0x2>
    1d34:	10 92 67 10 	sts	0x1067, r1	; 0x801067 <xPendedTicks+0x3>
    1d38:	80 91 63 10 	lds	r24, 0x1063	; 0x801063 <xYieldPending>
    1d3c:	88 23       	and	r24, r24
    1d3e:	31 f0       	breq	.+12     	; 0x1d4c <xTaskResumeAll+0x1a4>
    1d40:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	03 c0       	rjmp	.+6      	; 0x1d4e <xTaskResumeAll+0x1a6>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <xTaskResumeAll+0x1a6>
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
    1d5e:	08 95       	ret

00001d60 <xTaskDelayUntil>:
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	ec 01       	movw	r28, r24
    1d78:	6a 01       	movw	r12, r20
    1d7a:	7b 01       	movw	r14, r22
    1d7c:	d5 dd       	rcall	.-1110   	; 0x1928 <vTaskSuspendAll>
    1d7e:	80 90 6a 10 	lds	r8, 0x106A	; 0x80106a <xTickCount>
    1d82:	90 90 6b 10 	lds	r9, 0x106B	; 0x80106b <xTickCount+0x1>
    1d86:	a0 90 6c 10 	lds	r10, 0x106C	; 0x80106c <xTickCount+0x2>
    1d8a:	b0 90 6d 10 	lds	r11, 0x106D	; 0x80106d <xTickCount+0x3>
    1d8e:	88 81       	ld	r24, Y
    1d90:	99 81       	ldd	r25, Y+1	; 0x01
    1d92:	aa 81       	ldd	r26, Y+2	; 0x02
    1d94:	bb 81       	ldd	r27, Y+3	; 0x03
    1d96:	ac 01       	movw	r20, r24
    1d98:	bd 01       	movw	r22, r26
    1d9a:	4c 0d       	add	r20, r12
    1d9c:	5d 1d       	adc	r21, r13
    1d9e:	6e 1d       	adc	r22, r14
    1da0:	7f 1d       	adc	r23, r15
    1da2:	88 16       	cp	r8, r24
    1da4:	99 06       	cpc	r9, r25
    1da6:	aa 06       	cpc	r10, r26
    1da8:	bb 06       	cpc	r11, r27
    1daa:	60 f4       	brcc	.+24     	; 0x1dc4 <xTaskDelayUntil+0x64>
    1dac:	48 17       	cp	r20, r24
    1dae:	59 07       	cpc	r21, r25
    1db0:	6a 07       	cpc	r22, r26
    1db2:	7b 07       	cpc	r23, r27
    1db4:	98 f4       	brcc	.+38     	; 0x1ddc <xTaskDelayUntil+0x7c>
    1db6:	84 16       	cp	r8, r20
    1db8:	95 06       	cpc	r9, r21
    1dba:	a6 06       	cpc	r10, r22
    1dbc:	b7 06       	cpc	r11, r23
    1dbe:	80 f0       	brcs	.+32     	; 0x1de0 <xTaskDelayUntil+0x80>
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	13 c0       	rjmp	.+38     	; 0x1dea <xTaskDelayUntil+0x8a>
    1dc4:	48 17       	cp	r20, r24
    1dc6:	59 07       	cpc	r21, r25
    1dc8:	6a 07       	cpc	r22, r26
    1dca:	7b 07       	cpc	r23, r27
    1dcc:	58 f0       	brcs	.+22     	; 0x1de4 <xTaskDelayUntil+0x84>
    1dce:	84 16       	cp	r8, r20
    1dd0:	95 06       	cpc	r9, r21
    1dd2:	a6 06       	cpc	r10, r22
    1dd4:	b7 06       	cpc	r11, r23
    1dd6:	40 f0       	brcs	.+16     	; 0x1de8 <xTaskDelayUntil+0x88>
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	07 c0       	rjmp	.+14     	; 0x1dea <xTaskDelayUntil+0x8a>
    1ddc:	10 e0       	ldi	r17, 0x00	; 0
    1dde:	05 c0       	rjmp	.+10     	; 0x1dea <xTaskDelayUntil+0x8a>
    1de0:	11 e0       	ldi	r17, 0x01	; 1
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <xTaskDelayUntil+0x8a>
    1de4:	11 e0       	ldi	r17, 0x01	; 1
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <xTaskDelayUntil+0x8a>
    1de8:	11 e0       	ldi	r17, 0x01	; 1
    1dea:	48 83       	st	Y, r20
    1dec:	59 83       	std	Y+1, r21	; 0x01
    1dee:	6a 83       	std	Y+2, r22	; 0x02
    1df0:	7b 83       	std	Y+3, r23	; 0x03
    1df2:	11 23       	and	r17, r17
    1df4:	41 f0       	breq	.+16     	; 0x1e06 <xTaskDelayUntil+0xa6>
    1df6:	cb 01       	movw	r24, r22
    1df8:	ba 01       	movw	r22, r20
    1dfa:	68 19       	sub	r22, r8
    1dfc:	79 09       	sbc	r23, r9
    1dfe:	8a 09       	sbc	r24, r10
    1e00:	9b 09       	sbc	r25, r11
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	6b dc       	rcall	.-1834   	; 0x16dc <prvAddCurrentTaskToDelayedList>
    1e06:	d0 de       	rcall	.-608    	; 0x1ba8 <xTaskResumeAll>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <xTaskDelayUntil+0xb0>
    1e0c:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1e10:	81 2f       	mov	r24, r17
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	9f 90       	pop	r9
    1e26:	8f 90       	pop	r8
    1e28:	08 95       	ret

00001e2a <vTaskDelay>:
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	6b 01       	movw	r12, r22
    1e34:	7c 01       	movw	r14, r24
    1e36:	67 2b       	or	r22, r23
    1e38:	68 2b       	or	r22, r24
    1e3a:	69 2b       	or	r22, r25
    1e3c:	39 f0       	breq	.+14     	; 0x1e4c <vTaskDelay+0x22>
    1e3e:	74 dd       	rcall	.-1304   	; 0x1928 <vTaskSuspendAll>
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	c7 01       	movw	r24, r14
    1e44:	b6 01       	movw	r22, r12
    1e46:	4a dc       	rcall	.-1900   	; 0x16dc <prvAddCurrentTaskToDelayedList>
    1e48:	af de       	rcall	.-674    	; 0x1ba8 <xTaskResumeAll>
    1e4a:	01 c0       	rjmp	.+2      	; 0x1e4e <vTaskDelay+0x24>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	81 11       	cpse	r24, r1
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <vTaskDelay+0x2c>
    1e52:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	df 90       	pop	r13
    1e5c:	cf 90       	pop	r12
    1e5e:	08 95       	ret

00001e60 <vTaskSwitchContext>:
    1e60:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    1e64:	88 23       	and	r24, r24
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <vTaskSwitchContext+0x10>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    1e6e:	08 95       	ret
    1e70:	10 92 63 10 	sts	0x1063, r1	; 0x801063 <xYieldPending>
    1e74:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1e78:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1e7c:	20 81       	ld	r18, Z
    1e7e:	31 81       	ldd	r19, Z+1	; 0x01
    1e80:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    1e84:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1e88:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e8a:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e8c:	82 17       	cp	r24, r18
    1e8e:	93 07       	cpc	r25, r19
    1e90:	60 f0       	brcs	.+24     	; 0x1eaa <vTaskSwitchContext+0x4a>
    1e92:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1e96:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1e9a:	63 5e       	subi	r22, 0xE3	; 227
    1e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9e:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    1ea2:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1ea6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <vApplicationStackOverflowHook>
    1eaa:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <vTaskSwitchContext+0x52>
    1eb0:	81 50       	subi	r24, 0x01	; 1
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	9b e0       	ldi	r25, 0x0B	; 11
    1eb8:	92 9f       	mul	r25, r18
    1eba:	f0 01       	movw	r30, r0
    1ebc:	93 9f       	mul	r25, r19
    1ebe:	f0 0d       	add	r31, r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	e5 55       	subi	r30, 0x55	; 85
    1ec4:	ff 4e       	sbci	r31, 0xEF	; 239
    1ec6:	90 81       	ld	r25, Z
    1ec8:	99 23       	and	r25, r25
    1eca:	91 f3       	breq	.-28     	; 0x1eb0 <vTaskSwitchContext+0x50>
    1ecc:	9b e0       	ldi	r25, 0x0B	; 11
    1ece:	92 9f       	mul	r25, r18
    1ed0:	a0 01       	movw	r20, r0
    1ed2:	93 9f       	mul	r25, r19
    1ed4:	50 0d       	add	r21, r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	df 01       	movw	r26, r30
    1eda:	01 80       	ldd	r0, Z+1	; 0x01
    1edc:	f2 81       	ldd	r31, Z+2	; 0x02
    1ede:	e0 2d       	mov	r30, r0
    1ee0:	04 80       	ldd	r0, Z+4	; 0x04
    1ee2:	f5 81       	ldd	r31, Z+5	; 0x05
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	12 96       	adiw	r26, 0x02	; 2
    1ee8:	fc 93       	st	X, r31
    1eea:	ee 93       	st	-X, r30
    1eec:	11 97       	sbiw	r26, 0x01	; 1
    1eee:	42 55       	subi	r20, 0x52	; 82
    1ef0:	5f 4e       	sbci	r21, 0xEF	; 239
    1ef2:	e4 17       	cp	r30, r20
    1ef4:	f5 07       	cpc	r31, r21
    1ef6:	29 f4       	brne	.+10     	; 0x1f02 <vTaskSwitchContext+0xa2>
    1ef8:	44 81       	ldd	r20, Z+4	; 0x04
    1efa:	55 81       	ldd	r21, Z+5	; 0x05
    1efc:	fd 01       	movw	r30, r26
    1efe:	52 83       	std	Z+2, r21	; 0x02
    1f00:	41 83       	std	Z+1, r20	; 0x01
    1f02:	9b e0       	ldi	r25, 0x0B	; 11
    1f04:	92 9f       	mul	r25, r18
    1f06:	f0 01       	movw	r30, r0
    1f08:	93 9f       	mul	r25, r19
    1f0a:	f0 0d       	add	r31, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	e5 55       	subi	r30, 0x55	; 85
    1f10:	ff 4e       	sbci	r31, 0xEF	; 239
    1f12:	01 80       	ldd	r0, Z+1	; 0x01
    1f14:	f2 81       	ldd	r31, Z+2	; 0x02
    1f16:	e0 2d       	mov	r30, r0
    1f18:	20 85       	ldd	r18, Z+8	; 0x08
    1f1a:	31 85       	ldd	r19, Z+9	; 0x09
    1f1c:	30 93 1a 11 	sts	0x111A, r19	; 0x80111a <pxCurrentTCB+0x1>
    1f20:	20 93 19 11 	sts	0x1119, r18	; 0x801119 <pxCurrentTCB>
    1f24:	80 93 69 10 	sts	0x1069, r24	; 0x801069 <uxTopReadyPriority>
    1f28:	08 95       	ret

00001f2a <vTaskPlaceOnEventList>:
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	6a 01       	movw	r12, r20
    1f34:	7b 01       	movw	r14, r22
    1f36:	60 91 19 11 	lds	r22, 0x1119	; 0x801119 <pxCurrentTCB>
    1f3a:	70 91 1a 11 	lds	r23, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1f3e:	62 5f       	subi	r22, 0xF2	; 242
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	c7 01       	movw	r24, r14
    1f4a:	b6 01       	movw	r22, r12
    1f4c:	c7 db       	rcall	.-2162   	; 0x16dc <prvAddCurrentTaskToDelayedList>
    1f4e:	ff 90       	pop	r15
    1f50:	ef 90       	pop	r14
    1f52:	df 90       	pop	r13
    1f54:	cf 90       	pop	r12
    1f56:	08 95       	ret

00001f58 <vTaskPlaceOnEventListRestricted>:
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	ba 01       	movw	r22, r20
    1f62:	a1 81       	ldd	r26, Z+1	; 0x01
    1f64:	b2 81       	ldd	r27, Z+2	; 0x02
    1f66:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    1f6a:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1f6e:	bb 8b       	std	Y+19, r27	; 0x13
    1f70:	aa 8b       	std	Y+18, r26	; 0x12
    1f72:	c0 91 19 11 	lds	r28, 0x1119	; 0x801119 <pxCurrentTCB>
    1f76:	d0 91 1a 11 	lds	r29, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1f7a:	16 96       	adiw	r26, 0x06	; 6
    1f7c:	4d 91       	ld	r20, X+
    1f7e:	5c 91       	ld	r21, X
    1f80:	17 97       	sbiw	r26, 0x07	; 7
    1f82:	5d 8b       	std	Y+21, r21	; 0x15
    1f84:	4c 8b       	std	Y+20, r20	; 0x14
    1f86:	16 96       	adiw	r26, 0x06	; 6
    1f88:	cd 91       	ld	r28, X+
    1f8a:	dc 91       	ld	r29, X
    1f8c:	17 97       	sbiw	r26, 0x07	; 7
    1f8e:	40 91 19 11 	lds	r20, 0x1119	; 0x801119 <pxCurrentTCB>
    1f92:	50 91 1a 11 	lds	r21, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1f96:	42 5f       	subi	r20, 0xF2	; 242
    1f98:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9a:	5d 83       	std	Y+5, r21	; 0x05
    1f9c:	4c 83       	std	Y+4, r20	; 0x04
    1f9e:	40 91 19 11 	lds	r20, 0x1119	; 0x801119 <pxCurrentTCB>
    1fa2:	50 91 1a 11 	lds	r21, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1fa6:	42 5f       	subi	r20, 0xF2	; 242
    1fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1faa:	17 96       	adiw	r26, 0x07	; 7
    1fac:	5c 93       	st	X, r21
    1fae:	4e 93       	st	-X, r20
    1fb0:	16 97       	sbiw	r26, 0x06	; 6
    1fb2:	a0 91 19 11 	lds	r26, 0x1119	; 0x801119 <pxCurrentTCB>
    1fb6:	b0 91 1a 11 	lds	r27, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    1fba:	59 96       	adiw	r26, 0x19	; 25
    1fbc:	fc 93       	st	X, r31
    1fbe:	ee 93       	st	-X, r30
    1fc0:	58 97       	sbiw	r26, 0x18	; 24
    1fc2:	30 81       	ld	r19, Z
    1fc4:	3f 5f       	subi	r19, 0xFF	; 255
    1fc6:	30 83       	st	Z, r19
    1fc8:	22 23       	and	r18, r18
    1fca:	19 f0       	breq	.+6      	; 0x1fd2 <vTaskPlaceOnEventListRestricted+0x7a>
    1fcc:	6f ef       	ldi	r22, 0xFF	; 255
    1fce:	7f ef       	ldi	r23, 0xFF	; 255
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	42 2f       	mov	r20, r18
    1fd4:	83 db       	rcall	.-2298   	; 0x16dc <prvAddCurrentTaskToDelayedList>
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	08 95       	ret

00001fdc <xTaskRemoveFromEventList>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	17 96       	adiw	r26, 0x07	; 7
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	18 97       	sbiw	r26, 0x08	; 8
    1fea:	00 84       	ldd	r0, Z+8	; 0x08
    1fec:	f1 85       	ldd	r31, Z+9	; 0x09
    1fee:	e0 2d       	mov	r30, r0
    1ff0:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ff2:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ff4:	c2 89       	ldd	r28, Z+18	; 0x12
    1ff6:	d3 89       	ldd	r29, Z+19	; 0x13
    1ff8:	84 89       	ldd	r24, Z+20	; 0x14
    1ffa:	95 89       	ldd	r25, Z+21	; 0x15
    1ffc:	9f 83       	std	Y+7, r25	; 0x07
    1ffe:	8e 83       	std	Y+6, r24	; 0x06
    2000:	c4 89       	ldd	r28, Z+20	; 0x14
    2002:	d5 89       	ldd	r29, Z+21	; 0x15
    2004:	82 89       	ldd	r24, Z+18	; 0x12
    2006:	93 89       	ldd	r25, Z+19	; 0x13
    2008:	9d 83       	std	Y+5, r25	; 0x05
    200a:	8c 83       	std	Y+4, r24	; 0x04
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	12 97       	sbiw	r26, 0x02	; 2
    2014:	9f 01       	movw	r18, r30
    2016:	22 5f       	subi	r18, 0xF2	; 242
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	82 17       	cp	r24, r18
    201c:	93 07       	cpc	r25, r19
    201e:	31 f4       	brne	.+12     	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2020:	84 89       	ldd	r24, Z+20	; 0x14
    2022:	95 89       	ldd	r25, Z+21	; 0x15
    2024:	12 96       	adiw	r26, 0x02	; 2
    2026:	9c 93       	st	X, r25
    2028:	8e 93       	st	-X, r24
    202a:	11 97       	sbiw	r26, 0x01	; 1
    202c:	11 8e       	std	Z+25, r1	; 0x19
    202e:	10 8e       	std	Z+24, r1	; 0x18
    2030:	8c 91       	ld	r24, X
    2032:	81 50       	subi	r24, 0x01	; 1
    2034:	8c 93       	st	X, r24
    2036:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    203a:	81 11       	cpse	r24, r1
    203c:	52 c0       	rjmp	.+164    	; 0x20e2 <__DATA_REGION_LENGTH__+0xe2>
    203e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2040:	b5 85       	ldd	r27, Z+13	; 0x0d
    2042:	c6 81       	ldd	r28, Z+6	; 0x06
    2044:	d7 81       	ldd	r29, Z+7	; 0x07
    2046:	80 85       	ldd	r24, Z+8	; 0x08
    2048:	91 85       	ldd	r25, Z+9	; 0x09
    204a:	9f 83       	std	Y+7, r25	; 0x07
    204c:	8e 83       	std	Y+6, r24	; 0x06
    204e:	c0 85       	ldd	r28, Z+8	; 0x08
    2050:	d1 85       	ldd	r29, Z+9	; 0x09
    2052:	86 81       	ldd	r24, Z+6	; 0x06
    2054:	97 81       	ldd	r25, Z+7	; 0x07
    2056:	9d 83       	std	Y+5, r25	; 0x05
    2058:	8c 83       	std	Y+4, r24	; 0x04
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	8d 91       	ld	r24, X+
    205e:	9c 91       	ld	r25, X
    2060:	12 97       	sbiw	r26, 0x02	; 2
    2062:	9f 01       	movw	r18, r30
    2064:	2e 5f       	subi	r18, 0xFE	; 254
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	82 17       	cp	r24, r18
    206a:	93 07       	cpc	r25, r19
    206c:	31 f4       	brne	.+12     	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    206e:	80 85       	ldd	r24, Z+8	; 0x08
    2070:	91 85       	ldd	r25, Z+9	; 0x09
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
    2078:	11 97       	sbiw	r26, 0x01	; 1
    207a:	15 86       	std	Z+13, r1	; 0x0d
    207c:	14 86       	std	Z+12, r1	; 0x0c
    207e:	8c 91       	ld	r24, X
    2080:	81 50       	subi	r24, 0x01	; 1
    2082:	8c 93       	st	X, r24
    2084:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2086:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    208a:	8a 17       	cp	r24, r26
    208c:	10 f4       	brcc	.+4      	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    208e:	a0 93 69 10 	sts	0x1069, r26	; 0x801069 <uxTopReadyPriority>
    2092:	8b e0       	ldi	r24, 0x0B	; 11
    2094:	8a 9f       	mul	r24, r26
    2096:	d0 01       	movw	r26, r0
    2098:	11 24       	eor	r1, r1
    209a:	a5 55       	subi	r26, 0x55	; 85
    209c:	bf 4e       	sbci	r27, 0xEF	; 239
    209e:	11 96       	adiw	r26, 0x01	; 1
    20a0:	0d 90       	ld	r0, X+
    20a2:	bc 91       	ld	r27, X
    20a4:	a0 2d       	mov	r26, r0
    20a6:	b7 83       	std	Z+7, r27	; 0x07
    20a8:	a6 83       	std	Z+6, r26	; 0x06
    20aa:	16 96       	adiw	r26, 0x06	; 6
    20ac:	4d 91       	ld	r20, X+
    20ae:	5c 91       	ld	r21, X
    20b0:	17 97       	sbiw	r26, 0x07	; 7
    20b2:	51 87       	std	Z+9, r21	; 0x09
    20b4:	40 87       	std	Z+8, r20	; 0x08
    20b6:	16 96       	adiw	r26, 0x06	; 6
    20b8:	cd 91       	ld	r28, X+
    20ba:	dc 91       	ld	r29, X
    20bc:	17 97       	sbiw	r26, 0x07	; 7
    20be:	3d 83       	std	Y+5, r19	; 0x05
    20c0:	2c 83       	std	Y+4, r18	; 0x04
    20c2:	17 96       	adiw	r26, 0x07	; 7
    20c4:	3c 93       	st	X, r19
    20c6:	2e 93       	st	-X, r18
    20c8:	16 97       	sbiw	r26, 0x06	; 6
    20ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20cc:	8a 9f       	mul	r24, r26
    20ce:	d0 01       	movw	r26, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	a5 55       	subi	r26, 0x55	; 85
    20d4:	bf 4e       	sbci	r27, 0xEF	; 239
    20d6:	b5 87       	std	Z+13, r27	; 0x0d
    20d8:	a4 87       	std	Z+12, r26	; 0x0c
    20da:	8c 91       	ld	r24, X
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	8c 93       	st	X, r24
    20e0:	1c c0       	rjmp	.+56     	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    20e2:	46 e8       	ldi	r20, 0x86	; 134
    20e4:	50 e1       	ldi	r21, 0x10	; 16
    20e6:	da 01       	movw	r26, r20
    20e8:	11 96       	adiw	r26, 0x01	; 1
    20ea:	cd 91       	ld	r28, X+
    20ec:	dc 91       	ld	r29, X
    20ee:	12 97       	sbiw	r26, 0x02	; 2
    20f0:	d3 8b       	std	Z+19, r29	; 0x13
    20f2:	c2 8b       	std	Z+18, r28	; 0x12
    20f4:	8e 81       	ldd	r24, Y+6	; 0x06
    20f6:	9f 81       	ldd	r25, Y+7	; 0x07
    20f8:	95 8b       	std	Z+21, r25	; 0x15
    20fa:	84 8b       	std	Z+20, r24	; 0x14
    20fc:	8e 81       	ldd	r24, Y+6	; 0x06
    20fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2100:	dc 01       	movw	r26, r24
    2102:	15 96       	adiw	r26, 0x05	; 5
    2104:	3c 93       	st	X, r19
    2106:	2e 93       	st	-X, r18
    2108:	14 97       	sbiw	r26, 0x04	; 4
    210a:	3f 83       	std	Y+7, r19	; 0x07
    210c:	2e 83       	std	Y+6, r18	; 0x06
    210e:	51 8f       	std	Z+25, r21	; 0x19
    2110:	40 8f       	std	Z+24, r20	; 0x18
    2112:	da 01       	movw	r26, r20
    2114:	8c 91       	ld	r24, X
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	8c 93       	st	X, r24
    211a:	92 8d       	ldd	r25, Z+26	; 0x1a
    211c:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2120:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2124:	82 8d       	ldd	r24, Z+26	; 0x1a
    2126:	89 17       	cp	r24, r25
    2128:	20 f4       	brcc	.+8      	; 0x2132 <__DATA_REGION_LENGTH__+0x132>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <__DATA_REGION_LENGTH__+0x134>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	08 95       	ret

0000213a <vTaskSetTimeOutState>:
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	0f 92       	push	r0
    2140:	20 91 62 10 	lds	r18, 0x1062	; 0x801062 <xNumOfOverflows>
    2144:	fc 01       	movw	r30, r24
    2146:	20 83       	st	Z, r18
    2148:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <xTickCount>
    214c:	50 91 6b 10 	lds	r21, 0x106B	; 0x80106b <xTickCount+0x1>
    2150:	60 91 6c 10 	lds	r22, 0x106C	; 0x80106c <xTickCount+0x2>
    2154:	70 91 6d 10 	lds	r23, 0x106D	; 0x80106d <xTickCount+0x3>
    2158:	41 83       	std	Z+1, r20	; 0x01
    215a:	52 83       	std	Z+2, r21	; 0x02
    215c:	63 83       	std	Z+3, r22	; 0x03
    215e:	74 83       	std	Z+4, r23	; 0x04
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	08 95       	ret

00002166 <vTaskInternalSetTimeOutState>:
    2166:	20 91 62 10 	lds	r18, 0x1062	; 0x801062 <xNumOfOverflows>
    216a:	fc 01       	movw	r30, r24
    216c:	20 83       	st	Z, r18
    216e:	40 91 6a 10 	lds	r20, 0x106A	; 0x80106a <xTickCount>
    2172:	50 91 6b 10 	lds	r21, 0x106B	; 0x80106b <xTickCount+0x1>
    2176:	60 91 6c 10 	lds	r22, 0x106C	; 0x80106c <xTickCount+0x2>
    217a:	70 91 6d 10 	lds	r23, 0x106D	; 0x80106d <xTickCount+0x3>
    217e:	41 83       	std	Z+1, r20	; 0x01
    2180:	52 83       	std	Z+2, r21	; 0x02
    2182:	63 83       	std	Z+3, r22	; 0x03
    2184:	74 83       	std	Z+4, r23	; 0x04
    2186:	08 95       	ret

00002188 <xTaskCheckForTimeOut>:
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	fb 01       	movw	r30, r22
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	0f 92       	push	r0
    21a8:	c0 90 6a 10 	lds	r12, 0x106A	; 0x80106a <xTickCount>
    21ac:	d0 90 6b 10 	lds	r13, 0x106B	; 0x80106b <xTickCount+0x1>
    21b0:	e0 90 6c 10 	lds	r14, 0x106C	; 0x80106c <xTickCount+0x2>
    21b4:	f0 90 6d 10 	lds	r15, 0x106D	; 0x80106d <xTickCount+0x3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	0d 91       	ld	r16, X+
    21be:	1d 91       	ld	r17, X+
    21c0:	2d 91       	ld	r18, X+
    21c2:	3c 91       	ld	r19, X
    21c4:	14 97       	sbiw	r26, 0x04	; 4
    21c6:	46 01       	movw	r8, r12
    21c8:	57 01       	movw	r10, r14
    21ca:	80 1a       	sub	r8, r16
    21cc:	91 0a       	sbc	r9, r17
    21ce:	a2 0a       	sbc	r10, r18
    21d0:	b3 0a       	sbc	r11, r19
    21d2:	40 81       	ld	r20, Z
    21d4:	51 81       	ldd	r21, Z+1	; 0x01
    21d6:	62 81       	ldd	r22, Z+2	; 0x02
    21d8:	73 81       	ldd	r23, Z+3	; 0x03
    21da:	4f 3f       	cpi	r20, 0xFF	; 255
    21dc:	bf ef       	ldi	r27, 0xFF	; 255
    21de:	5b 07       	cpc	r21, r27
    21e0:	6b 07       	cpc	r22, r27
    21e2:	7b 07       	cpc	r23, r27
    21e4:	39 f1       	breq	.+78     	; 0x2234 <__stack+0x35>
    21e6:	ec 01       	movw	r28, r24
    21e8:	b8 81       	ld	r27, Y
    21ea:	a0 91 62 10 	lds	r26, 0x1062	; 0x801062 <xNumOfOverflows>
    21ee:	ba 17       	cp	r27, r26
    21f0:	59 f0       	breq	.+22     	; 0x2208 <__stack+0x9>
    21f2:	c0 16       	cp	r12, r16
    21f4:	d1 06       	cpc	r13, r17
    21f6:	e2 06       	cpc	r14, r18
    21f8:	f3 06       	cpc	r15, r19
    21fa:	30 f0       	brcs	.+12     	; 0x2208 <__stack+0x9>
    21fc:	10 82       	st	Z, r1
    21fe:	11 82       	std	Z+1, r1	; 0x01
    2200:	12 82       	std	Z+2, r1	; 0x02
    2202:	13 82       	std	Z+3, r1	; 0x03
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	17 c0       	rjmp	.+46     	; 0x2236 <__stack+0x37>
    2208:	84 16       	cp	r8, r20
    220a:	95 06       	cpc	r9, r21
    220c:	a6 06       	cpc	r10, r22
    220e:	b7 06       	cpc	r11, r23
    2210:	58 f4       	brcc	.+22     	; 0x2228 <__stack+0x29>
    2212:	48 19       	sub	r20, r8
    2214:	59 09       	sbc	r21, r9
    2216:	6a 09       	sbc	r22, r10
    2218:	7b 09       	sbc	r23, r11
    221a:	40 83       	st	Z, r20
    221c:	51 83       	std	Z+1, r21	; 0x01
    221e:	62 83       	std	Z+2, r22	; 0x02
    2220:	73 83       	std	Z+3, r23	; 0x03
    2222:	a1 df       	rcall	.-190    	; 0x2166 <vTaskInternalSetTimeOutState>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <__stack+0x37>
    2228:	10 82       	st	Z, r1
    222a:	11 82       	std	Z+1, r1	; 0x01
    222c:	12 82       	std	Z+2, r1	; 0x02
    222e:	13 82       	std	Z+3, r1	; 0x03
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <__stack+0x37>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	0f 90       	pop	r0
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	bf 90       	pop	r11
    224c:	af 90       	pop	r10
    224e:	9f 90       	pop	r9
    2250:	8f 90       	pop	r8
    2252:	08 95       	ret

00002254 <vTaskMissedYield>:
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <xYieldPending>
    225a:	08 95       	ret

0000225c <xTaskGetCurrentTaskHandle>:
    225c:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    2260:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2264:	08 95       	ret

00002266 <xTaskGetSchedulerState>:
    2266:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <xSchedulerRunning>
    226a:	88 23       	and	r24, r24
    226c:	31 f0       	breq	.+12     	; 0x227a <xTaskGetSchedulerState+0x14>
    226e:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <uxSchedulerSuspended>
    2272:	81 11       	cpse	r24, r1
    2274:	04 c0       	rjmp	.+8      	; 0x227e <xTaskGetSchedulerState+0x18>
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	08 95       	ret
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	08 95       	ret
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	08 95       	ret

00002282 <xTaskPriorityDisinherit>:
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	fc 01       	movw	r30, r24
    228c:	89 2b       	or	r24, r25
    228e:	09 f4       	brne	.+2      	; 0x2292 <xTaskPriorityDisinherit+0x10>
    2290:	49 c0       	rjmp	.+146    	; 0x2324 <xTaskPriorityDisinherit+0xa2>
    2292:	86 a5       	ldd	r24, Z+46	; 0x2e
    2294:	81 50       	subi	r24, 0x01	; 1
    2296:	86 a7       	std	Z+46, r24	; 0x2e
    2298:	22 8d       	ldd	r18, Z+26	; 0x1a
    229a:	95 a5       	ldd	r25, Z+45	; 0x2d
    229c:	29 17       	cp	r18, r25
    229e:	09 f4       	brne	.+2      	; 0x22a2 <xTaskPriorityDisinherit+0x20>
    22a0:	43 c0       	rjmp	.+134    	; 0x2328 <xTaskPriorityDisinherit+0xa6>
    22a2:	81 11       	cpse	r24, r1
    22a4:	43 c0       	rjmp	.+134    	; 0x232c <xTaskPriorityDisinherit+0xaa>
    22a6:	ef 01       	movw	r28, r30
    22a8:	8f 01       	movw	r16, r30
    22aa:	0e 5f       	subi	r16, 0xFE	; 254
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	c8 01       	movw	r24, r16
    22b0:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    22b4:	ed a5       	ldd	r30, Y+45	; 0x2d
    22b6:	ea 8f       	std	Y+26, r30	; 0x1a
    22b8:	8a e0       	ldi	r24, 0x0A	; 10
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	8e 1b       	sub	r24, r30
    22c2:	91 09       	sbc	r25, r1
    22c4:	a1 09       	sbc	r26, r1
    22c6:	b1 09       	sbc	r27, r1
    22c8:	8e 87       	std	Y+14, r24	; 0x0e
    22ca:	9f 87       	std	Y+15, r25	; 0x0f
    22cc:	a8 8b       	std	Y+16, r26	; 0x10
    22ce:	b9 8b       	std	Y+17, r27	; 0x11
    22d0:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    22d4:	8e 17       	cp	r24, r30
    22d6:	10 f4       	brcc	.+4      	; 0x22dc <xTaskPriorityDisinherit+0x5a>
    22d8:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    22dc:	8b e0       	ldi	r24, 0x0B	; 11
    22de:	8e 9f       	mul	r24, r30
    22e0:	f0 01       	movw	r30, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	e5 55       	subi	r30, 0x55	; 85
    22e6:	ff 4e       	sbci	r31, 0xEF	; 239
    22e8:	01 80       	ldd	r0, Z+1	; 0x01
    22ea:	f2 81       	ldd	r31, Z+2	; 0x02
    22ec:	e0 2d       	mov	r30, r0
    22ee:	ff 83       	std	Y+7, r31	; 0x07
    22f0:	ee 83       	std	Y+6, r30	; 0x06
    22f2:	26 81       	ldd	r18, Z+6	; 0x06
    22f4:	37 81       	ldd	r19, Z+7	; 0x07
    22f6:	39 87       	std	Y+9, r19	; 0x09
    22f8:	28 87       	std	Y+8, r18	; 0x08
    22fa:	a6 81       	ldd	r26, Z+6	; 0x06
    22fc:	b7 81       	ldd	r27, Z+7	; 0x07
    22fe:	15 96       	adiw	r26, 0x05	; 5
    2300:	1c 93       	st	X, r17
    2302:	0e 93       	st	-X, r16
    2304:	14 97       	sbiw	r26, 0x04	; 4
    2306:	17 83       	std	Z+7, r17	; 0x07
    2308:	06 83       	std	Z+6, r16	; 0x06
    230a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    230c:	8e 9f       	mul	r24, r30
    230e:	f0 01       	movw	r30, r0
    2310:	11 24       	eor	r1, r1
    2312:	e5 55       	subi	r30, 0x55	; 85
    2314:	ff 4e       	sbci	r31, 0xEF	; 239
    2316:	fd 87       	std	Y+13, r31	; 0x0d
    2318:	ec 87       	std	Y+12, r30	; 0x0c
    231a:	80 81       	ld	r24, Z
    231c:	8f 5f       	subi	r24, 0xFF	; 255
    231e:	80 83       	st	Z, r24
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	05 c0       	rjmp	.+10     	; 0x232e <xTaskPriorityDisinherit+0xac>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	03 c0       	rjmp	.+6      	; 0x232e <xTaskPriorityDisinherit+0xac>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	01 c0       	rjmp	.+2      	; 0x232e <xTaskPriorityDisinherit+0xac>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	08 95       	ret

00002338 <xTaskGenericNotifyWait>:
    2338:	4f 92       	push	r4
    233a:	5f 92       	push	r5
    233c:	6f 92       	push	r6
    233e:	7f 92       	push	r7
    2340:	af 92       	push	r10
    2342:	bf 92       	push	r11
    2344:	cf 92       	push	r12
    2346:	df 92       	push	r13
    2348:	ef 92       	push	r14
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	28 01       	movw	r4, r16
    2356:	39 01       	movw	r6, r18
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	0f 92       	push	r0
    235e:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2362:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2366:	c8 2f       	mov	r28, r24
    2368:	d0 e0       	ldi	r29, 0x00	; 0
    236a:	ec 0f       	add	r30, r28
    236c:	fd 1f       	adc	r31, r29
    236e:	83 a9       	ldd	r24, Z+51	; 0x33
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	71 f1       	breq	.+92     	; 0x23d0 <xTaskGenericNotifyWait+0x98>
    2374:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2378:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    237c:	ce 01       	movw	r24, r28
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	e8 0f       	add	r30, r24
    2388:	f9 1f       	adc	r31, r25
    238a:	87 a5       	ldd	r24, Z+47	; 0x2f
    238c:	90 a9       	ldd	r25, Z+48	; 0x30
    238e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2390:	b2 a9       	ldd	r27, Z+50	; 0x32
    2392:	40 95       	com	r20
    2394:	50 95       	com	r21
    2396:	60 95       	com	r22
    2398:	70 95       	com	r23
    239a:	48 23       	and	r20, r24
    239c:	59 23       	and	r21, r25
    239e:	6a 23       	and	r22, r26
    23a0:	7b 23       	and	r23, r27
    23a2:	47 a7       	std	Z+47, r20	; 0x2f
    23a4:	50 ab       	std	Z+48, r21	; 0x30
    23a6:	61 ab       	std	Z+49, r22	; 0x31
    23a8:	72 ab       	std	Z+50, r23	; 0x32
    23aa:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    23ae:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    23b2:	ec 0f       	add	r30, r28
    23b4:	fd 1f       	adc	r31, r29
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	83 ab       	std	Z+51, r24	; 0x33
    23ba:	a1 14       	cp	r10, r1
    23bc:	b1 04       	cpc	r11, r1
    23be:	c1 04       	cpc	r12, r1
    23c0:	d1 04       	cpc	r13, r1
    23c2:	31 f0       	breq	.+12     	; 0x23d0 <xTaskGenericNotifyWait+0x98>
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	c6 01       	movw	r24, r12
    23c8:	b5 01       	movw	r22, r10
    23ca:	88 d9       	rcall	.-3312   	; 0x16dc <prvAddCurrentTaskToDelayedList>
    23cc:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	0f 92       	push	r0
    23da:	e1 14       	cp	r14, r1
    23dc:	f1 04       	cpc	r15, r1
    23de:	a1 f0       	breq	.+40     	; 0x2408 <xTaskGenericNotifyWait+0xd0>
    23e0:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    23e4:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    23e8:	ce 01       	movw	r24, r28
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	e8 0f       	add	r30, r24
    23f4:	f9 1f       	adc	r31, r25
    23f6:	87 a5       	ldd	r24, Z+47	; 0x2f
    23f8:	90 a9       	ldd	r25, Z+48	; 0x30
    23fa:	a1 a9       	ldd	r26, Z+49	; 0x31
    23fc:	b2 a9       	ldd	r27, Z+50	; 0x32
    23fe:	f7 01       	movw	r30, r14
    2400:	80 83       	st	Z, r24
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	a2 83       	std	Z+2, r26	; 0x02
    2406:	b3 83       	std	Z+3, r27	; 0x03
    2408:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    240c:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2410:	ec 0f       	add	r30, r28
    2412:	fd 1f       	adc	r31, r29
    2414:	83 a9       	ldd	r24, Z+51	; 0x33
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	e9 f4       	brne	.+58     	; 0x2454 <xTaskGenericNotifyWait+0x11c>
    241a:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    241e:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2422:	ce 01       	movw	r24, r28
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	e8 0f       	add	r30, r24
    242e:	f9 1f       	adc	r31, r25
    2430:	87 a5       	ldd	r24, Z+47	; 0x2f
    2432:	90 a9       	ldd	r25, Z+48	; 0x30
    2434:	a1 a9       	ldd	r26, Z+49	; 0x31
    2436:	b2 a9       	ldd	r27, Z+50	; 0x32
    2438:	40 94       	com	r4
    243a:	50 94       	com	r5
    243c:	60 94       	com	r6
    243e:	70 94       	com	r7
    2440:	48 22       	and	r4, r24
    2442:	59 22       	and	r5, r25
    2444:	6a 22       	and	r6, r26
    2446:	7b 22       	and	r7, r27
    2448:	47 a6       	std	Z+47, r4	; 0x2f
    244a:	50 aa       	std	Z+48, r5	; 0x30
    244c:	61 aa       	std	Z+49, r6	; 0x31
    244e:	72 aa       	std	Z+50, r7	; 0x32
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <xTaskGenericNotifyWait+0x11e>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	20 91 19 11 	lds	r18, 0x1119	; 0x801119 <pxCurrentTCB>
    245a:	30 91 1a 11 	lds	r19, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    245e:	c2 0f       	add	r28, r18
    2460:	d3 1f       	adc	r29, r19
    2462:	1b aa       	std	Y+51, r1	; 0x33
    2464:	0f 90       	pop	r0
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	ff 90       	pop	r15
    2472:	ef 90       	pop	r14
    2474:	df 90       	pop	r13
    2476:	cf 90       	pop	r12
    2478:	bf 90       	pop	r11
    247a:	af 90       	pop	r10
    247c:	7f 90       	pop	r7
    247e:	6f 90       	pop	r6
    2480:	5f 90       	pop	r5
    2482:	4f 90       	pop	r4
    2484:	08 95       	ret

00002486 <xTaskGenericNotify>:
    2486:	8f 92       	push	r8
    2488:	9f 92       	push	r9
    248a:	af 92       	push	r10
    248c:	bf 92       	push	r11
    248e:	ef 92       	push	r14
    2490:	ff 92       	push	r15
    2492:	0f 93       	push	r16
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	dc 01       	movw	r26, r24
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	0f 92       	push	r0
    24a0:	e1 14       	cp	r14, r1
    24a2:	f1 04       	cpc	r15, r1
    24a4:	89 f0       	breq	.+34     	; 0x24c8 <xTaskGenericNotify+0x42>
    24a6:	e6 2f       	mov	r30, r22
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	e8 0f       	add	r30, r24
    24b4:	f9 1f       	adc	r31, r25
    24b6:	87 a4       	ldd	r8, Z+47	; 0x2f
    24b8:	90 a8       	ldd	r9, Z+48	; 0x30
    24ba:	a1 a8       	ldd	r10, Z+49	; 0x31
    24bc:	b2 a8       	ldd	r11, Z+50	; 0x32
    24be:	f7 01       	movw	r30, r14
    24c0:	80 82       	st	Z, r8
    24c2:	91 82       	std	Z+1, r9	; 0x01
    24c4:	a2 82       	std	Z+2, r10	; 0x02
    24c6:	b3 82       	std	Z+3, r11	; 0x03
    24c8:	70 e0       	ldi	r23, 0x00	; 0
    24ca:	fd 01       	movw	r30, r26
    24cc:	e6 0f       	add	r30, r22
    24ce:	f7 1f       	adc	r31, r23
    24d0:	83 a9       	ldd	r24, Z+51	; 0x33
    24d2:	92 e0       	ldi	r25, 0x02	; 2
    24d4:	93 ab       	std	Z+51, r25	; 0x33
    24d6:	02 30       	cpi	r16, 0x02	; 2
    24d8:	01 f1       	breq	.+64     	; 0x251a <xTaskGenericNotify+0x94>
    24da:	18 f4       	brcc	.+6      	; 0x24e2 <xTaskGenericNotify+0x5c>
    24dc:	01 30       	cpi	r16, 0x01	; 1
    24de:	31 f0       	breq	.+12     	; 0x24ec <xTaskGenericNotify+0x66>
    24e0:	4d c0       	rjmp	.+154    	; 0x257c <xTaskGenericNotify+0xf6>
    24e2:	03 30       	cpi	r16, 0x03	; 3
    24e4:	79 f1       	breq	.+94     	; 0x2544 <xTaskGenericNotify+0xbe>
    24e6:	04 30       	cpi	r16, 0x04	; 4
    24e8:	d1 f1       	breq	.+116    	; 0x255e <xTaskGenericNotify+0xd8>
    24ea:	48 c0       	rjmp	.+144    	; 0x257c <xTaskGenericNotify+0xf6>
    24ec:	66 0f       	add	r22, r22
    24ee:	77 1f       	adc	r23, r23
    24f0:	66 0f       	add	r22, r22
    24f2:	77 1f       	adc	r23, r23
    24f4:	fd 01       	movw	r30, r26
    24f6:	e6 0f       	add	r30, r22
    24f8:	f7 1f       	adc	r31, r23
    24fa:	87 a4       	ldd	r8, Z+47	; 0x2f
    24fc:	90 a8       	ldd	r9, Z+48	; 0x30
    24fe:	a1 a8       	ldd	r10, Z+49	; 0x31
    2500:	b2 a8       	ldd	r11, Z+50	; 0x32
    2502:	ba 01       	movw	r22, r20
    2504:	a9 01       	movw	r20, r18
    2506:	48 29       	or	r20, r8
    2508:	59 29       	or	r21, r9
    250a:	6a 29       	or	r22, r10
    250c:	7b 29       	or	r23, r11
    250e:	47 a7       	std	Z+47, r20	; 0x2f
    2510:	50 ab       	std	Z+48, r21	; 0x30
    2512:	61 ab       	std	Z+49, r22	; 0x31
    2514:	72 ab       	std	Z+50, r23	; 0x32
    2516:	01 e0       	ldi	r16, 0x01	; 1
    2518:	34 c0       	rjmp	.+104    	; 0x2582 <xTaskGenericNotify+0xfc>
    251a:	66 0f       	add	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	66 0f       	add	r22, r22
    2520:	77 1f       	adc	r23, r23
    2522:	fd 01       	movw	r30, r26
    2524:	e6 0f       	add	r30, r22
    2526:	f7 1f       	adc	r31, r23
    2528:	47 a5       	ldd	r20, Z+47	; 0x2f
    252a:	50 a9       	ldd	r21, Z+48	; 0x30
    252c:	61 a9       	ldd	r22, Z+49	; 0x31
    252e:	72 a9       	ldd	r23, Z+50	; 0x32
    2530:	4f 5f       	subi	r20, 0xFF	; 255
    2532:	5f 4f       	sbci	r21, 0xFF	; 255
    2534:	6f 4f       	sbci	r22, 0xFF	; 255
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	47 a7       	std	Z+47, r20	; 0x2f
    253a:	50 ab       	std	Z+48, r21	; 0x30
    253c:	61 ab       	std	Z+49, r22	; 0x31
    253e:	72 ab       	std	Z+50, r23	; 0x32
    2540:	01 e0       	ldi	r16, 0x01	; 1
    2542:	1f c0       	rjmp	.+62     	; 0x2582 <xTaskGenericNotify+0xfc>
    2544:	66 0f       	add	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	66 0f       	add	r22, r22
    254a:	77 1f       	adc	r23, r23
    254c:	fd 01       	movw	r30, r26
    254e:	e6 0f       	add	r30, r22
    2550:	f7 1f       	adc	r31, r23
    2552:	27 a7       	std	Z+47, r18	; 0x2f
    2554:	30 ab       	std	Z+48, r19	; 0x30
    2556:	41 ab       	std	Z+49, r20	; 0x31
    2558:	52 ab       	std	Z+50, r21	; 0x32
    255a:	01 e0       	ldi	r16, 0x01	; 1
    255c:	12 c0       	rjmp	.+36     	; 0x2582 <xTaskGenericNotify+0xfc>
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	79 f0       	breq	.+30     	; 0x2580 <xTaskGenericNotify+0xfa>
    2562:	66 0f       	add	r22, r22
    2564:	77 1f       	adc	r23, r23
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	fd 01       	movw	r30, r26
    256c:	e6 0f       	add	r30, r22
    256e:	f7 1f       	adc	r31, r23
    2570:	27 a7       	std	Z+47, r18	; 0x2f
    2572:	30 ab       	std	Z+48, r19	; 0x30
    2574:	41 ab       	std	Z+49, r20	; 0x31
    2576:	52 ab       	std	Z+50, r21	; 0x32
    2578:	01 e0       	ldi	r16, 0x01	; 1
    257a:	03 c0       	rjmp	.+6      	; 0x2582 <xTaskGenericNotify+0xfc>
    257c:	01 e0       	ldi	r16, 0x01	; 1
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <xTaskGenericNotify+0xfc>
    2580:	00 e0       	ldi	r16, 0x00	; 0
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	09 f0       	breq	.+2      	; 0x2588 <xTaskGenericNotify+0x102>
    2586:	69 c0       	rjmp	.+210    	; 0x265a <xTaskGenericNotify+0x1d4>
    2588:	1c 96       	adiw	r26, 0x0c	; 12
    258a:	ed 91       	ld	r30, X+
    258c:	fc 91       	ld	r31, X
    258e:	1d 97       	sbiw	r26, 0x0d	; 13
    2590:	16 96       	adiw	r26, 0x06	; 6
    2592:	cd 91       	ld	r28, X+
    2594:	dc 91       	ld	r29, X
    2596:	17 97       	sbiw	r26, 0x07	; 7
    2598:	18 96       	adiw	r26, 0x08	; 8
    259a:	8d 91       	ld	r24, X+
    259c:	9c 91       	ld	r25, X
    259e:	19 97       	sbiw	r26, 0x09	; 9
    25a0:	9f 83       	std	Y+7, r25	; 0x07
    25a2:	8e 83       	std	Y+6, r24	; 0x06
    25a4:	18 96       	adiw	r26, 0x08	; 8
    25a6:	cd 91       	ld	r28, X+
    25a8:	dc 91       	ld	r29, X
    25aa:	19 97       	sbiw	r26, 0x09	; 9
    25ac:	16 96       	adiw	r26, 0x06	; 6
    25ae:	8d 91       	ld	r24, X+
    25b0:	9c 91       	ld	r25, X
    25b2:	17 97       	sbiw	r26, 0x07	; 7
    25b4:	9d 83       	std	Y+5, r25	; 0x05
    25b6:	8c 83       	std	Y+4, r24	; 0x04
    25b8:	81 81       	ldd	r24, Z+1	; 0x01
    25ba:	92 81       	ldd	r25, Z+2	; 0x02
    25bc:	9d 01       	movw	r18, r26
    25be:	2e 5f       	subi	r18, 0xFE	; 254
    25c0:	3f 4f       	sbci	r19, 0xFF	; 255
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	31 f4       	brne	.+12     	; 0x25d4 <xTaskGenericNotify+0x14e>
    25c8:	18 96       	adiw	r26, 0x08	; 8
    25ca:	8d 91       	ld	r24, X+
    25cc:	9c 91       	ld	r25, X
    25ce:	19 97       	sbiw	r26, 0x09	; 9
    25d0:	92 83       	std	Z+2, r25	; 0x02
    25d2:	81 83       	std	Z+1, r24	; 0x01
    25d4:	1d 96       	adiw	r26, 0x0d	; 13
    25d6:	1c 92       	st	X, r1
    25d8:	1e 92       	st	-X, r1
    25da:	1c 97       	sbiw	r26, 0x0c	; 12
    25dc:	80 81       	ld	r24, Z
    25de:	81 50       	subi	r24, 0x01	; 1
    25e0:	80 83       	st	Z, r24
    25e2:	5a 96       	adiw	r26, 0x1a	; 26
    25e4:	ec 91       	ld	r30, X
    25e6:	5a 97       	sbiw	r26, 0x1a	; 26
    25e8:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <uxTopReadyPriority>
    25ec:	8e 17       	cp	r24, r30
    25ee:	10 f4       	brcc	.+4      	; 0x25f4 <xTaskGenericNotify+0x16e>
    25f0:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    25f4:	8b e0       	ldi	r24, 0x0B	; 11
    25f6:	8e 9f       	mul	r24, r30
    25f8:	f0 01       	movw	r30, r0
    25fa:	11 24       	eor	r1, r1
    25fc:	e5 55       	subi	r30, 0x55	; 85
    25fe:	ff 4e       	sbci	r31, 0xEF	; 239
    2600:	01 80       	ldd	r0, Z+1	; 0x01
    2602:	f2 81       	ldd	r31, Z+2	; 0x02
    2604:	e0 2d       	mov	r30, r0
    2606:	17 96       	adiw	r26, 0x07	; 7
    2608:	fc 93       	st	X, r31
    260a:	ee 93       	st	-X, r30
    260c:	16 97       	sbiw	r26, 0x06	; 6
    260e:	46 81       	ldd	r20, Z+6	; 0x06
    2610:	57 81       	ldd	r21, Z+7	; 0x07
    2612:	19 96       	adiw	r26, 0x09	; 9
    2614:	5c 93       	st	X, r21
    2616:	4e 93       	st	-X, r20
    2618:	18 97       	sbiw	r26, 0x08	; 8
    261a:	c6 81       	ldd	r28, Z+6	; 0x06
    261c:	d7 81       	ldd	r29, Z+7	; 0x07
    261e:	3d 83       	std	Y+5, r19	; 0x05
    2620:	2c 83       	std	Y+4, r18	; 0x04
    2622:	37 83       	std	Z+7, r19	; 0x07
    2624:	26 83       	std	Z+6, r18	; 0x06
    2626:	5a 96       	adiw	r26, 0x1a	; 26
    2628:	ec 91       	ld	r30, X
    262a:	5a 97       	sbiw	r26, 0x1a	; 26
    262c:	8e 9f       	mul	r24, r30
    262e:	f0 01       	movw	r30, r0
    2630:	11 24       	eor	r1, r1
    2632:	e5 55       	subi	r30, 0x55	; 85
    2634:	ff 4e       	sbci	r31, 0xEF	; 239
    2636:	1d 96       	adiw	r26, 0x0d	; 13
    2638:	fc 93       	st	X, r31
    263a:	ee 93       	st	-X, r30
    263c:	1c 97       	sbiw	r26, 0x0c	; 12
    263e:	80 81       	ld	r24, Z
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	80 83       	st	Z, r24
    2644:	5a 96       	adiw	r26, 0x1a	; 26
    2646:	9c 91       	ld	r25, X
    2648:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    264c:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2650:	82 8d       	ldd	r24, Z+26	; 0x1a
    2652:	89 17       	cp	r24, r25
    2654:	10 f4       	brcc	.+4      	; 0x265a <xTaskGenericNotify+0x1d4>
    2656:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    265a:	0f 90       	pop	r0
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	80 2f       	mov	r24, r16
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
    266e:	9f 90       	pop	r9
    2670:	8f 90       	pop	r8
    2672:	08 95       	ret

00002674 <xTaskGenericNotifyFromISR>:
    2674:	8f 92       	push	r8
    2676:	9f 92       	push	r9
    2678:	af 92       	push	r10
    267a:	bf 92       	push	r11
    267c:	cf 92       	push	r12
    267e:	df 92       	push	r13
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	dc 01       	movw	r26, r24
    268c:	e1 14       	cp	r14, r1
    268e:	f1 04       	cpc	r15, r1
    2690:	89 f0       	breq	.+34     	; 0x26b4 <xTaskGenericNotifyFromISR+0x40>
    2692:	e6 2f       	mov	r30, r22
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	ee 0f       	add	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	e8 0f       	add	r30, r24
    26a0:	f9 1f       	adc	r31, r25
    26a2:	87 a4       	ldd	r8, Z+47	; 0x2f
    26a4:	90 a8       	ldd	r9, Z+48	; 0x30
    26a6:	a1 a8       	ldd	r10, Z+49	; 0x31
    26a8:	b2 a8       	ldd	r11, Z+50	; 0x32
    26aa:	f7 01       	movw	r30, r14
    26ac:	80 82       	st	Z, r8
    26ae:	91 82       	std	Z+1, r9	; 0x01
    26b0:	a2 82       	std	Z+2, r10	; 0x02
    26b2:	b3 82       	std	Z+3, r11	; 0x03
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	fd 01       	movw	r30, r26
    26b8:	e6 0f       	add	r30, r22
    26ba:	f7 1f       	adc	r31, r23
    26bc:	93 a9       	ldd	r25, Z+51	; 0x33
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	83 ab       	std	Z+51, r24	; 0x33
    26c2:	02 30       	cpi	r16, 0x02	; 2
    26c4:	01 f1       	breq	.+64     	; 0x2706 <xTaskGenericNotifyFromISR+0x92>
    26c6:	18 f4       	brcc	.+6      	; 0x26ce <xTaskGenericNotifyFromISR+0x5a>
    26c8:	01 30       	cpi	r16, 0x01	; 1
    26ca:	31 f0       	breq	.+12     	; 0x26d8 <xTaskGenericNotifyFromISR+0x64>
    26cc:	4d c0       	rjmp	.+154    	; 0x2768 <xTaskGenericNotifyFromISR+0xf4>
    26ce:	03 30       	cpi	r16, 0x03	; 3
    26d0:	79 f1       	breq	.+94     	; 0x2730 <xTaskGenericNotifyFromISR+0xbc>
    26d2:	04 30       	cpi	r16, 0x04	; 4
    26d4:	d1 f1       	breq	.+116    	; 0x274a <xTaskGenericNotifyFromISR+0xd6>
    26d6:	48 c0       	rjmp	.+144    	; 0x2768 <xTaskGenericNotifyFromISR+0xf4>
    26d8:	66 0f       	add	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	66 0f       	add	r22, r22
    26de:	77 1f       	adc	r23, r23
    26e0:	fd 01       	movw	r30, r26
    26e2:	e6 0f       	add	r30, r22
    26e4:	f7 1f       	adc	r31, r23
    26e6:	87 a4       	ldd	r8, Z+47	; 0x2f
    26e8:	90 a8       	ldd	r9, Z+48	; 0x30
    26ea:	a1 a8       	ldd	r10, Z+49	; 0x31
    26ec:	b2 a8       	ldd	r11, Z+50	; 0x32
    26ee:	ba 01       	movw	r22, r20
    26f0:	a9 01       	movw	r20, r18
    26f2:	48 29       	or	r20, r8
    26f4:	59 29       	or	r21, r9
    26f6:	6a 29       	or	r22, r10
    26f8:	7b 29       	or	r23, r11
    26fa:	47 a7       	std	Z+47, r20	; 0x2f
    26fc:	50 ab       	std	Z+48, r21	; 0x30
    26fe:	61 ab       	std	Z+49, r22	; 0x31
    2700:	72 ab       	std	Z+50, r23	; 0x32
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	34 c0       	rjmp	.+104    	; 0x276e <xTaskGenericNotifyFromISR+0xfa>
    2706:	66 0f       	add	r22, r22
    2708:	77 1f       	adc	r23, r23
    270a:	66 0f       	add	r22, r22
    270c:	77 1f       	adc	r23, r23
    270e:	fd 01       	movw	r30, r26
    2710:	e6 0f       	add	r30, r22
    2712:	f7 1f       	adc	r31, r23
    2714:	47 a5       	ldd	r20, Z+47	; 0x2f
    2716:	50 a9       	ldd	r21, Z+48	; 0x30
    2718:	61 a9       	ldd	r22, Z+49	; 0x31
    271a:	72 a9       	ldd	r23, Z+50	; 0x32
    271c:	4f 5f       	subi	r20, 0xFF	; 255
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	6f 4f       	sbci	r22, 0xFF	; 255
    2722:	7f 4f       	sbci	r23, 0xFF	; 255
    2724:	47 a7       	std	Z+47, r20	; 0x2f
    2726:	50 ab       	std	Z+48, r21	; 0x30
    2728:	61 ab       	std	Z+49, r22	; 0x31
    272a:	72 ab       	std	Z+50, r23	; 0x32
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	1f c0       	rjmp	.+62     	; 0x276e <xTaskGenericNotifyFromISR+0xfa>
    2730:	66 0f       	add	r22, r22
    2732:	77 1f       	adc	r23, r23
    2734:	66 0f       	add	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	fd 01       	movw	r30, r26
    273a:	e6 0f       	add	r30, r22
    273c:	f7 1f       	adc	r31, r23
    273e:	27 a7       	std	Z+47, r18	; 0x2f
    2740:	30 ab       	std	Z+48, r19	; 0x30
    2742:	41 ab       	std	Z+49, r20	; 0x31
    2744:	52 ab       	std	Z+50, r21	; 0x32
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	12 c0       	rjmp	.+36     	; 0x276e <xTaskGenericNotifyFromISR+0xfa>
    274a:	92 30       	cpi	r25, 0x02	; 2
    274c:	79 f0       	breq	.+30     	; 0x276c <xTaskGenericNotifyFromISR+0xf8>
    274e:	66 0f       	add	r22, r22
    2750:	77 1f       	adc	r23, r23
    2752:	66 0f       	add	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	fd 01       	movw	r30, r26
    2758:	e6 0f       	add	r30, r22
    275a:	f7 1f       	adc	r31, r23
    275c:	27 a7       	std	Z+47, r18	; 0x2f
    275e:	30 ab       	std	Z+48, r19	; 0x30
    2760:	41 ab       	std	Z+49, r20	; 0x31
    2762:	52 ab       	std	Z+50, r21	; 0x32
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	03 c0       	rjmp	.+6      	; 0x276e <xTaskGenericNotifyFromISR+0xfa>
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	01 c0       	rjmp	.+2      	; 0x276e <xTaskGenericNotifyFromISR+0xfa>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	91 30       	cpi	r25, 0x01	; 1
    2770:	09 f0       	breq	.+2      	; 0x2774 <xTaskGenericNotifyFromISR+0x100>
    2772:	96 c0       	rjmp	.+300    	; 0x28a0 <xTaskGenericNotifyFromISR+0x22c>
    2774:	90 91 5a 10 	lds	r25, 0x105A	; 0x80105a <uxSchedulerSuspended>
    2778:	91 11       	cpse	r25, r1
    277a:	5f c0       	rjmp	.+190    	; 0x283a <xTaskGenericNotifyFromISR+0x1c6>
    277c:	1c 96       	adiw	r26, 0x0c	; 12
    277e:	ed 91       	ld	r30, X+
    2780:	fc 91       	ld	r31, X
    2782:	1d 97       	sbiw	r26, 0x0d	; 13
    2784:	16 96       	adiw	r26, 0x06	; 6
    2786:	cd 91       	ld	r28, X+
    2788:	dc 91       	ld	r29, X
    278a:	17 97       	sbiw	r26, 0x07	; 7
    278c:	18 96       	adiw	r26, 0x08	; 8
    278e:	2d 91       	ld	r18, X+
    2790:	3c 91       	ld	r19, X
    2792:	19 97       	sbiw	r26, 0x09	; 9
    2794:	3f 83       	std	Y+7, r19	; 0x07
    2796:	2e 83       	std	Y+6, r18	; 0x06
    2798:	18 96       	adiw	r26, 0x08	; 8
    279a:	cd 91       	ld	r28, X+
    279c:	dc 91       	ld	r29, X
    279e:	19 97       	sbiw	r26, 0x09	; 9
    27a0:	16 96       	adiw	r26, 0x06	; 6
    27a2:	2d 91       	ld	r18, X+
    27a4:	3c 91       	ld	r19, X
    27a6:	17 97       	sbiw	r26, 0x07	; 7
    27a8:	3d 83       	std	Y+5, r19	; 0x05
    27aa:	2c 83       	std	Y+4, r18	; 0x04
    27ac:	41 81       	ldd	r20, Z+1	; 0x01
    27ae:	52 81       	ldd	r21, Z+2	; 0x02
    27b0:	9d 01       	movw	r18, r26
    27b2:	2e 5f       	subi	r18, 0xFE	; 254
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	42 17       	cp	r20, r18
    27b8:	53 07       	cpc	r21, r19
    27ba:	31 f4       	brne	.+12     	; 0x27c8 <xTaskGenericNotifyFromISR+0x154>
    27bc:	18 96       	adiw	r26, 0x08	; 8
    27be:	4d 91       	ld	r20, X+
    27c0:	5c 91       	ld	r21, X
    27c2:	19 97       	sbiw	r26, 0x09	; 9
    27c4:	52 83       	std	Z+2, r21	; 0x02
    27c6:	41 83       	std	Z+1, r20	; 0x01
    27c8:	1d 96       	adiw	r26, 0x0d	; 13
    27ca:	1c 92       	st	X, r1
    27cc:	1e 92       	st	-X, r1
    27ce:	1c 97       	sbiw	r26, 0x0c	; 12
    27d0:	90 81       	ld	r25, Z
    27d2:	91 50       	subi	r25, 0x01	; 1
    27d4:	90 83       	st	Z, r25
    27d6:	5a 96       	adiw	r26, 0x1a	; 26
    27d8:	ec 91       	ld	r30, X
    27da:	5a 97       	sbiw	r26, 0x1a	; 26
    27dc:	90 91 69 10 	lds	r25, 0x1069	; 0x801069 <uxTopReadyPriority>
    27e0:	9e 17       	cp	r25, r30
    27e2:	10 f4       	brcc	.+4      	; 0x27e8 <xTaskGenericNotifyFromISR+0x174>
    27e4:	e0 93 69 10 	sts	0x1069, r30	; 0x801069 <uxTopReadyPriority>
    27e8:	9b e0       	ldi	r25, 0x0B	; 11
    27ea:	9e 9f       	mul	r25, r30
    27ec:	f0 01       	movw	r30, r0
    27ee:	11 24       	eor	r1, r1
    27f0:	e5 55       	subi	r30, 0x55	; 85
    27f2:	ff 4e       	sbci	r31, 0xEF	; 239
    27f4:	01 80       	ldd	r0, Z+1	; 0x01
    27f6:	f2 81       	ldd	r31, Z+2	; 0x02
    27f8:	e0 2d       	mov	r30, r0
    27fa:	17 96       	adiw	r26, 0x07	; 7
    27fc:	fc 93       	st	X, r31
    27fe:	ee 93       	st	-X, r30
    2800:	16 97       	sbiw	r26, 0x06	; 6
    2802:	46 81       	ldd	r20, Z+6	; 0x06
    2804:	57 81       	ldd	r21, Z+7	; 0x07
    2806:	19 96       	adiw	r26, 0x09	; 9
    2808:	5c 93       	st	X, r21
    280a:	4e 93       	st	-X, r20
    280c:	18 97       	sbiw	r26, 0x08	; 8
    280e:	c6 81       	ldd	r28, Z+6	; 0x06
    2810:	d7 81       	ldd	r29, Z+7	; 0x07
    2812:	3d 83       	std	Y+5, r19	; 0x05
    2814:	2c 83       	std	Y+4, r18	; 0x04
    2816:	37 83       	std	Z+7, r19	; 0x07
    2818:	26 83       	std	Z+6, r18	; 0x06
    281a:	5a 96       	adiw	r26, 0x1a	; 26
    281c:	ec 91       	ld	r30, X
    281e:	5a 97       	sbiw	r26, 0x1a	; 26
    2820:	9e 9f       	mul	r25, r30
    2822:	f0 01       	movw	r30, r0
    2824:	11 24       	eor	r1, r1
    2826:	e5 55       	subi	r30, 0x55	; 85
    2828:	ff 4e       	sbci	r31, 0xEF	; 239
    282a:	1d 96       	adiw	r26, 0x0d	; 13
    282c:	fc 93       	st	X, r31
    282e:	ee 93       	st	-X, r30
    2830:	1c 97       	sbiw	r26, 0x0c	; 12
    2832:	90 81       	ld	r25, Z
    2834:	9f 5f       	subi	r25, 0xFF	; 255
    2836:	90 83       	st	Z, r25
    2838:	21 c0       	rjmp	.+66     	; 0x287c <xTaskGenericNotifyFromISR+0x208>
    283a:	66 e8       	ldi	r22, 0x86	; 134
    283c:	70 e1       	ldi	r23, 0x10	; 16
    283e:	fb 01       	movw	r30, r22
    2840:	c1 81       	ldd	r28, Z+1	; 0x01
    2842:	d2 81       	ldd	r29, Z+2	; 0x02
    2844:	53 96       	adiw	r26, 0x13	; 19
    2846:	dc 93       	st	X, r29
    2848:	ce 93       	st	-X, r28
    284a:	52 97       	sbiw	r26, 0x12	; 18
    284c:	2e 81       	ldd	r18, Y+6	; 0x06
    284e:	3f 81       	ldd	r19, Y+7	; 0x07
    2850:	55 96       	adiw	r26, 0x15	; 21
    2852:	3c 93       	st	X, r19
    2854:	2e 93       	st	-X, r18
    2856:	54 97       	sbiw	r26, 0x14	; 20
    2858:	4e 81       	ldd	r20, Y+6	; 0x06
    285a:	5f 81       	ldd	r21, Y+7	; 0x07
    285c:	9d 01       	movw	r18, r26
    285e:	22 5f       	subi	r18, 0xF2	; 242
    2860:	3f 4f       	sbci	r19, 0xFF	; 255
    2862:	fa 01       	movw	r30, r20
    2864:	35 83       	std	Z+5, r19	; 0x05
    2866:	24 83       	std	Z+4, r18	; 0x04
    2868:	3f 83       	std	Y+7, r19	; 0x07
    286a:	2e 83       	std	Y+6, r18	; 0x06
    286c:	59 96       	adiw	r26, 0x19	; 25
    286e:	7c 93       	st	X, r23
    2870:	6e 93       	st	-X, r22
    2872:	58 97       	sbiw	r26, 0x18	; 24
    2874:	fb 01       	movw	r30, r22
    2876:	90 81       	ld	r25, Z
    2878:	9f 5f       	subi	r25, 0xFF	; 255
    287a:	90 83       	st	Z, r25
    287c:	5a 96       	adiw	r26, 0x1a	; 26
    287e:	2c 91       	ld	r18, X
    2880:	e0 91 19 11 	lds	r30, 0x1119	; 0x801119 <pxCurrentTCB>
    2884:	f0 91 1a 11 	lds	r31, 0x111A	; 0x80111a <pxCurrentTCB+0x1>
    2888:	92 8d       	ldd	r25, Z+26	; 0x1a
    288a:	92 17       	cp	r25, r18
    288c:	48 f4       	brcc	.+18     	; 0x28a0 <xTaskGenericNotifyFromISR+0x22c>
    288e:	c1 14       	cp	r12, r1
    2890:	d1 04       	cpc	r13, r1
    2892:	19 f0       	breq	.+6      	; 0x289a <xTaskGenericNotifyFromISR+0x226>
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	f6 01       	movw	r30, r12
    2898:	90 83       	st	Z, r25
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	90 93 63 10 	sts	0x1063, r25	; 0x801063 <xYieldPending>
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	df 90       	pop	r13
    28ac:	cf 90       	pop	r12
    28ae:	bf 90       	pop	r11
    28b0:	af 90       	pop	r10
    28b2:	9f 90       	pop	r9
    28b4:	8f 90       	pop	r8
    28b6:	08 95       	ret

000028b8 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	21 f4       	brne	.+8      	; 0x28c4 <xTaskGenericNotifyStateClear+0xc>
    28bc:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <pxCurrentTCB>
    28c0:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	fc 01       	movw	r30, r24
    28ce:	e6 0f       	add	r30, r22
    28d0:	f7 1f       	adc	r31, r23
    28d2:	23 a9       	ldd	r18, Z+51	; 0x33
    28d4:	22 30       	cpi	r18, 0x02	; 2
    28d6:	31 f4       	brne	.+12     	; 0x28e4 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    28d8:	fc 01       	movw	r30, r24
    28da:	e6 0f       	add	r30, r22
    28dc:	f7 1f       	adc	r31, r23
    28de:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    28e4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    28e6:	0f 90       	pop	r0
    28e8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    28ea:	08 95       	ret

000028ec <prvGetNextExpireTime>:
    28ec:	dc 01       	movw	r26, r24
    28ee:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
    28f2:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    28f6:	80 81       	ld	r24, Z
    28f8:	91 e0       	ldi	r25, 0x01	; 1
    28fa:	81 11       	cpse	r24, r1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9c 93       	st	X, r25
    2900:	91 11       	cpse	r25, r1
    2902:	08 c0       	rjmp	.+16     	; 0x2914 <prvGetNextExpireTime+0x28>
    2904:	07 80       	ldd	r0, Z+7	; 0x07
    2906:	f0 85       	ldd	r31, Z+8	; 0x08
    2908:	e0 2d       	mov	r30, r0
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	08 95       	ret
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	cb 01       	movw	r24, r22
    291a:	08 95       	ret

0000291c <prvInsertTimerInActiveList>:
    291c:	cf 92       	push	r12
    291e:	df 92       	push	r13
    2920:	ef 92       	push	r14
    2922:	ff 92       	push	r15
    2924:	0f 93       	push	r16
    2926:	1f 93       	push	r17
    2928:	fc 01       	movw	r30, r24
    292a:	42 83       	std	Z+2, r20	; 0x02
    292c:	53 83       	std	Z+3, r21	; 0x03
    292e:	64 83       	std	Z+4, r22	; 0x04
    2930:	75 83       	std	Z+5, r23	; 0x05
    2932:	93 87       	std	Z+11, r25	; 0x0b
    2934:	82 87       	std	Z+10, r24	; 0x0a
    2936:	04 17       	cp	r16, r20
    2938:	15 07       	cpc	r17, r21
    293a:	26 07       	cpc	r18, r22
    293c:	37 07       	cpc	r19, r23
    293e:	c0 f0       	brcs	.+48     	; 0x2970 <prvInsertTimerInActiveList+0x54>
    2940:	0c 19       	sub	r16, r12
    2942:	1d 09       	sbc	r17, r13
    2944:	2e 09       	sbc	r18, r14
    2946:	3f 09       	sbc	r19, r15
    2948:	86 85       	ldd	r24, Z+14	; 0x0e
    294a:	97 85       	ldd	r25, Z+15	; 0x0f
    294c:	a0 89       	ldd	r26, Z+16	; 0x10
    294e:	b1 89       	ldd	r27, Z+17	; 0x11
    2950:	08 17       	cp	r16, r24
    2952:	19 07       	cpc	r17, r25
    2954:	2a 07       	cpc	r18, r26
    2956:	3b 07       	cpc	r19, r27
    2958:	00 f5       	brcc	.+64     	; 0x299a <prvInsertTimerInActiveList+0x7e>
    295a:	bf 01       	movw	r22, r30
    295c:	6e 5f       	subi	r22, 0xFE	; 254
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <pxOverflowTimerList>
    2964:	90 91 24 11 	lds	r25, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    2968:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	18 c0       	rjmp	.+48     	; 0x29a0 <prvInsertTimerInActiveList+0x84>
    2970:	0c 15       	cp	r16, r12
    2972:	1d 05       	cpc	r17, r13
    2974:	2e 05       	cpc	r18, r14
    2976:	3f 05       	cpc	r19, r15
    2978:	28 f4       	brcc	.+10     	; 0x2984 <prvInsertTimerInActiveList+0x68>
    297a:	4c 15       	cp	r20, r12
    297c:	5d 05       	cpc	r21, r13
    297e:	6e 05       	cpc	r22, r14
    2980:	7f 05       	cpc	r23, r15
    2982:	68 f4       	brcc	.+26     	; 0x299e <prvInsertTimerInActiveList+0x82>
    2984:	bf 01       	movw	r22, r30
    2986:	6e 5f       	subi	r22, 0xFE	; 254
    2988:	7f 4f       	sbci	r23, 0xFF	; 255
    298a:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxCurrentTimerList>
    298e:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2992:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <prvInsertTimerInActiveList+0x84>
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	01 c0       	rjmp	.+2      	; 0x29a0 <prvInsertTimerInActiveList+0x84>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	ff 90       	pop	r15
    29a6:	ef 90       	pop	r14
    29a8:	df 90       	pop	r13
    29aa:	cf 90       	pop	r12
    29ac:	08 95       	ret

000029ae <prvCheckForValidListAndQueue>:
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	0f 92       	push	r0
    29b4:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    29b8:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    29bc:	89 2b       	or	r24, r25
    29be:	e9 f4       	brne	.+58     	; 0x29fa <prvCheckForValidListAndQueue+0x4c>
    29c0:	82 e3       	ldi	r24, 0x32	; 50
    29c2:	91 e1       	ldi	r25, 0x11	; 17
    29c4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    29c8:	87 e2       	ldi	r24, 0x27	; 39
    29ca:	91 e1       	ldi	r25, 0x11	; 17
    29cc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    29d0:	82 e3       	ldi	r24, 0x32	; 50
    29d2:	91 e1       	ldi	r25, 0x11	; 17
    29d4:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <pxCurrentTimerList+0x1>
    29d8:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <pxCurrentTimerList>
    29dc:	87 e2       	ldi	r24, 0x27	; 39
    29de:	91 e1       	ldi	r25, 0x11	; 17
    29e0:	90 93 24 11 	sts	0x1124, r25	; 0x801124 <pxOverflowTimerList+0x1>
    29e4:	80 93 23 11 	sts	0x1123, r24	; 0x801123 <pxOverflowTimerList>
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	67 e0       	ldi	r22, 0x07	; 7
    29ec:	8a e0       	ldi	r24, 0x0A	; 10
    29ee:	0e 94 14 05 	call	0xa28	; 0xa28 <xQueueGenericCreate>
    29f2:	90 93 22 11 	sts	0x1122, r25	; 0x801122 <xTimerQueue+0x1>
    29f6:	80 93 21 11 	sts	0x1121, r24	; 0x801121 <xTimerQueue>
    29fa:	0f 90       	pop	r0
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	08 95       	ret

00002a00 <xTimerCreateTimerTask>:
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	d3 df       	rcall	.-90     	; 0x29ae <prvCheckForValidListAndQueue>
    2a08:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2a0c:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2a10:	89 2b       	or	r24, r25
    2a12:	91 f0       	breq	.+36     	; 0x2a38 <xTimerCreateTimerTask+0x38>
    2a14:	0f 2e       	mov	r0, r31
    2a16:	ff e1       	ldi	r31, 0x1F	; 31
    2a18:	ef 2e       	mov	r14, r31
    2a1a:	f1 e1       	ldi	r31, 0x11	; 17
    2a1c:	ff 2e       	mov	r15, r31
    2a1e:	f0 2d       	mov	r31, r0
    2a20:	03 e0       	ldi	r16, 0x03	; 3
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 ec       	ldi	r20, 0xC0	; 192
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	63 e4       	ldi	r22, 0x43	; 67
    2a2c:	72 e0       	ldi	r23, 0x02	; 2
    2a2e:	87 ed       	ldi	r24, 0xD7	; 215
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 10 0c 	call	0x1820	; 0x1820 <xTaskCreate>
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <xTimerCreateTimerTask+0x3a>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	0f 91       	pop	r16
    2a3c:	ff 90       	pop	r15
    2a3e:	ef 90       	pop	r14
    2a40:	08 95       	ret

00002a42 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2a42:	8f 92       	push	r8
    2a44:	9f 92       	push	r9
    2a46:	af 92       	push	r10
    2a48:	bf 92       	push	r11
    2a4a:	cf 92       	push	r12
    2a4c:	df 92       	push	r13
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	27 97       	sbiw	r28, 0x07	; 7
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2a6a:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <xTimerQueue>
    2a6e:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2a72:	30 97       	sbiw	r30, 0x00	; 0
    2a74:	81 f1       	breq	.+96     	; 0x2ad6 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2a76:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a78:	2a 83       	std	Y+2, r18	; 0x02
    2a7a:	3b 83       	std	Y+3, r19	; 0x03
    2a7c:	4c 83       	std	Y+4, r20	; 0x04
    2a7e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a80:	9f 83       	std	Y+7, r25	; 0x07
    2a82:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a84:	66 30       	cpi	r22, 0x06	; 6
    2a86:	f4 f4       	brge	.+60     	; 0x2ac4 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a88:	ee db       	rcall	.-2084   	; 0x2266 <xTaskGetSchedulerState>
    2a8a:	82 30       	cpi	r24, 0x02	; 2
    2a8c:	69 f4       	brne	.+26     	; 0x2aa8 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a8e:	00 e0       	ldi	r16, 0x00	; 0
    2a90:	a7 01       	movw	r20, r14
    2a92:	96 01       	movw	r18, r12
    2a94:	be 01       	movw	r22, r28
    2a96:	6f 5f       	subi	r22, 0xFF	; 255
    2a98:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9a:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2a9e:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2aa2:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    2aa6:	18 c0       	rjmp	.+48     	; 0x2ad8 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2aa8:	00 e0       	ldi	r16, 0x00	; 0
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	a9 01       	movw	r20, r18
    2ab0:	be 01       	movw	r22, r28
    2ab2:	6f 5f       	subi	r22, 0xFF	; 255
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2aba:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2abe:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
    2ac2:	0a c0       	rjmp	.+20     	; 0x2ad8 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	a8 01       	movw	r20, r16
    2ac8:	be 01       	movw	r22, r28
    2aca:	6f 5f       	subi	r22, 0xFF	; 255
    2acc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ace:	cf 01       	movw	r24, r30
    2ad0:	0e 94 e7 05 	call	0xbce	; 0xbce <xQueueGenericSendFromISR>
    2ad4:	01 c0       	rjmp	.+2      	; 0x2ad8 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2ad8:	27 96       	adiw	r28, 0x07	; 7
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	ff 90       	pop	r15
    2aee:	ef 90       	pop	r14
    2af0:	df 90       	pop	r13
    2af2:	cf 90       	pop	r12
    2af4:	bf 90       	pop	r11
    2af6:	af 90       	pop	r10
    2af8:	9f 90       	pop	r9
    2afa:	8f 90       	pop	r8
    2afc:	08 95       	ret

00002afe <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2afe:	8f 92       	push	r8
    2b00:	9f 92       	push	r9
    2b02:	af 92       	push	r10
    2b04:	bf 92       	push	r11
    2b06:	cf 92       	push	r12
    2b08:	df 92       	push	r13
    2b0a:	ef 92       	push	r14
    2b0c:	ff 92       	push	r15
    2b0e:	0f 93       	push	r16
    2b10:	1f 93       	push	r17
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b16:	3b c0       	rjmp	.+118    	; 0x2b8e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b18:	07 80       	ldd	r0, Z+7	; 0x07
    2b1a:	f0 85       	ldd	r31, Z+8	; 0x08
    2b1c:	e0 2d       	mov	r30, r0
    2b1e:	80 80       	ld	r8, Z
    2b20:	91 80       	ldd	r9, Z+1	; 0x01
    2b22:	a2 80       	ldd	r10, Z+2	; 0x02
    2b24:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b26:	c0 85       	ldd	r28, Z+8	; 0x08
    2b28:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b2a:	8e 01       	movw	r16, r28
    2b2c:	0e 5f       	subi	r16, 0xFE	; 254
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	c8 01       	movw	r24, r16
    2b32:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b36:	ec 89       	ldd	r30, Y+20	; 0x14
    2b38:	fd 89       	ldd	r31, Y+21	; 0x15
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b3e:	8e 89       	ldd	r24, Y+22	; 0x16
    2b40:	82 ff       	sbrs	r24, 2
    2b42:	25 c0       	rjmp	.+74     	; 0x2b8e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b44:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b46:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b48:	a8 89       	ldd	r26, Y+16	; 0x10
    2b4a:	b9 89       	ldd	r27, Y+17	; 0x11
    2b4c:	88 0d       	add	r24, r8
    2b4e:	99 1d       	adc	r25, r9
    2b50:	aa 1d       	adc	r26, r10
    2b52:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2b54:	88 16       	cp	r8, r24
    2b56:	99 06       	cpc	r9, r25
    2b58:	aa 06       	cpc	r10, r26
    2b5a:	bb 06       	cpc	r11, r27
    2b5c:	70 f4       	brcc	.+28     	; 0x2b7a <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
    2b60:	9b 83       	std	Y+3, r25	; 0x03
    2b62:	ac 83       	std	Y+4, r26	; 0x04
    2b64:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b66:	db 87       	std	Y+11, r29	; 0x0b
    2b68:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b6a:	b8 01       	movw	r22, r16
    2b6c:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <pxCurrentTimerList>
    2b70:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2b74:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2b78:	0a c0       	rjmp	.+20     	; 0x2b8e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b7a:	c1 2c       	mov	r12, r1
    2b7c:	d1 2c       	mov	r13, r1
    2b7e:	76 01       	movw	r14, r12
    2b80:	00 e0       	ldi	r16, 0x00	; 0
    2b82:	10 e0       	ldi	r17, 0x00	; 0
    2b84:	a5 01       	movw	r20, r10
    2b86:	94 01       	movw	r18, r8
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	5a df       	rcall	.-332    	; 0x2a42 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b8e:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
    2b92:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2b96:	80 81       	ld	r24, Z
    2b98:	81 11       	cpse	r24, r1
    2b9a:	be cf       	rjmp	.-132    	; 0x2b18 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2b9c:	80 91 23 11 	lds	r24, 0x1123	; 0x801123 <pxOverflowTimerList>
    2ba0:	90 91 24 11 	lds	r25, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    2ba4:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <pxCurrentTimerList+0x1>
    2ba8:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2bac:	f0 93 24 11 	sts	0x1124, r31	; 0x801124 <pxOverflowTimerList+0x1>
    2bb0:	e0 93 23 11 	sts	0x1123, r30	; 0x801123 <pxOverflowTimerList>
    }
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	1f 91       	pop	r17
    2bba:	0f 91       	pop	r16
    2bbc:	ff 90       	pop	r15
    2bbe:	ef 90       	pop	r14
    2bc0:	df 90       	pop	r13
    2bc2:	cf 90       	pop	r12
    2bc4:	bf 90       	pop	r11
    2bc6:	af 90       	pop	r10
    2bc8:	9f 90       	pop	r9
    2bca:	8f 90       	pop	r8
    2bcc:	08 95       	ret

00002bce <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2bce:	cf 92       	push	r12
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2bdc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <xTaskGetTickCount>
    2be0:	6b 01       	movw	r12, r22
    2be2:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2be4:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <xLastTime.2436>
    2be8:	90 91 1c 11 	lds	r25, 0x111C	; 0x80111c <xLastTime.2436+0x1>
    2bec:	a0 91 1d 11 	lds	r26, 0x111D	; 0x80111d <xLastTime.2436+0x2>
    2bf0:	b0 91 1e 11 	lds	r27, 0x111E	; 0x80111e <xLastTime.2436+0x3>
    2bf4:	c8 16       	cp	r12, r24
    2bf6:	d9 06       	cpc	r13, r25
    2bf8:	ea 06       	cpc	r14, r26
    2bfa:	fb 06       	cpc	r15, r27
    2bfc:	20 f4       	brcc	.+8      	; 0x2c06 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2bfe:	7f df       	rcall	.-258    	; 0x2afe <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	88 83       	st	Y, r24
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2c06:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2c08:	c0 92 1b 11 	sts	0x111B, r12	; 0x80111b <xLastTime.2436>
    2c0c:	d0 92 1c 11 	sts	0x111C, r13	; 0x80111c <xLastTime.2436+0x1>
    2c10:	e0 92 1d 11 	sts	0x111D, r14	; 0x80111d <xLastTime.2436+0x2>
    2c14:	f0 92 1e 11 	sts	0x111E, r15	; 0x80111e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2c18:	c7 01       	movw	r24, r14
    2c1a:	b6 01       	movw	r22, r12
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	df 90       	pop	r13
    2c26:	cf 90       	pop	r12
    2c28:	08 95       	ret

00002c2a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2c2a:	4f 92       	push	r4
    2c2c:	5f 92       	push	r5
    2c2e:	6f 92       	push	r6
    2c30:	7f 92       	push	r7
    2c32:	8f 92       	push	r8
    2c34:	9f 92       	push	r9
    2c36:	af 92       	push	r10
    2c38:	bf 92       	push	r11
    2c3a:	cf 92       	push	r12
    2c3c:	df 92       	push	r13
    2c3e:	ef 92       	push	r14
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	4b 01       	movw	r8, r22
    2c4c:	5c 01       	movw	r10, r24
    2c4e:	29 01       	movw	r4, r18
    2c50:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c52:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <pxCurrentTimerList>
    2c56:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <pxCurrentTimerList+0x1>
    2c5a:	07 80       	ldd	r0, Z+7	; 0x07
    2c5c:	f0 85       	ldd	r31, Z+8	; 0x08
    2c5e:	e0 2d       	mov	r30, r0
    2c60:	c0 85       	ldd	r28, Z+8	; 0x08
    2c62:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c64:	ce 01       	movw	r24, r28
    2c66:	02 96       	adiw	r24, 0x02	; 2
    2c68:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c6c:	8e 89       	ldd	r24, Y+22	; 0x16
    2c6e:	82 ff       	sbrs	r24, 2
    2c70:	1b c0       	rjmp	.+54     	; 0x2ca8 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c72:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c74:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c76:	68 89       	ldd	r22, Y+16	; 0x10
    2c78:	79 89       	ldd	r23, Y+17	; 0x11
    2c7a:	48 0d       	add	r20, r8
    2c7c:	59 1d       	adc	r21, r9
    2c7e:	6a 1d       	adc	r22, r10
    2c80:	7b 1d       	adc	r23, r11
    2c82:	75 01       	movw	r14, r10
    2c84:	64 01       	movw	r12, r8
    2c86:	93 01       	movw	r18, r6
    2c88:	82 01       	movw	r16, r4
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	47 de       	rcall	.-882    	; 0x291c <prvInsertTimerInActiveList>
    2c8e:	88 23       	and	r24, r24
    2c90:	69 f0       	breq	.+26     	; 0x2cac <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c92:	c1 2c       	mov	r12, r1
    2c94:	d1 2c       	mov	r13, r1
    2c96:	76 01       	movw	r14, r12
    2c98:	00 e0       	ldi	r16, 0x00	; 0
    2c9a:	10 e0       	ldi	r17, 0x00	; 0
    2c9c:	a5 01       	movw	r20, r10
    2c9e:	94 01       	movw	r18, r8
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	ce de       	rcall	.-612    	; 0x2a42 <xTimerGenericCommand>
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ca8:	8e 7f       	andi	r24, 0xFE	; 254
    2caa:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cac:	ec 89       	ldd	r30, Y+20	; 0x14
    2cae:	fd 89       	ldd	r31, Y+21	; 0x15
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	19 95       	eicall
    }
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	df 90       	pop	r13
    2cc2:	cf 90       	pop	r12
    2cc4:	bf 90       	pop	r11
    2cc6:	af 90       	pop	r10
    2cc8:	9f 90       	pop	r9
    2cca:	8f 90       	pop	r8
    2ccc:	7f 90       	pop	r7
    2cce:	6f 90       	pop	r6
    2cd0:	5f 90       	pop	r5
    2cd2:	4f 90       	pop	r4
    2cd4:	08 95       	ret

00002cd6 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2cd6:	8f 92       	push	r8
    2cd8:	9f 92       	push	r9
    2cda:	af 92       	push	r10
    2cdc:	bf 92       	push	r11
    2cde:	cf 92       	push	r12
    2ce0:	df 92       	push	r13
    2ce2:	ef 92       	push	r14
    2ce4:	ff 92       	push	r15
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	1f 92       	push	r1
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	6b 01       	movw	r12, r22
    2cf4:	7c 01       	movw	r14, r24
    2cf6:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2cf8:	0e 94 94 0c 	call	0x1928	; 0x1928 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	66 df       	rcall	.-308    	; 0x2bce <prvSampleTimeNow>
    2d02:	4b 01       	movw	r8, r22
    2d04:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	81 11       	cpse	r24, r1
    2d0a:	2d c0       	rjmp	.+90     	; 0x2d66 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d0c:	11 11       	cpse	r17, r1
    2d0e:	0d c0       	rjmp	.+26     	; 0x2d2a <prvProcessTimerOrBlockTask+0x54>
    2d10:	8c 14       	cp	r8, r12
    2d12:	9d 04       	cpc	r9, r13
    2d14:	ae 04       	cpc	r10, r14
    2d16:	bf 04       	cpc	r11, r15
    2d18:	40 f0       	brcs	.+16     	; 0x2d2a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2d1a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2d1e:	a5 01       	movw	r20, r10
    2d20:	94 01       	movw	r18, r8
    2d22:	c7 01       	movw	r24, r14
    2d24:	b6 01       	movw	r22, r12
    2d26:	81 df       	rcall	.-254    	; 0x2c2a <prvProcessExpiredTimer>
    2d28:	20 c0       	rjmp	.+64     	; 0x2d6a <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2d2a:	11 23       	and	r17, r17
    2d2c:	41 f0       	breq	.+16     	; 0x2d3e <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d2e:	e0 91 23 11 	lds	r30, 0x1123	; 0x801123 <pxOverflowTimerList>
    2d32:	f0 91 24 11 	lds	r31, 0x1124	; 0x801124 <pxOverflowTimerList+0x1>
    2d36:	80 81       	ld	r24, Z
    2d38:	11 e0       	ldi	r17, 0x01	; 1
    2d3a:	81 11       	cpse	r24, r1
    2d3c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2d3e:	b7 01       	movw	r22, r14
    2d40:	a6 01       	movw	r20, r12
    2d42:	48 19       	sub	r20, r8
    2d44:	59 09       	sbc	r21, r9
    2d46:	6a 09       	sbc	r22, r10
    2d48:	7b 09       	sbc	r23, r11
    2d4a:	21 2f       	mov	r18, r17
    2d4c:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2d50:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2d54:	0e 94 b1 06 	call	0xd62	; 0xd62 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2d58:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	05 c0       	rjmp	.+10     	; 0x2d6a <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2d60:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2d66:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xTaskResumeAll>
            }
        }
    }
    2d6a:	0f 90       	pop	r0
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	df 90       	pop	r13
    2d78:	cf 90       	pop	r12
    2d7a:	bf 90       	pop	r11
    2d7c:	af 90       	pop	r10
    2d7e:	9f 90       	pop	r9
    2d80:	8f 90       	pop	r8
    2d82:	08 95       	ret

00002d84 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2d84:	af 92       	push	r10
    2d86:	bf 92       	push	r11
    2d88:	cf 92       	push	r12
    2d8a:	df 92       	push	r13
    2d8c:	ef 92       	push	r14
    2d8e:	ff 92       	push	r15
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	28 97       	sbiw	r28, 0x08	; 8
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2da8:	82 c0       	rjmp	.+260    	; 0x2eae <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	88 23       	and	r24, r24
    2dae:	0c f4       	brge	.+2      	; 0x2db2 <prvProcessReceivedCommands+0x2e>
    2db0:	7e c0       	rjmp	.+252    	; 0x2eae <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2db2:	ae 80       	ldd	r10, Y+6	; 0x06
    2db4:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2db6:	d5 01       	movw	r26, r10
    2db8:	1c 96       	adiw	r26, 0x0c	; 12
    2dba:	8d 91       	ld	r24, X+
    2dbc:	9c 91       	ld	r25, X
    2dbe:	1d 97       	sbiw	r26, 0x0d	; 13
    2dc0:	89 2b       	or	r24, r25
    2dc2:	21 f0       	breq	.+8      	; 0x2dcc <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2dc4:	c5 01       	movw	r24, r10
    2dc6:	02 96       	adiw	r24, 0x02	; 2
    2dc8:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dcc:	ce 01       	movw	r24, r28
    2dce:	08 96       	adiw	r24, 0x08	; 8
    2dd0:	fe de       	rcall	.-516    	; 0x2bce <prvSampleTimeNow>
    2dd2:	8b 01       	movw	r16, r22
    2dd4:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2dd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd8:	0e 2e       	mov	r0, r30
    2dda:	00 0c       	add	r0, r0
    2ddc:	ff 0b       	sbc	r31, r31
    2dde:	ea 30       	cpi	r30, 0x0A	; 10
    2de0:	f1 05       	cpc	r31, r1
    2de2:	08 f0       	brcs	.+2      	; 0x2de6 <prvProcessReceivedCommands+0x62>
    2de4:	64 c0       	rjmp	.+200    	; 0x2eae <prvProcessReceivedCommands+0x12a>
    2de6:	88 27       	eor	r24, r24
    2de8:	ee 58       	subi	r30, 0x8E	; 142
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	8f 4f       	sbci	r24, 0xFF	; 255
    2dee:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2df2:	f5 01       	movw	r30, r10
    2df4:	86 89       	ldd	r24, Z+22	; 0x16
    2df6:	81 60       	ori	r24, 0x01	; 1
    2df8:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2dfa:	ca 80       	ldd	r12, Y+2	; 0x02
    2dfc:	db 80       	ldd	r13, Y+3	; 0x03
    2dfe:	ec 80       	ldd	r14, Y+4	; 0x04
    2e00:	fd 80       	ldd	r15, Y+5	; 0x05
    2e02:	46 85       	ldd	r20, Z+14	; 0x0e
    2e04:	57 85       	ldd	r21, Z+15	; 0x0f
    2e06:	60 89       	ldd	r22, Z+16	; 0x10
    2e08:	71 89       	ldd	r23, Z+17	; 0x11
    2e0a:	4c 0d       	add	r20, r12
    2e0c:	5d 1d       	adc	r21, r13
    2e0e:	6e 1d       	adc	r22, r14
    2e10:	7f 1d       	adc	r23, r15
    2e12:	c5 01       	movw	r24, r10
    2e14:	83 dd       	rcall	.-1274   	; 0x291c <prvInsertTimerInActiveList>
    2e16:	88 23       	and	r24, r24
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <prvProcessReceivedCommands+0x98>
    2e1a:	49 c0       	rjmp	.+146    	; 0x2eae <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e1c:	d5 01       	movw	r26, r10
    2e1e:	54 96       	adiw	r26, 0x14	; 20
    2e20:	ed 91       	ld	r30, X+
    2e22:	fc 91       	ld	r31, X
    2e24:	55 97       	sbiw	r26, 0x15	; 21
    2e26:	c5 01       	movw	r24, r10
    2e28:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e2a:	f5 01       	movw	r30, r10
    2e2c:	86 89       	ldd	r24, Z+22	; 0x16
    2e2e:	82 ff       	sbrs	r24, 2
    2e30:	3e c0       	rjmp	.+124    	; 0x2eae <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2e32:	4a 81       	ldd	r20, Y+2	; 0x02
    2e34:	5b 81       	ldd	r21, Y+3	; 0x03
    2e36:	6c 81       	ldd	r22, Y+4	; 0x04
    2e38:	7d 81       	ldd	r23, Y+5	; 0x05
    2e3a:	86 85       	ldd	r24, Z+14	; 0x0e
    2e3c:	97 85       	ldd	r25, Z+15	; 0x0f
    2e3e:	a0 89       	ldd	r26, Z+16	; 0x10
    2e40:	b1 89       	ldd	r27, Z+17	; 0x11
    2e42:	9a 01       	movw	r18, r20
    2e44:	ab 01       	movw	r20, r22
    2e46:	28 0f       	add	r18, r24
    2e48:	39 1f       	adc	r19, r25
    2e4a:	4a 1f       	adc	r20, r26
    2e4c:	5b 1f       	adc	r21, r27
    2e4e:	c1 2c       	mov	r12, r1
    2e50:	d1 2c       	mov	r13, r1
    2e52:	76 01       	movw	r14, r12
    2e54:	00 e0       	ldi	r16, 0x00	; 0
    2e56:	10 e0       	ldi	r17, 0x00	; 0
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	c5 01       	movw	r24, r10
    2e5c:	f2 dd       	rcall	.-1052   	; 0x2a42 <xTimerGenericCommand>
    2e5e:	27 c0       	rjmp	.+78     	; 0x2eae <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e60:	d5 01       	movw	r26, r10
    2e62:	56 96       	adiw	r26, 0x16	; 22
    2e64:	8c 91       	ld	r24, X
    2e66:	56 97       	sbiw	r26, 0x16	; 22
    2e68:	8e 7f       	andi	r24, 0xFE	; 254
    2e6a:	56 96       	adiw	r26, 0x16	; 22
    2e6c:	8c 93       	st	X, r24
                        break;
    2e6e:	1f c0       	rjmp	.+62     	; 0x2eae <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e70:	f5 01       	movw	r30, r10
    2e72:	86 89       	ldd	r24, Z+22	; 0x16
    2e74:	81 60       	ori	r24, 0x01	; 1
    2e76:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2e78:	4a 81       	ldd	r20, Y+2	; 0x02
    2e7a:	5b 81       	ldd	r21, Y+3	; 0x03
    2e7c:	6c 81       	ldd	r22, Y+4	; 0x04
    2e7e:	7d 81       	ldd	r23, Y+5	; 0x05
    2e80:	46 87       	std	Z+14, r20	; 0x0e
    2e82:	57 87       	std	Z+15, r21	; 0x0f
    2e84:	60 8b       	std	Z+16, r22	; 0x10
    2e86:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2e88:	40 0f       	add	r20, r16
    2e8a:	51 1f       	adc	r21, r17
    2e8c:	62 1f       	adc	r22, r18
    2e8e:	73 1f       	adc	r23, r19
    2e90:	68 01       	movw	r12, r16
    2e92:	79 01       	movw	r14, r18
    2e94:	c5 01       	movw	r24, r10
    2e96:	42 dd       	rcall	.-1404   	; 0x291c <prvInsertTimerInActiveList>
                        break;
    2e98:	0a c0       	rjmp	.+20     	; 0x2eae <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2e9a:	f5 01       	movw	r30, r10
    2e9c:	86 89       	ldd	r24, Z+22	; 0x16
    2e9e:	81 fd       	sbrc	r24, 1
    2ea0:	04 c0       	rjmp	.+8      	; 0x2eaa <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2ea2:	c5 01       	movw	r24, r10
    2ea4:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2eaa:	8e 7f       	andi	r24, 0xFE	; 254
    2eac:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	a9 01       	movw	r20, r18
    2eb4:	be 01       	movw	r22, r28
    2eb6:	6f 5f       	subi	r22, 0xFF	; 255
    2eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eba:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <xTimerQueue>
    2ebe:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <xTimerQueue+0x1>
    2ec2:	0e 94 22 06 	call	0xc44	; 0xc44 <xQueueReceive>
    2ec6:	81 11       	cpse	r24, r1
    2ec8:	70 cf       	rjmp	.-288    	; 0x2daa <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2eca:	28 96       	adiw	r28, 0x08	; 8
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	bf 90       	pop	r11
    2ee8:	af 90       	pop	r10
    2eea:	08 95       	ret

00002eec <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2eec:	08 95       	ret

00002eee <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2eee:	84 b1       	in	r24, 0x04	; 4
    2ef0:	80 68       	ori	r24, 0x80	; 128
    2ef2:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ef4:	85 b1       	in	r24, 0x05	; 5
    2ef6:	80 68       	ori	r24, 0x80	; 128
    2ef8:	85 b9       	out	0x05, r24	; 5
    2efa:	08 95       	ret

00002efc <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2efc:	83 b1       	in	r24, 0x03	; 3
    2efe:	80 68       	ori	r24, 0x80	; 128
    2f00:	83 b9       	out	0x03, r24	; 3
    2f02:	08 95       	ret

00002f04 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2f04:	f4 df       	rcall	.-24     	; 0x2eee <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f06:	2f ef       	ldi	r18, 0xFF	; 255
    2f08:	80 e7       	ldi	r24, 0x70	; 112
    2f0a:	92 e0       	ldi	r25, 0x02	; 2
    2f0c:	21 50       	subi	r18, 0x01	; 1
    2f0e:	80 40       	sbci	r24, 0x00	; 0
    2f10:	90 40       	sbci	r25, 0x00	; 0
    2f12:	e1 f7       	brne	.-8      	; 0x2f0c <vApplicationMallocFailedHook+0x8>
    2f14:	00 c0       	rjmp	.+0      	; 0x2f16 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2f16:	00 00       	nop
    2f18:	f1 df       	rcall	.-30     	; 0x2efc <prvBlinkMainLed>
    2f1a:	f5 cf       	rjmp	.-22     	; 0x2f06 <vApplicationMallocFailedHook+0x2>

00002f1c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2f1c:	e8 df       	rcall	.-48     	; 0x2eee <prvSetMainLedOn>
    2f1e:	2f ef       	ldi	r18, 0xFF	; 255
    2f20:	87 ea       	ldi	r24, 0xA7	; 167
    2f22:	91 e6       	ldi	r25, 0x61	; 97
    2f24:	21 50       	subi	r18, 0x01	; 1
    2f26:	80 40       	sbci	r24, 0x00	; 0
    2f28:	90 40       	sbci	r25, 0x00	; 0
    2f2a:	e1 f7       	brne	.-8      	; 0x2f24 <vApplicationStackOverflowHook+0x8>
    2f2c:	00 c0       	rjmp	.+0      	; 0x2f2e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2f2e:	00 00       	nop
    2f30:	e5 df       	rcall	.-54     	; 0x2efc <prvBlinkMainLed>
    2f32:	f5 cf       	rjmp	.-22     	; 0x2f1e <vApplicationStackOverflowHook+0x2>

00002f34 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	64 97       	sbiw	r28, 0x14	; 20
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
	
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	0e 94 c0 22 	call	0x4580	; 0x4580 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2f52:	0c d3       	rcall	.+1560   	; 0x356c <lora_driver_rn2483FactoryReset>
    2f54:	88 d5       	rcall	.+2832   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    2f56:	9f 93       	push	r25
    2f58:	8f 93       	push	r24
    2f5a:	8b e4       	ldi	r24, 0x4B	; 75
    2f5c:	92 e0       	ldi	r25, 0x02	; 2
    2f5e:	9f 93       	push	r25
    2f60:	8f 93       	push	r24
    2f62:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2f66:	80 d4       	rcall	.+2304   	; 0x3868 <lora_driver_configureToEu868>
    2f68:	7e d5       	rcall	.+2812   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    2f6a:	9f 93       	push	r25
    2f6c:	8f 93       	push	r24
    2f6e:	8e e5       	ldi	r24, 0x5E	; 94
    2f70:	92 e0       	ldi	r25, 0x02	; 2
    2f72:	9f 93       	push	r25
    2f74:	8f 93       	push	r24
    2f76:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	c8 01       	movw	r24, r16
    2f82:	06 d3       	rcall	.+1548   	; 0x3590 <lora_driver_getRn2483Hweui>
    2f84:	70 d5       	rcall	.+2784   	; 0x3a66 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    2f86:	1f 93       	push	r17
    2f88:	0f 93       	push	r16
    2f8a:	9f 93       	push	r25
    2f8c:	8f 93       	push	r24
    2f8e:	87 e7       	ldi	r24, 0x77	; 119
    2f90:	92 e0       	ldi	r25, 0x02	; 2
    2f92:	9f 93       	push	r25
    2f94:	8f 93       	push	r24
    2f96:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    2f9a:	c8 01       	movw	r24, r16
    2f9c:	15 d3       	rcall	.+1578   	; 0x35c8 <lora_driver_setDeviceIdentifier>
    2f9e:	63 d5       	rcall	.+2758   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    2fa0:	9f 93       	push	r25
    2fa2:	8f 93       	push	r24
    2fa4:	1f 93       	push	r17
    2fa6:	0f 93       	push	r16
    2fa8:	8b e8       	ldi	r24, 0x8B	; 139
    2faa:	92 e0       	ldi	r25, 0x02	; 2
    2fac:	9f 93       	push	r25
    2fae:	8f 93       	push	r24
    2fb0:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    2fb4:	a8 01       	movw	r20, r16
    2fb6:	60 ea       	ldi	r22, 0xA0	; 160
    2fb8:	72 e0       	ldi	r23, 0x02	; 2
    2fba:	81 ec       	ldi	r24, 0xC1	; 193
    2fbc:	92 e0       	ldi	r25, 0x02	; 2
    2fbe:	32 d5       	rcall	.+2660   	; 0x3a24 <lora_driver_setOtaaIdentity>
    2fc0:	52 d5       	rcall	.+2724   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    2fc2:	9f 93       	push	r25
    2fc4:	8f 93       	push	r24
    2fc6:	1f 93       	push	r17
    2fc8:	0f 93       	push	r16
    2fca:	80 ea       	ldi	r24, 0xA0	; 160
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	9f 93       	push	r25
    2fd0:	8f 93       	push	r24
    2fd2:	81 ec       	ldi	r24, 0xC1	; 193
    2fd4:	92 e0       	ldi	r25, 0x02	; 2
    2fd6:	9f 93       	push	r25
    2fd8:	8f 93       	push	r24
    2fda:	82 ed       	ldi	r24, 0xD2	; 210
    2fdc:	92 e0       	ldi	r25, 0x02	; 2
    2fde:	9f 93       	push	r25
    2fe0:	8f 93       	push	r24
    2fe2:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    2fe6:	23 d3       	rcall	.+1606   	; 0x362e <lora_driver_saveMac>
    2fe8:	3e d5       	rcall	.+2684   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    2fea:	9f 93       	push	r25
    2fec:	8f 93       	push	r24
    2fee:	88 e0       	ldi	r24, 0x08	; 8
    2ff0:	93 e0       	ldi	r25, 0x03	; 3
    2ff2:	9f 93       	push	r25
    2ff4:	8f 93       	push	r24
    2ff6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	0d d4       	rcall	.+2074   	; 0x3822 <lora_driver_setAdaptiveDataRate>
    3008:	2e d5       	rcall	.+2652   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    300a:	9f 93       	push	r25
    300c:	8f 93       	push	r24
    300e:	87 e1       	ldi	r24, 0x17	; 23
    3010:	93 e0       	ldi	r25, 0x03	; 3
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    301a:	84 ef       	ldi	r24, 0xF4	; 244
    301c:	91 e0       	ldi	r25, 0x01	; 1
    301e:	0c d4       	rcall	.+2072   	; 0x3838 <lora_driver_setReceiveDelay>
    3020:	22 d5       	rcall	.+2628   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    3022:	9f 93       	push	r25
    3024:	8f 93       	push	r24
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	8f 93       	push	r24
    302a:	84 ef       	ldi	r24, 0xF4	; 244
    302c:	8f 93       	push	r24
    302e:	88 e3       	ldi	r24, 0x38	; 56
    3030:	93 e0       	ldi	r25, 0x03	; 3
    3032:	9f 93       	push	r25
    3034:	8f 93       	push	r24
    3036:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3044:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	f8 d2       	rcall	.+1520   	; 0x363a <lora_driver_join>
    304a:	08 2f       	mov	r16, r24
    304c:	0c d5       	rcall	.+2584   	; 0x3a66 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    304e:	9f 93       	push	r25
    3050:	8f 93       	push	r24
    3052:	1f 92       	push	r1
    3054:	1f 93       	push	r17
    3056:	88 e5       	ldi	r24, 0x58	; 88
    3058:	93 e0       	ldi	r25, 0x03	; 3
    305a:	9f 93       	push	r25
    305c:	8f 93       	push	r24
    305e:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	08 30       	cpi	r16, 0x08	; 8
    3070:	59 f0       	breq	.+22     	; 0x3088 <_lora_setup+0x154>
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	0e 94 24 23 	call	0x4648	; 0x4648 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3078:	66 e3       	ldi	r22, 0x36	; 54
    307a:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskDelay>
    3084:	11 50       	subi	r17, 0x01	; 1
    3086:	f9 f6       	brne	.-66     	; 0x3046 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3088:	08 30       	cpi	r16, 0x08	; 8
    308a:	21 f4       	brne	.+8      	; 0x3094 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	0e 94 06 23 	call	0x460c	; 0x460c <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3092:	09 c0       	rjmp	.+18     	; 0x30a6 <_lora_setup+0x172>
    3094:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3096:	0e 94 15 23 	call	0x462a	; 0x462a <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    30a0:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    30a4:	fd cf       	rjmp	.-6      	; 0x30a0 <_lora_setup+0x16c>
    30a6:	64 96       	adiw	r28, 0x14	; 20
    30a8:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <lora_handler_task>:
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <lora_handler_task+0x6>
    30c2:	1f 92       	push	r1
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	42 d2       	rcall	.+1156   	; 0x3550 <lora_driver_resetRn2483>
	vTaskDelay(2);
    30cc:	62 e0       	ldi	r22, 0x02	; 2
    30ce:	70 e0       	ldi	r23, 0x00	; 0
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskDelay>
	lora_driver_resetRn2483(0);
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	3a d2       	rcall	.+1140   	; 0x3550 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    30dc:	66 e9       	ldi	r22, 0x96	; 150
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    30e8:	ec d1       	rcall	.+984    	; 0x34c2 <lora_driver_flushBuffers>

	_lora_setup();
    30ea:	24 df       	rcall	.-440    	; 0x2f34 <_lora_setup>
    30ec:	ed e3       	ldi	r30, 0x3D	; 61

	_uplink_payload.len = 6;
    30ee:	f1 e1       	ldi	r31, 0x11	; 17
    30f0:	86 e0       	ldi	r24, 0x06	; 6
    30f2:	81 83       	std	Z+1, r24	; 0x01
    30f4:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    30f6:	80 83       	st	Z, r24
    30f8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    30fc:	69 83       	std	Y+1, r22	; 0x01
    30fe:	7a 83       	std	Y+2, r23	; 0x02
    3100:	8b 83       	std	Y+3, r24	; 0x03
    3102:	9c 83       	std	Y+4, r25	; 0x04
    3104:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3106:	58 e4       	ldi	r21, 0x48	; 72
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	70 e0       	ldi	r23, 0x00	; 0
    310c:	ce 01       	movw	r24, r28
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <xTaskDelayUntil>
    3114:	ed e3       	ldi	r30, 0x3D	; 61
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3116:	f1 e1       	ldi	r31, 0x11	; 17
    3118:	80 e3       	ldi	r24, 0x30	; 48
    311a:	82 83       	std	Z+2, r24	; 0x02
    311c:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    311e:	83 83       	std	Z+3, r24	; 0x03
    3120:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    3122:	84 83       	std	Z+4, r24	; 0x04
    3124:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    3126:	85 83       	std	Z+5, r24	; 0x05
    3128:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    312a:	86 83       	std	Z+6, r24	; 0x06
    312c:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    312e:	87 83       	std	Z+7, r24	; 0x07
    3130:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3132:	0e 94 36 23 	call	0x466c	; 0x466c <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3136:	6d e3       	ldi	r22, 0x3D	; 61
    3138:	71 e1       	ldi	r23, 0x11	; 17
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	a7 d2       	rcall	.+1358   	; 0x368c <lora_driver_sendUploadMessage>
    313e:	93 d4       	rcall	.+2342   	; 0x3a66 <lora_driver_mapReturnCodeToText>
    3140:	9f 93       	push	r25
    3142:	8f 93       	push	r24
    3144:	88 e7       	ldi	r24, 0x78	; 120
    3146:	93 e0       	ldi	r25, 0x03	; 3
    3148:	9f 93       	push	r25
    314a:	8f 93       	push	r24
    314c:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <printf>
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	d5 cf       	rjmp	.-86     	; 0x3104 <lora_handler_task+0x48>

0000315a <lora_handler_initialise>:
    315a:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
	xTaskCreate(
    3160:	e1 2c       	mov	r14, r1
    3162:	f1 2c       	mov	r15, r1
    3164:	08 2f       	mov	r16, r24
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	48 e8       	ldi	r20, 0x88	; 136
    316c:	51 e0       	ldi	r21, 0x01	; 1
    316e:	6d e8       	ldi	r22, 0x8D	; 141
    3170:	73 e0       	ldi	r23, 0x03	; 3
    3172:	8e e5       	ldi	r24, 0x5E	; 94
    3174:	98 e1       	ldi	r25, 0x18	; 24
    3176:	0e 94 10 0c 	call	0x1820	; 0x1820 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	08 95       	ret

00003182 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	00 d0       	rcall	.+0      	; 0x3188 <task1+0x6>
    3188:	1f 92       	push	r1
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    318e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <xTaskGetTickCount>
    3192:	69 83       	std	Y+1, r22	; 0x01
    3194:	7a 83       	std	Y+2, r23	; 0x02
    3196:	8b 83       	std	Y+3, r24	; 0x03
    3198:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    319a:	4f e1       	ldi	r20, 0x1F	; 31
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	ce 01       	movw	r24, r28
    31a4:	01 96       	adiw	r24, 0x01	; 1
    31a6:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    31aa:	84 e9       	ldi	r24, 0x94	; 148
    31ac:	93 e0       	ldi	r25, 0x03	; 3
    31ae:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <puts>
		PORTA ^= _BV(PA0);
    31b2:	92 b1       	in	r25, 0x02	; 2
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	89 27       	eor	r24, r25
    31b8:	82 b9       	out	0x02, r24	; 2
    31ba:	ef cf       	rjmp	.-34     	; 0x319a <task1+0x18>

000031bc <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <task2+0x6>
    31c2:	1f 92       	push	r1
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    31c8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <xTaskGetTickCount>
    31cc:	69 83       	std	Y+1, r22	; 0x01
    31ce:	7a 83       	std	Y+2, r23	; 0x02
    31d0:	8b 83       	std	Y+3, r24	; 0x03
    31d2:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    31d4:	4e e3       	ldi	r20, 0x3E	; 62
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	60 e0       	ldi	r22, 0x00	; 0
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	ce 01       	movw	r24, r28
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    31e4:	8a e9       	ldi	r24, 0x9A	; 154
    31e6:	93 e0       	ldi	r25, 0x03	; 3
    31e8:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <puts>
		PORTA ^= _BV(PA7);
    31ec:	82 b1       	in	r24, 0x02	; 2
    31ee:	80 58       	subi	r24, 0x80	; 128
    31f0:	82 b9       	out	0x02, r24	; 2
    31f2:	f0 cf       	rjmp	.-32     	; 0x31d4 <task2+0x18>

000031f4 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    31fa:	80 91 73 12 	lds	r24, 0x1273	; 0x801273 <xTestSemaphore>
    31fe:	90 91 74 12 	lds	r25, 0x1274	; 0x801274 <xTestSemaphore+0x1>
    3202:	89 2b       	or	r24, r25
    3204:	89 f4       	brne	.+34     	; 0x3228 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	0e 94 db 05 	call	0xbb6	; 0xbb6 <xQueueCreateMutex>
    320c:	90 93 74 12 	sts	0x1274, r25	; 0x801274 <xTestSemaphore+0x1>
    3210:	80 93 73 12 	sts	0x1273, r24	; 0x801273 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	41 f0       	breq	.+16     	; 0x3228 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    3218:	00 e0       	ldi	r16, 0x00	; 0
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	a9 01       	movw	r20, r18
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericSend>
		}
	}

	xTaskCreate(
    3228:	e1 2c       	mov	r14, r1
    322a:	f1 2c       	mov	r15, r1
    322c:	02 e0       	ldi	r16, 0x02	; 2
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 ec       	ldi	r20, 0xC0	; 192
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	64 e9       	ldi	r22, 0x94	; 148
    3238:	73 e0       	ldi	r23, 0x03	; 3
    323a:	81 ec       	ldi	r24, 0xC1	; 193
    323c:	98 e1       	ldi	r25, 0x18	; 24
    323e:	0e 94 10 0c 	call	0x1820	; 0x1820 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3242:	01 e0       	ldi	r16, 0x01	; 1
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 ec       	ldi	r20, 0xC0	; 192
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	6a e9       	ldi	r22, 0x9A	; 154
    324e:	73 e0       	ldi	r23, 0x03	; 3
    3250:	8e ed       	ldi	r24, 0xDE	; 222
    3252:	98 e1       	ldi	r25, 0x18	; 24
    3254:	0e 94 10 0c 	call	0x1820	; 0x1820 <xTaskCreate>
	,  "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3258:	0f 91       	pop	r16
    325a:	ff 90       	pop	r15
    325c:	ef 90       	pop	r14
    325e:	08 95       	ret

00003260 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3260:	81 b1       	in	r24, 0x01	; 1
    3262:	81 68       	ori	r24, 0x81	; 129
    3264:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    326c:	c3 df       	rcall	.-122    	; 0x31f4 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    326e:	85 e0       	ldi	r24, 0x05	; 5
    3270:	0e 94 72 22 	call	0x44e4	; 0x44e4 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3274:	60 e0       	ldi	r22, 0x00	; 0
    3276:	70 e0       	ldi	r23, 0x00	; 0
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	2a d1       	rcall	.+596    	; 0x34d0 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    327c:	83 e0       	ldi	r24, 0x03	; 3
    327e:	6d cf       	rjmp	.-294    	; 0x315a <lora_handler_initialise>
    3280:	08 95       	ret

00003282 <main>:
    3282:	ee df       	rcall	.-36     	; 0x3260 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3284:	80 ea       	ldi	r24, 0xA0	; 160
    3286:	93 e0       	ldi	r25, 0x03	; 3
    3288:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    328c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vTaskStartScheduler>
    3290:	ff cf       	rjmp	.-2      	; 0x3290 <main+0xe>

00003292 <_serialCallBack>:
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	1f 92       	push	r1
    329c:	1f 92       	push	r1
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	8c 01       	movw	r16, r24
    32a4:	19 82       	std	Y+1, r1	; 0x01
    32a6:	2d c0       	rjmp	.+90     	; 0x3302 <_serialCallBack+0x70>
    32a8:	e0 91 8a 11 	lds	r30, 0x118A	; 0x80118a <rec_buf_inp.2878>
    32ac:	ec 32       	cpi	r30, 0x2C	; 44
    32ae:	50 f4       	brcc	.+20     	; 0x32c4 <_serialCallBack+0x32>
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	8e 0f       	add	r24, r30
    32b4:	80 93 8a 11 	sts	0x118A, r24	; 0x80118a <rec_buf_inp.2878>
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	e4 54       	subi	r30, 0x44	; 68
    32bc:	fe 4e       	sbci	r31, 0xEE	; 238
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	80 83       	st	Z, r24
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <_serialCallBack+0x36>
    32c4:	10 92 8a 11 	sts	0x118A, r1	; 0x80118a <rec_buf_inp.2878>
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	8a 30       	cpi	r24, 0x0A	; 10
    32cc:	d1 f4       	brne	.+52     	; 0x3302 <_serialCallBack+0x70>
    32ce:	40 91 8a 11 	lds	r20, 0x118A	; 0x80118a <rec_buf_inp.2878>
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	fa 01       	movw	r30, r20
    32d6:	e6 54       	subi	r30, 0x46	; 70
    32d8:	fe 4e       	sbci	r31, 0xEE	; 238
    32da:	10 82       	st	Z, r1
    32dc:	41 50       	subi	r20, 0x01	; 1
    32de:	51 09       	sbc	r21, r1
    32e0:	9e 01       	movw	r18, r28
    32e2:	2f 5f       	subi	r18, 0xFF	; 255
    32e4:	3f 4f       	sbci	r19, 0xFF	; 255
    32e6:	6c eb       	ldi	r22, 0xBC	; 188
    32e8:	71 e1       	ldi	r23, 0x11	; 17
    32ea:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <_serialReplyBufferHandle>
    32ee:	90 91 8e 11 	lds	r25, 0x118E	; 0x80118e <_serialReplyBufferHandle+0x1>
    32f2:	0e 94 35 09 	call	0x126a	; 0x126a <xStreamBufferSendFromISR>
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	81 11       	cpse	r24, r1
    32fa:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    32fe:	10 92 8a 11 	sts	0x118A, r1	; 0x80118a <rec_buf_inp.2878>
    3302:	be 01       	movw	r22, r28
    3304:	6e 5f       	subi	r22, 0xFE	; 254
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	c8 01       	movw	r24, r16
    330a:	4f d5       	rcall	.+2718   	; 0x3daa <serial_getByte>
    330c:	88 23       	and	r24, r24
    330e:	61 f2       	breq	.-104    	; 0x32a8 <_serialCallBack+0x16>
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	08 95       	ret

0000331e <_uploadMessage>:
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	8c 01       	movw	r16, r24
    3328:	eb 01       	movw	r28, r22
    332a:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <_serialReplyBufferHandle>
    332e:	90 91 8e 11 	lds	r25, 0x118E	; 0x80118e <_serialReplyBufferHandle+0x1>
    3332:	0e 94 42 08 	call	0x1084	; 0x1084 <xStreamBufferReset>
    3336:	b8 01       	movw	r22, r16
    3338:	83 e5       	ldi	r24, 0x53	; 83
    333a:	91 e1       	ldi	r25, 0x11	; 17
    333c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <strcpy>
    3340:	20 97       	sbiw	r28, 0x00	; 0
    3342:	79 f0       	breq	.+30     	; 0x3362 <_uploadMessage+0x44>
    3344:	e3 e5       	ldi	r30, 0x53	; 83
    3346:	f1 e1       	ldi	r31, 0x11	; 17
    3348:	01 90       	ld	r0, Z+
    334a:	00 20       	and	r0, r0
    334c:	e9 f7       	brne	.-6      	; 0x3348 <_uploadMessage+0x2a>
    334e:	31 97       	sbiw	r30, 0x01	; 1
    3350:	80 e2       	ldi	r24, 0x20	; 32
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
    3358:	be 01       	movw	r22, r28
    335a:	83 e5       	ldi	r24, 0x53	; 83
    335c:	91 e1       	ldi	r25, 0x11	; 17
    335e:	0e 94 6d 27 	call	0x4eda	; 0x4eda <strcat>
    3362:	e3 e5       	ldi	r30, 0x53	; 83
    3364:	f1 e1       	ldi	r31, 0x11	; 17
    3366:	df 01       	movw	r26, r30
    3368:	0d 90       	ld	r0, X+
    336a:	00 20       	and	r0, r0
    336c:	e9 f7       	brne	.-6      	; 0x3368 <_uploadMessage+0x4a>
    336e:	11 97       	sbiw	r26, 0x01	; 1
    3370:	8d e0       	ldi	r24, 0x0D	; 13
    3372:	9a e0       	ldi	r25, 0x0A	; 10
    3374:	11 96       	adiw	r26, 0x01	; 1
    3376:	9c 93       	st	X, r25
    3378:	8e 93       	st	-X, r24
    337a:	12 96       	adiw	r26, 0x02	; 2
    337c:	1c 92       	st	X, r1
    337e:	01 90       	ld	r0, Z+
    3380:	00 20       	and	r0, r0
    3382:	e9 f7       	brne	.-6      	; 0x337e <_uploadMessage+0x60>
    3384:	31 97       	sbiw	r30, 0x01	; 1
    3386:	e3 55       	subi	r30, 0x53	; 83
    3388:	f1 41       	sbci	r31, 0x11	; 17
    338a:	ae 2f       	mov	r26, r30
    338c:	83 e5       	ldi	r24, 0x53	; 83
    338e:	91 e1       	ldi	r25, 0x11	; 17
    3390:	ac 01       	movw	r20, r24
    3392:	6a 2f       	mov	r22, r26
    3394:	80 91 8f 11 	lds	r24, 0x118F	; 0x80118f <_rn2483_serial>
    3398:	90 91 90 11 	lds	r25, 0x1190	; 0x801190 <_rn2483_serial+0x1>
    339c:	b1 d4       	rcall	.+2402   	; 0x3d00 <serial_sendBytes>
    339e:	81 11       	cpse	r24, r1
    33a0:	11 c0       	rjmp	.+34     	; 0x33c4 <_uploadMessage+0xa6>
    33a2:	08 e2       	ldi	r16, 0x28	; 40
    33a4:	15 e0       	ldi	r17, 0x05	; 5
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	4d e2       	ldi	r20, 0x2D	; 45
    33ac:	50 e0       	ldi	r21, 0x00	; 0
    33ae:	66 e1       	ldi	r22, 0x16	; 22
    33b0:	72 e1       	ldi	r23, 0x12	; 18
    33b2:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <_serialReplyBufferHandle>
    33b6:	90 91 8e 11 	lds	r25, 0x118E	; 0x80118e <_serialReplyBufferHandle+0x1>
    33ba:	0e 94 79 09 	call	0x12f2	; 0x12f2 <xStreamBufferReceive>
    33be:	86 e1       	ldi	r24, 0x16	; 22
    33c0:	92 e1       	ldi	r25, 0x12	; 18
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <_uploadMessage+0xaa>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	df 91       	pop	r29
    33ca:	cf 91       	pop	r28
    33cc:	1f 91       	pop	r17
    33ce:	0f 91       	pop	r16
    33d0:	08 95       	ret

000033d2 <_reply2ReturnCode>:
    33d2:	2f 92       	push	r2
    33d4:	3f 92       	push	r3
    33d6:	4f 92       	push	r4
    33d8:	5f 92       	push	r5
    33da:	6f 92       	push	r6
    33dc:	7f 92       	push	r7
    33de:	8f 92       	push	r8
    33e0:	9f 92       	push	r9
    33e2:	af 92       	push	r10
    33e4:	bf 92       	push	r11
    33e6:	cf 92       	push	r12
    33e8:	df 92       	push	r13
    33ea:	ef 92       	push	r14
    33ec:	ff 92       	push	r15
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	5c 01       	movw	r10, r24
    33f8:	fc 01       	movw	r30, r24
    33fa:	01 90       	ld	r0, Z+
    33fc:	00 20       	and	r0, r0
    33fe:	e9 f7       	brne	.-6      	; 0x33fa <_reply2ReturnCode+0x28>
    3400:	31 97       	sbiw	r30, 0x01	; 1
    3402:	6f 01       	movw	r12, r30
    3404:	c8 1a       	sub	r12, r24
    3406:	d9 0a       	sbc	r13, r25
    3408:	5c 2c       	mov	r5, r12
    340a:	0f 2e       	mov	r0, r31
    340c:	fb e4       	ldi	r31, 0x4B	; 75
    340e:	8f 2e       	mov	r8, r31
    3410:	f6 e0       	ldi	r31, 0x06	; 6
    3412:	9f 2e       	mov	r9, r31
    3414:	f0 2d       	mov	r31, r0
    3416:	e1 2c       	mov	r14, r1
    3418:	f1 2c       	mov	r15, r1
    341a:	4c 2c       	mov	r4, r12
    341c:	37 01       	movw	r6, r14
    341e:	f4 01       	movw	r30, r8
    3420:	01 81       	ldd	r16, Z+1	; 0x01
    3422:	12 81       	ldd	r17, Z+2	; 0x02
    3424:	e8 01       	movw	r28, r16
    3426:	09 90       	ld	r0, Y+
    3428:	00 20       	and	r0, r0
    342a:	e9 f7       	brne	.-6      	; 0x3426 <_reply2ReturnCode+0x54>
    342c:	21 97       	sbiw	r28, 0x01	; 1
    342e:	c0 1b       	sub	r28, r16
    3430:	d1 0b       	sbc	r29, r17
    3432:	3c 2e       	mov	r3, r28
    3434:	f9 e0       	ldi	r31, 0x09	; 9
    3436:	cf 16       	cp	r12, r31
    3438:	d1 04       	cpc	r13, r1
    343a:	58 f0       	brcs	.+22     	; 0x3452 <_reply2ReturnCode+0x80>
    343c:	f4 01       	movw	r30, r8
    343e:	20 80       	ld	r2, Z
    3440:	fe e0       	ldi	r31, 0x0E	; 14
    3442:	2f 12       	cpse	r2, r31
    3444:	06 c0       	rjmp	.+12     	; 0x3452 <_reply2ReturnCode+0x80>
    3446:	b8 01       	movw	r22, r16
    3448:	c5 01       	movw	r24, r10
    344a:	0e 94 48 27 	call	0x4e90	; 0x4e90 <strcasestr>
    344e:	89 2b       	or	r24, r25
    3450:	09 f5       	brne	.+66     	; 0x3494 <_reply2ReturnCode+0xc2>
    3452:	44 2d       	mov	r20, r4
    3454:	35 14       	cp	r3, r5
    3456:	08 f4       	brcc	.+2      	; 0x345a <_reply2ReturnCode+0x88>
    3458:	4c 2f       	mov	r20, r28
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	b8 01       	movw	r22, r16
    345e:	c5 01       	movw	r24, r10
    3460:	0e 94 7f 27 	call	0x4efe	; 0x4efe <strncasecmp>
    3464:	89 2b       	or	r24, r25
    3466:	49 f4       	brne	.+18     	; 0x347a <_reply2ReturnCode+0xa8>
    3468:	f3 01       	movw	r30, r6
    346a:	ee 0f       	add	r30, r30
    346c:	ff 1f       	adc	r31, r31
    346e:	e6 0d       	add	r30, r6
    3470:	f7 1d       	adc	r31, r7
    3472:	e5 5b       	subi	r30, 0xB5	; 181
    3474:	f9 4f       	sbci	r31, 0xF9	; 249
    3476:	20 80       	ld	r2, Z
    3478:	0d c0       	rjmp	.+26     	; 0x3494 <_reply2ReturnCode+0xc2>
    347a:	8f ef       	ldi	r24, 0xFF	; 255
    347c:	e8 1a       	sub	r14, r24
    347e:	f8 0a       	sbc	r15, r24
    3480:	e3 e0       	ldi	r30, 0x03	; 3
    3482:	8e 0e       	add	r8, r30
    3484:	91 1c       	adc	r9, r1
    3486:	f1 e1       	ldi	r31, 0x11	; 17
    3488:	ef 16       	cp	r14, r31
    348a:	f1 04       	cpc	r15, r1
    348c:	39 f6       	brne	.-114    	; 0x341c <_reply2ReturnCode+0x4a>
    348e:	68 94       	set
    3490:	22 24       	eor	r2, r2
    3492:	24 f8       	bld	r2, 4
    3494:	82 2d       	mov	r24, r2
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	ff 90       	pop	r15
    34a0:	ef 90       	pop	r14
    34a2:	df 90       	pop	r13
    34a4:	cf 90       	pop	r12
    34a6:	bf 90       	pop	r11
    34a8:	af 90       	pop	r10
    34aa:	9f 90       	pop	r9
    34ac:	8f 90       	pop	r8
    34ae:	7f 90       	pop	r7
    34b0:	6f 90       	pop	r6
    34b2:	5f 90       	pop	r5
    34b4:	4f 90       	pop	r4
    34b6:	3f 90       	pop	r3
    34b8:	2f 90       	pop	r2
    34ba:	08 95       	ret

000034bc <_uploadMessageRc>:
    34bc:	30 df       	rcall	.-416    	; 0x331e <_uploadMessage>
    34be:	89 cf       	rjmp	.-238    	; 0x33d2 <_reply2ReturnCode>
    34c0:	08 95       	ret

000034c2 <lora_driver_flushBuffers>:
    34c2:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <_serialReplyBufferHandle>
    34c6:	90 91 8e 11 	lds	r25, 0x118E	; 0x80118e <_serialReplyBufferHandle+0x1>
    34ca:	0c 94 42 08 	jmp	0x1084	; 0x1084 <xStreamBufferReset>
    34ce:	08 95       	ret

000034d0 <lora_driver_initialise>:
    34d0:	8f 92       	push	r8
    34d2:	9f 92       	push	r9
    34d4:	af 92       	push	r10
    34d6:	cf 92       	push	r12
    34d8:	ef 92       	push	r14
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	c8 2f       	mov	r28, r24
    34e2:	8b 01       	movw	r16, r22
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	88 ec       	ldi	r24, 0xC8	; 200
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 10 08 	call	0x1020	; 0x1020 <xStreamBufferGenericCreate>
    34f2:	90 93 8e 11 	sts	0x118E, r25	; 0x80118e <_serialReplyBufferHandle+0x1>
    34f6:	80 93 8d 11 	sts	0x118D, r24	; 0x80118d <_serialReplyBufferHandle>
    34fa:	10 93 8c 11 	sts	0x118C, r17	; 0x80118c <_downlinkMessageBuffer+0x1>
    34fe:	00 93 8b 11 	sts	0x118B, r16	; 0x80118b <_downlinkMessageBuffer>
    3502:	0f 2e       	mov	r0, r31
    3504:	f9 e4       	ldi	r31, 0x49	; 73
    3506:	8f 2e       	mov	r8, r31
    3508:	f9 e1       	ldi	r31, 0x19	; 25
    350a:	9f 2e       	mov	r9, r31
    350c:	f0 2d       	mov	r31, r0
    350e:	68 94       	set
    3510:	aa 24       	eor	r10, r10
    3512:	a6 f8       	bld	r10, 6
    3514:	68 94       	set
    3516:	cc 24       	eor	r12, r12
    3518:	c6 f8       	bld	r12, 6
    351a:	e1 2c       	mov	r14, r1
    351c:	00 e0       	ldi	r16, 0x00	; 0
    351e:	23 e0       	ldi	r18, 0x03	; 3
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	51 ee       	ldi	r21, 0xE1	; 225
    3524:	60 e0       	ldi	r22, 0x00	; 0
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	8c 2f       	mov	r24, r28
    352a:	1e d3       	rcall	.+1596   	; 0x3b68 <serial_create>
    352c:	90 93 90 11 	sts	0x1190, r25	; 0x801190 <_rn2483_serial+0x1>
    3530:	80 93 8f 11 	sts	0x118F, r24	; 0x80118f <_rn2483_serial>
    3534:	e7 e0       	ldi	r30, 0x07	; 7
    3536:	f1 e0       	ldi	r31, 0x01	; 1
    3538:	80 81       	ld	r24, Z
    353a:	80 61       	ori	r24, 0x10	; 16
    353c:	80 83       	st	Z, r24
    353e:	cf 91       	pop	r28
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	ef 90       	pop	r14
    3546:	cf 90       	pop	r12
    3548:	af 90       	pop	r10
    354a:	9f 90       	pop	r9
    354c:	8f 90       	pop	r8
    354e:	08 95       	ret

00003550 <lora_driver_resetRn2483>:
    3550:	88 23       	and	r24, r24
    3552:	31 f0       	breq	.+12     	; 0x3560 <lora_driver_resetRn2483+0x10>
    3554:	e8 e0       	ldi	r30, 0x08	; 8
    3556:	f1 e0       	ldi	r31, 0x01	; 1
    3558:	80 81       	ld	r24, Z
    355a:	8f 7e       	andi	r24, 0xEF	; 239
    355c:	80 83       	st	Z, r24
    355e:	08 95       	ret
    3560:	e8 e0       	ldi	r30, 0x08	; 8
    3562:	f1 e0       	ldi	r31, 0x01	; 1
    3564:	80 81       	ld	r24, Z
    3566:	80 61       	ori	r24, 0x10	; 16
    3568:	80 83       	st	Z, r24
    356a:	08 95       	ret

0000356c <lora_driver_rn2483FactoryReset>:
    356c:	60 e0       	ldi	r22, 0x00	; 0
    356e:	70 e0       	ldi	r23, 0x00	; 0
    3570:	81 ed       	ldi	r24, 0xD1	; 209
    3572:	93 e0       	ldi	r25, 0x03	; 3
    3574:	d4 de       	rcall	.-600    	; 0x331e <_uploadMessage>
    3576:	e6 e1       	ldi	r30, 0x16	; 22
    3578:	f2 e1       	ldi	r31, 0x12	; 18
    357a:	01 90       	ld	r0, Z+
    357c:	00 20       	and	r0, r0
    357e:	e9 f7       	brne	.-6      	; 0x357a <lora_driver_rn2483FactoryReset+0xe>
    3580:	31 97       	sbiw	r30, 0x01	; 1
    3582:	e6 51       	subi	r30, 0x16	; 22
    3584:	f2 41       	sbci	r31, 0x12	; 18
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	75 97       	sbiw	r30, 0x15	; 21
    358a:	08 f0       	brcs	.+2      	; 0x358e <lora_driver_rn2483FactoryReset+0x22>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	08 95       	ret

00003590 <lora_driver_getRn2483Hweui>:
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	ec 01       	movw	r28, r24
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	82 ee       	ldi	r24, 0xE2	; 226
    359c:	93 e0       	ldi	r25, 0x03	; 3
    359e:	bf de       	rcall	.-642    	; 0x331e <_uploadMessage>
    35a0:	e6 e1       	ldi	r30, 0x16	; 22
    35a2:	f2 e1       	ldi	r31, 0x12	; 18
    35a4:	01 90       	ld	r0, Z+
    35a6:	00 20       	and	r0, r0
    35a8:	e9 f7       	brne	.-6      	; 0x35a4 <lora_driver_getRn2483Hweui+0x14>
    35aa:	e7 52       	subi	r30, 0x27	; 39
    35ac:	f2 41       	sbci	r31, 0x12	; 18
    35ae:	39 f4       	brne	.+14     	; 0x35be <lora_driver_getRn2483Hweui+0x2e>
    35b0:	66 e1       	ldi	r22, 0x16	; 22
    35b2:	72 e1       	ldi	r23, 0x12	; 18
    35b4:	ce 01       	movw	r24, r28
    35b6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <strcpy>
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	02 c0       	rjmp	.+4      	; 0x35c2 <lora_driver_getRn2483Hweui+0x32>
    35be:	18 82       	st	Y, r1
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	df 91       	pop	r29
    35c4:	cf 91       	pop	r28
    35c6:	08 95       	ret

000035c8 <lora_driver_setDeviceIdentifier>:
    35c8:	fc 01       	movw	r30, r24
    35ca:	01 90       	ld	r0, Z+
    35cc:	00 20       	and	r0, r0
    35ce:	e9 f7       	brne	.-6      	; 0x35ca <lora_driver_setDeviceIdentifier+0x2>
    35d0:	9f 01       	movw	r18, r30
    35d2:	21 51       	subi	r18, 0x11	; 17
    35d4:	31 09       	sbc	r19, r1
    35d6:	28 17       	cp	r18, r24
    35d8:	39 07       	cpc	r19, r25
    35da:	29 f4       	brne	.+10     	; 0x35e6 <lora_driver_setDeviceIdentifier+0x1e>
    35dc:	bc 01       	movw	r22, r24
    35de:	80 e1       	ldi	r24, 0x10	; 16
    35e0:	94 e0       	ldi	r25, 0x04	; 4
    35e2:	6c cf       	rjmp	.-296    	; 0x34bc <_uploadMessageRc>
    35e4:	08 95       	ret
    35e6:	89 e0       	ldi	r24, 0x09	; 9
    35e8:	08 95       	ret

000035ea <lora_driver_setApplicationIdentifier>:
    35ea:	fc 01       	movw	r30, r24
    35ec:	01 90       	ld	r0, Z+
    35ee:	00 20       	and	r0, r0
    35f0:	e9 f7       	brne	.-6      	; 0x35ec <lora_driver_setApplicationIdentifier+0x2>
    35f2:	9f 01       	movw	r18, r30
    35f4:	21 51       	subi	r18, 0x11	; 17
    35f6:	31 09       	sbc	r19, r1
    35f8:	28 17       	cp	r18, r24
    35fa:	39 07       	cpc	r19, r25
    35fc:	29 f4       	brne	.+10     	; 0x3608 <lora_driver_setApplicationIdentifier+0x1e>
    35fe:	bc 01       	movw	r22, r24
    3600:	8f e1       	ldi	r24, 0x1F	; 31
    3602:	94 e0       	ldi	r25, 0x04	; 4
    3604:	5b cf       	rjmp	.-330    	; 0x34bc <_uploadMessageRc>
    3606:	08 95       	ret
    3608:	89 e0       	ldi	r24, 0x09	; 9
    360a:	08 95       	ret

0000360c <lora_driver_setApplicationKey>:
    360c:	fc 01       	movw	r30, r24
    360e:	01 90       	ld	r0, Z+
    3610:	00 20       	and	r0, r0
    3612:	e9 f7       	brne	.-6      	; 0x360e <lora_driver_setApplicationKey+0x2>
    3614:	9f 01       	movw	r18, r30
    3616:	21 52       	subi	r18, 0x21	; 33
    3618:	31 09       	sbc	r19, r1
    361a:	28 17       	cp	r18, r24
    361c:	39 07       	cpc	r19, r25
    361e:	29 f4       	brne	.+10     	; 0x362a <lora_driver_setApplicationKey+0x1e>
    3620:	bc 01       	movw	r22, r24
    3622:	8e e2       	ldi	r24, 0x2E	; 46
    3624:	94 e0       	ldi	r25, 0x04	; 4
    3626:	4a cf       	rjmp	.-364    	; 0x34bc <_uploadMessageRc>
    3628:	08 95       	ret
    362a:	89 e0       	ldi	r24, 0x09	; 9
    362c:	08 95       	ret

0000362e <lora_driver_saveMac>:
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	8d e6       	ldi	r24, 0x6D	; 109
    3634:	94 e0       	ldi	r25, 0x04	; 4
    3636:	42 cf       	rjmp	.-380    	; 0x34bc <_uploadMessageRc>
    3638:	08 95       	ret

0000363a <lora_driver_join>:
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	e8 2f       	mov	r30, r24
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	ee 0f       	add	r30, r30
    3644:	ff 1f       	adc	r31, r31
    3646:	e9 5b       	subi	r30, 0xB9	; 185
    3648:	f9 4f       	sbci	r31, 0xF9	; 249
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	86 e7       	ldi	r24, 0x76	; 118
    3650:	94 e0       	ldi	r25, 0x04	; 4
    3652:	34 df       	rcall	.-408    	; 0x34bc <_uploadMessageRc>
    3654:	81 11       	cpse	r24, r1
    3656:	14 c0       	rjmp	.+40     	; 0x3680 <lora_driver_join+0x46>
    3658:	08 e2       	ldi	r16, 0x28	; 40
    365a:	15 e0       	ldi	r17, 0x05	; 5
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	4d e2       	ldi	r20, 0x2D	; 45
    3662:	50 e0       	ldi	r21, 0x00	; 0
    3664:	66 e1       	ldi	r22, 0x16	; 22
    3666:	72 e1       	ldi	r23, 0x12	; 18
    3668:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <_serialReplyBufferHandle>
    366c:	90 91 8e 11 	lds	r25, 0x118E	; 0x80118e <_serialReplyBufferHandle+0x1>
    3670:	0e 94 79 09 	call	0x12f2	; 0x12f2 <xStreamBufferReceive>
    3674:	88 23       	and	r24, r24
    3676:	21 f0       	breq	.+8      	; 0x3680 <lora_driver_join+0x46>
    3678:	86 e1       	ldi	r24, 0x16	; 22
    367a:	92 e1       	ldi	r25, 0x12	; 18
    367c:	aa de       	rcall	.-684    	; 0x33d2 <_reply2ReturnCode>
    367e:	03 c0       	rjmp	.+6      	; 0x3686 <lora_driver_join+0x4c>
    3680:	86 e1       	ldi	r24, 0x16	; 22
    3682:	92 e1       	ldi	r25, 0x12	; 18
    3684:	a6 de       	rcall	.-692    	; 0x33d2 <_reply2ReturnCode>
    3686:	1f 91       	pop	r17
    3688:	0f 91       	pop	r16
    368a:	08 95       	ret

0000368c <lora_driver_sendUploadMessage>:
    368c:	0f 93       	push	r16
    368e:	1f 93       	push	r17
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
    3694:	1f 92       	push	r1
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	db 01       	movw	r26, r22
    369c:	11 96       	adiw	r26, 0x01	; 1
    369e:	9c 91       	ld	r25, X
    36a0:	11 97       	sbiw	r26, 0x01	; 1
    36a2:	95 31       	cpi	r25, 0x15	; 21
    36a4:	08 f0       	brcs	.+2      	; 0x36a8 <lora_driver_sendUploadMessage+0x1c>
    36a6:	b4 c0       	rjmp	.+360    	; 0x3810 <lora_driver_sendUploadMessage+0x184>
    36a8:	99 23       	and	r25, r25
    36aa:	81 f1       	breq	.+96     	; 0x370c <lora_driver_sendUploadMessage+0x80>
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	70 e0       	ldi	r23, 0x00	; 0
    36b0:	27 2f       	mov	r18, r23
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	46 2f       	mov	r20, r22
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	fd 01       	movw	r30, r26
    36ba:	e4 0f       	add	r30, r20
    36bc:	f5 1f       	adc	r31, r21
    36be:	92 81       	ldd	r25, Z+2	; 0x02
    36c0:	92 95       	swap	r25
    36c2:	9f 70       	andi	r25, 0x0F	; 15
    36c4:	9a 30       	cpi	r25, 0x0A	; 10
    36c6:	10 f0       	brcs	.+4      	; 0x36cc <lora_driver_sendUploadMessage+0x40>
    36c8:	99 5c       	subi	r25, 0xC9	; 201
    36ca:	01 c0       	rjmp	.+2      	; 0x36ce <lora_driver_sendUploadMessage+0x42>
    36cc:	90 5d       	subi	r25, 0xD0	; 208
    36ce:	f9 01       	movw	r30, r18
    36d0:	e9 55       	subi	r30, 0x59	; 89
    36d2:	fe 4e       	sbci	r31, 0xEE	; 238
    36d4:	90 83       	st	Z, r25
    36d6:	2f 5f       	subi	r18, 0xFF	; 255
    36d8:	3f 4f       	sbci	r19, 0xFF	; 255
    36da:	fd 01       	movw	r30, r26
    36dc:	e4 0f       	add	r30, r20
    36de:	f5 1f       	adc	r31, r21
    36e0:	92 81       	ldd	r25, Z+2	; 0x02
    36e2:	9f 70       	andi	r25, 0x0F	; 15
    36e4:	49 2f       	mov	r20, r25
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	4a 30       	cpi	r20, 0x0A	; 10
    36ea:	51 05       	cpc	r21, r1
    36ec:	14 f0       	brlt	.+4      	; 0x36f2 <lora_driver_sendUploadMessage+0x66>
    36ee:	99 5c       	subi	r25, 0xC9	; 201
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <lora_driver_sendUploadMessage+0x68>
    36f2:	90 5d       	subi	r25, 0xD0	; 208
    36f4:	f9 01       	movw	r30, r18
    36f6:	e9 55       	subi	r30, 0x59	; 89
    36f8:	fe 4e       	sbci	r31, 0xEE	; 238
    36fa:	90 83       	st	Z, r25
    36fc:	7e 5f       	subi	r23, 0xFE	; 254
    36fe:	6f 5f       	subi	r22, 0xFF	; 255
    3700:	11 96       	adiw	r26, 0x01	; 1
    3702:	9c 91       	ld	r25, X
    3704:	11 97       	sbiw	r26, 0x01	; 1
    3706:	69 17       	cp	r22, r25
    3708:	98 f2       	brcs	.-90     	; 0x36b0 <lora_driver_sendUploadMessage+0x24>
    370a:	01 c0       	rjmp	.+2      	; 0x370e <lora_driver_sendUploadMessage+0x82>
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	e7 2f       	mov	r30, r23
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	e9 55       	subi	r30, 0x59	; 89
    3714:	fe 4e       	sbci	r31, 0xEE	; 238
    3716:	10 82       	st	Z, r1
    3718:	4c 91       	ld	r20, X
    371a:	81 11       	cpse	r24, r1
    371c:	03 c0       	rjmp	.+6      	; 0x3724 <lora_driver_sendUploadMessage+0x98>
    371e:	8f e7       	ldi	r24, 0x7F	; 127
    3720:	94 e0       	ldi	r25, 0x04	; 4
    3722:	02 c0       	rjmp	.+4      	; 0x3728 <lora_driver_sendUploadMessage+0x9c>
    3724:	81 e8       	ldi	r24, 0x81	; 129
    3726:	94 e0       	ldi	r25, 0x04	; 4
    3728:	27 ea       	ldi	r18, 0xA7	; 167
    372a:	31 e1       	ldi	r19, 0x11	; 17
    372c:	3f 93       	push	r19
    372e:	2f 93       	push	r18
    3730:	1f 92       	push	r1
    3732:	4f 93       	push	r20
    3734:	9f 93       	push	r25
    3736:	8f 93       	push	r24
    3738:	85 e8       	ldi	r24, 0x85	; 133
    373a:	94 e0       	ldi	r25, 0x04	; 4
    373c:	9f 93       	push	r25
    373e:	8f 93       	push	r24
    3740:	89 ee       	ldi	r24, 0xE9	; 233
    3742:	91 e1       	ldi	r25, 0x11	; 17
    3744:	9f 93       	push	r25
    3746:	8f 93       	push	r24
    3748:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <sprintf>
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	70 e0       	ldi	r23, 0x00	; 0
    3750:	89 ee       	ldi	r24, 0xE9	; 233
    3752:	91 e1       	ldi	r25, 0x11	; 17
    3754:	b3 de       	rcall	.-666    	; 0x34bc <_uploadMessageRc>
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	81 11       	cpse	r24, r1
    3762:	59 c0       	rjmp	.+178    	; 0x3816 <lora_driver_sendUploadMessage+0x18a>
    3764:	08 e2       	ldi	r16, 0x28	; 40
    3766:	15 e0       	ldi	r17, 0x05	; 5
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	4d e2       	ldi	r20, 0x2D	; 45
    376e:	50 e0       	ldi	r21, 0x00	; 0
    3770:	66 e1       	ldi	r22, 0x16	; 22
    3772:	72 e1       	ldi	r23, 0x12	; 18
    3774:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <_serialReplyBufferHandle>
    3778:	90 91 8e 11 	lds	r25, 0x118E	; 0x80118e <_serialReplyBufferHandle+0x1>
    377c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <xStreamBufferReceive>
    3780:	88 23       	and	r24, r24
    3782:	09 f4       	brne	.+2      	; 0x3786 <lora_driver_sendUploadMessage+0xfa>
    3784:	47 c0       	rjmp	.+142    	; 0x3814 <lora_driver_sendUploadMessage+0x188>
    3786:	86 e1       	ldi	r24, 0x16	; 22
    3788:	92 e1       	ldi	r25, 0x12	; 18
    378a:	23 de       	rcall	.-954    	; 0x33d2 <_reply2ReturnCode>
    378c:	8e 30       	cpi	r24, 0x0E	; 14
    378e:	09 f0       	breq	.+2      	; 0x3792 <lora_driver_sendUploadMessage+0x106>
    3790:	42 c0       	rjmp	.+132    	; 0x3816 <lora_driver_sendUploadMessage+0x18a>
    3792:	87 e0       	ldi	r24, 0x07	; 7
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	80 91 8b 11 	lds	r24, 0x118B	; 0x80118b <_downlinkMessageBuffer>
    379a:	90 91 8c 11 	lds	r25, 0x118C	; 0x80118c <_downlinkMessageBuffer+0x1>
    379e:	89 2b       	or	r24, r25
    37a0:	a9 f1       	breq	.+106    	; 0x380c <lora_driver_sendUploadMessage+0x180>
    37a2:	be 01       	movw	r22, r28
    37a4:	6f 5f       	subi	r22, 0xFF	; 255
    37a6:	7f 4f       	sbci	r23, 0xFF	; 255
    37a8:	86 e1       	ldi	r24, 0x16	; 22
    37aa:	92 e1       	ldi	r25, 0x12	; 18
    37ac:	68 d1       	rcall	.+720    	; 0x3a7e <decode_port_no>
    37ae:	80 93 91 11 	sts	0x1191, r24	; 0x801191 <_downlinkPayload>
    37b2:	e9 81       	ldd	r30, Y+1	; 0x01
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	ea 5e       	subi	r30, 0xEA	; 234
    37b8:	fd 4e       	sbci	r31, 0xED	; 237
    37ba:	df 01       	movw	r26, r30
    37bc:	0d 90       	ld	r0, X+
    37be:	00 20       	and	r0, r0
    37c0:	e9 f7       	brne	.-6      	; 0x37bc <lora_driver_sendUploadMessage+0x130>
    37c2:	11 97       	sbiw	r26, 0x01	; 1
    37c4:	ae 1b       	sub	r26, r30
    37c6:	bf 0b       	sbc	r27, r31
    37c8:	aa 23       	and	r26, r26
    37ca:	91 f0       	breq	.+36     	; 0x37f0 <lora_driver_sendUploadMessage+0x164>
    37cc:	bb 27       	eor	r27, r27
    37ce:	cd 01       	movw	r24, r26
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	9c 01       	movw	r18, r24
    37d4:	12 f4       	brpl	.+4      	; 0x37da <lora_driver_sendUploadMessage+0x14e>
    37d6:	2f 5f       	subi	r18, 0xFF	; 255
    37d8:	3f 4f       	sbci	r19, 0xFF	; 255
    37da:	35 95       	asr	r19
    37dc:	27 95       	ror	r18
    37de:	20 93 92 11 	sts	0x1192, r18	; 0x801192 <_downlinkPayload+0x1>
    37e2:	af 01       	movw	r20, r30
    37e4:	4f 5f       	subi	r20, 0xFF	; 255
    37e6:	5f 4f       	sbci	r21, 0xFF	; 255
    37e8:	64 e1       	ldi	r22, 0x14	; 20
    37ea:	83 e9       	ldi	r24, 0x93	; 147
    37ec:	91 e1       	ldi	r25, 0x11	; 17
    37ee:	73 d1       	rcall	.+742    	; 0x3ad6 <decode_hexadecimal_string_bytes>
    37f0:	01 e0       	ldi	r16, 0x01	; 1
    37f2:	10 e0       	ldi	r17, 0x00	; 0
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	46 e1       	ldi	r20, 0x16	; 22
    37fa:	50 e0       	ldi	r21, 0x00	; 0
    37fc:	61 e9       	ldi	r22, 0x91	; 145
    37fe:	71 e1       	ldi	r23, 0x11	; 17
    3800:	80 91 8b 11 	lds	r24, 0x118B	; 0x80118b <_downlinkMessageBuffer>
    3804:	90 91 8c 11 	lds	r25, 0x118C	; 0x80118c <_downlinkMessageBuffer+0x1>
    3808:	0e 94 72 08 	call	0x10e4	; 0x10e4 <xStreamBufferSend>
    380c:	8e e0       	ldi	r24, 0x0E	; 14
    380e:	03 c0       	rjmp	.+6      	; 0x3816 <lora_driver_sendUploadMessage+0x18a>
    3810:	84 e1       	ldi	r24, 0x14	; 20
    3812:	01 c0       	rjmp	.+2      	; 0x3816 <lora_driver_sendUploadMessage+0x18a>
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	0f 90       	pop	r0
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	1f 91       	pop	r17
    381e:	0f 91       	pop	r16
    3820:	08 95       	ret

00003822 <lora_driver_setAdaptiveDataRate>:
    3822:	81 30       	cpi	r24, 0x01	; 1
    3824:	19 f0       	breq	.+6      	; 0x382c <lora_driver_setAdaptiveDataRate+0xa>
    3826:	65 e9       	ldi	r22, 0x95	; 149
    3828:	74 e0       	ldi	r23, 0x04	; 4
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <lora_driver_setAdaptiveDataRate+0xe>
    382c:	6e e6       	ldi	r22, 0x6E	; 110
    382e:	75 e0       	ldi	r23, 0x05	; 5
    3830:	89 e9       	ldi	r24, 0x99	; 153
    3832:	94 e0       	ldi	r25, 0x04	; 4
    3834:	43 ce       	rjmp	.-890    	; 0x34bc <_uploadMessageRc>
    3836:	08 95       	ret

00003838 <lora_driver_setReceiveDelay>:
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	8a ec       	ldi	r24, 0xCA	; 202
    383e:	94 e0       	ldi	r25, 0x04	; 4
    3840:	9f 93       	push	r25
    3842:	8f 93       	push	r24
    3844:	89 ee       	ldi	r24, 0xE9	; 233
    3846:	91 e1       	ldi	r25, 0x11	; 17
    3848:	9f 93       	push	r25
    384a:	8f 93       	push	r24
    384c:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <sprintf>
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	89 ee       	ldi	r24, 0xE9	; 233
    3856:	91 e1       	ldi	r25, 0x11	; 17
    3858:	31 de       	rcall	.-926    	; 0x34bc <_uploadMessageRc>
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	08 95       	ret

00003868 <lora_driver_configureToEu868>:
    3868:	2f 92       	push	r2
    386a:	3f 92       	push	r3
    386c:	4f 92       	push	r4
    386e:	5f 92       	push	r5
    3870:	6f 92       	push	r6
    3872:	7f 92       	push	r7
    3874:	8f 92       	push	r8
    3876:	9f 92       	push	r9
    3878:	af 92       	push	r10
    387a:	bf 92       	push	r11
    387c:	cf 92       	push	r12
    387e:	df 92       	push	r13
    3880:	ef 92       	push	r14
    3882:	ff 92       	push	r15
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	a0 97       	sbiw	r28, 0x20	; 32
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	67 ef       	ldi	r22, 0xF7	; 247
    389e:	74 e0       	ldi	r23, 0x04	; 4
    38a0:	83 e0       	ldi	r24, 0x03	; 3
    38a2:	95 e0       	ldi	r25, 0x05	; 5
    38a4:	3c dd       	rcall	.-1416   	; 0x331e <_uploadMessage>
    38a6:	95 dd       	rcall	.-1238   	; 0x33d2 <_reply2ReturnCode>
    38a8:	81 11       	cpse	r24, r1
    38aa:	a3 c0       	rjmp	.+326    	; 0x39f2 <lora_driver_configureToEu868+0x18a>
    38ac:	80 e2       	ldi	r24, 0x20	; 32
    38ae:	ee e1       	ldi	r30, 0x1E	; 30
    38b0:	f2 e0       	ldi	r31, 0x02	; 2
    38b2:	de 01       	movw	r26, r28
    38b4:	11 96       	adiw	r26, 0x01	; 1
    38b6:	01 90       	ld	r0, Z+
    38b8:	0d 92       	st	X+, r0
    38ba:	8a 95       	dec	r24
    38bc:	e1 f7       	brne	.-8      	; 0x38b6 <lora_driver_configureToEu868+0x4e>
    38be:	9e 01       	movw	r18, r28
    38c0:	2f 5f       	subi	r18, 0xFF	; 255
    38c2:	3f 4f       	sbci	r19, 0xFF	; 255
    38c4:	69 01       	movw	r12, r18
    38c6:	e1 2c       	mov	r14, r1
    38c8:	f1 2c       	mov	r15, r1
    38ca:	0f 2e       	mov	r0, r31
    38cc:	ff e0       	ldi	r31, 0x0F	; 15
    38ce:	af 2e       	mov	r10, r31
    38d0:	f5 e0       	ldi	r31, 0x05	; 5
    38d2:	bf 2e       	mov	r11, r31
    38d4:	f0 2d       	mov	r31, r0
    38d6:	09 ee       	ldi	r16, 0xE9	; 233
    38d8:	11 e1       	ldi	r17, 0x11	; 17
    38da:	0f 2e       	mov	r0, r31
    38dc:	f8 e2       	ldi	r31, 0x28	; 40
    38de:	4f 2e       	mov	r4, r31
    38e0:	f5 e0       	ldi	r31, 0x05	; 5
    38e2:	5f 2e       	mov	r5, r31
    38e4:	f0 2d       	mov	r31, r0
    38e6:	0f 2e       	mov	r0, r31
    38e8:	ff e3       	ldi	r31, 0x3F	; 63
    38ea:	8f 2e       	mov	r8, r31
    38ec:	f5 e0       	ldi	r31, 0x05	; 5
    38ee:	9f 2e       	mov	r9, r31
    38f0:	f0 2d       	mov	r31, r0
    38f2:	0f 2e       	mov	r0, r31
    38f4:	f9 e5       	ldi	r31, 0x59	; 89
    38f6:	6f 2e       	mov	r6, r31
    38f8:	f5 e0       	ldi	r31, 0x05	; 5
    38fa:	7f 2e       	mov	r7, r31
    38fc:	f0 2d       	mov	r31, r0
    38fe:	3e 2c       	mov	r3, r14
    3900:	2f 2c       	mov	r2, r15
    3902:	ff 92       	push	r15
    3904:	ef 92       	push	r14
    3906:	bf 92       	push	r11
    3908:	af 92       	push	r10
    390a:	1f 93       	push	r17
    390c:	0f 93       	push	r16
    390e:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <sprintf>
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	c8 01       	movw	r24, r16
    3918:	02 dd       	rcall	.-1532   	; 0x331e <_uploadMessage>
    391a:	5b dd       	rcall	.-1354   	; 0x33d2 <_reply2ReturnCode>
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	81 11       	cpse	r24, r1
    392a:	63 c0       	rjmp	.+198    	; 0x39f2 <lora_driver_configureToEu868+0x18a>
    392c:	32 e0       	ldi	r19, 0x02	; 2
    392e:	3e 15       	cp	r19, r14
    3930:	e8 f4       	brcc	.+58     	; 0x396c <lora_driver_configureToEu868+0x104>
    3932:	f6 01       	movw	r30, r12
    3934:	83 81       	ldd	r24, Z+3	; 0x03
    3936:	8f 93       	push	r24
    3938:	82 81       	ldd	r24, Z+2	; 0x02
    393a:	8f 93       	push	r24
    393c:	81 81       	ldd	r24, Z+1	; 0x01
    393e:	8f 93       	push	r24
    3940:	80 81       	ld	r24, Z
    3942:	8f 93       	push	r24
    3944:	ff 92       	push	r15
    3946:	ef 92       	push	r14
    3948:	5f 92       	push	r5
    394a:	4f 92       	push	r4
    394c:	1f 93       	push	r17
    394e:	0f 93       	push	r16
    3950:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <sprintf>
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	c8 01       	movw	r24, r16
    395a:	e1 dc       	rcall	.-1598   	; 0x331e <_uploadMessage>
    395c:	3a dd       	rcall	.-1420   	; 0x33d2 <_reply2ReturnCode>
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	81 11       	cpse	r24, r1
    396a:	43 c0       	rjmp	.+134    	; 0x39f2 <lora_driver_configureToEu868+0x18a>
    396c:	2f 92       	push	r2
    396e:	3f 92       	push	r3
    3970:	9f 92       	push	r9
    3972:	8f 92       	push	r8
    3974:	1f 93       	push	r17
    3976:	0f 93       	push	r16
    3978:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <sprintf>
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	c8 01       	movw	r24, r16
    3982:	cd dc       	rcall	.-1638   	; 0x331e <_uploadMessage>
    3984:	26 dd       	rcall	.-1460   	; 0x33d2 <_reply2ReturnCode>
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	81 11       	cpse	r24, r1
    3994:	2e c0       	rjmp	.+92     	; 0x39f2 <lora_driver_configureToEu868+0x18a>
    3996:	2f 92       	push	r2
    3998:	3f 92       	push	r3
    399a:	7f 92       	push	r7
    399c:	6f 92       	push	r6
    399e:	1f 93       	push	r17
    39a0:	0f 93       	push	r16
    39a2:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <sprintf>
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	c8 01       	movw	r24, r16
    39ac:	b8 dc       	rcall	.-1680   	; 0x331e <_uploadMessage>
    39ae:	11 dd       	rcall	.-1502   	; 0x33d2 <_reply2ReturnCode>
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	81 11       	cpse	r24, r1
    39be:	19 c0       	rjmp	.+50     	; 0x39f2 <lora_driver_configureToEu868+0x18a>
    39c0:	3f ef       	ldi	r19, 0xFF	; 255
    39c2:	e3 1a       	sub	r14, r19
    39c4:	f3 0a       	sbc	r15, r19
    39c6:	84 e0       	ldi	r24, 0x04	; 4
    39c8:	c8 0e       	add	r12, r24
    39ca:	d1 1c       	adc	r13, r1
    39cc:	98 e0       	ldi	r25, 0x08	; 8
    39ce:	e9 16       	cp	r14, r25
    39d0:	f1 04       	cpc	r15, r1
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <lora_driver_configureToEu868+0x16e>
    39d4:	94 cf       	rjmp	.-216    	; 0x38fe <lora_driver_configureToEu868+0x96>
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	70 e0       	ldi	r23, 0x00	; 0
    39da:	81 e7       	ldi	r24, 0x71	; 113
    39dc:	95 e0       	ldi	r25, 0x05	; 5
    39de:	9f dc       	rcall	.-1730   	; 0x331e <_uploadMessage>
    39e0:	f8 dc       	rcall	.-1552   	; 0x33d2 <_reply2ReturnCode>
    39e2:	81 11       	cpse	r24, r1
    39e4:	06 c0       	rjmp	.+12     	; 0x39f2 <lora_driver_configureToEu868+0x18a>
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	70 e0       	ldi	r23, 0x00	; 0
    39ea:	82 e8       	ldi	r24, 0x82	; 130
    39ec:	95 e0       	ldi	r25, 0x05	; 5
    39ee:	97 dc       	rcall	.-1746   	; 0x331e <_uploadMessage>
    39f0:	f0 dc       	rcall	.-1568   	; 0x33d2 <_reply2ReturnCode>
    39f2:	a0 96       	adiw	r28, 0x20	; 32
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	ff 90       	pop	r15
    3a08:	ef 90       	pop	r14
    3a0a:	df 90       	pop	r13
    3a0c:	cf 90       	pop	r12
    3a0e:	bf 90       	pop	r11
    3a10:	af 90       	pop	r10
    3a12:	9f 90       	pop	r9
    3a14:	8f 90       	pop	r8
    3a16:	7f 90       	pop	r7
    3a18:	6f 90       	pop	r6
    3a1a:	5f 90       	pop	r5
    3a1c:	4f 90       	pop	r4
    3a1e:	3f 90       	pop	r3
    3a20:	2f 90       	pop	r2
    3a22:	08 95       	ret

00003a24 <lora_driver_setOtaaIdentity>:
    3a24:	ef 92       	push	r14
    3a26:	ff 92       	push	r15
    3a28:	0f 93       	push	r16
    3a2a:	1f 93       	push	r17
    3a2c:	cf 93       	push	r28
    3a2e:	df 93       	push	r29
    3a30:	ec 01       	movw	r28, r24
    3a32:	8b 01       	movw	r16, r22
    3a34:	7a 01       	movw	r14, r20
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	f4 de       	rcall	.-536    	; 0x3822 <lora_driver_setAdaptiveDataRate>
    3a3a:	81 11       	cpse	r24, r1
    3a3c:	0d c0       	rjmp	.+26     	; 0x3a58 <lora_driver_setOtaaIdentity+0x34>
    3a3e:	ce 01       	movw	r24, r28
    3a40:	d4 dd       	rcall	.-1112   	; 0x35ea <lora_driver_setApplicationIdentifier>
    3a42:	81 11       	cpse	r24, r1
    3a44:	09 c0       	rjmp	.+18     	; 0x3a58 <lora_driver_setOtaaIdentity+0x34>
    3a46:	c8 01       	movw	r24, r16
    3a48:	e1 dd       	rcall	.-1086   	; 0x360c <lora_driver_setApplicationKey>
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	05 c0       	rjmp	.+10     	; 0x3a58 <lora_driver_setOtaaIdentity+0x34>
    3a4e:	c7 01       	movw	r24, r14
    3a50:	bb dd       	rcall	.-1162   	; 0x35c8 <lora_driver_setDeviceIdentifier>
    3a52:	81 11       	cpse	r24, r1
    3a54:	01 c0       	rjmp	.+2      	; 0x3a58 <lora_driver_setOtaaIdentity+0x34>
    3a56:	eb dd       	rcall	.-1066   	; 0x362e <lora_driver_saveMac>
    3a58:	df 91       	pop	r29
    3a5a:	cf 91       	pop	r28
    3a5c:	1f 91       	pop	r17
    3a5e:	0f 91       	pop	r16
    3a60:	ff 90       	pop	r15
    3a62:	ef 90       	pop	r14
    3a64:	08 95       	ret

00003a66 <lora_driver_mapReturnCodeToText>:
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	fc 01       	movw	r30, r24
    3a6a:	ee 0f       	add	r30, r30
    3a6c:	ff 1f       	adc	r31, r31
    3a6e:	8e 0f       	add	r24, r30
    3a70:	9f 1f       	adc	r25, r31
    3a72:	fc 01       	movw	r30, r24
    3a74:	e5 5b       	subi	r30, 0xB5	; 181
    3a76:	f9 4f       	sbci	r31, 0xF9	; 249
    3a78:	81 81       	ldd	r24, Z+1	; 0x01
    3a7a:	92 81       	ldd	r25, Z+2	; 0x02
    3a7c:	08 95       	ret

00003a7e <decode_port_no>:
    3a7e:	dc 01       	movw	r26, r24
    3a80:	00 97       	sbiw	r24, 0x00	; 0
    3a82:	29 f1       	breq	.+74     	; 0x3ace <decode_port_no+0x50>
    3a84:	fb 01       	movw	r30, r22
    3a86:	20 81       	ld	r18, Z
    3a88:	fc 01       	movw	r30, r24
    3a8a:	01 90       	ld	r0, Z+
    3a8c:	00 20       	and	r0, r0
    3a8e:	e9 f7       	brne	.-6      	; 0x3a8a <decode_port_no+0xc>
    3a90:	31 97       	sbiw	r30, 0x01	; 1
    3a92:	e8 1b       	sub	r30, r24
    3a94:	f9 0b       	sbc	r31, r25
    3a96:	82 2f       	mov	r24, r18
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	e8 17       	cp	r30, r24
    3a9c:	f9 07       	cpc	r31, r25
    3a9e:	c8 f0       	brcs	.+50     	; 0x3ad2 <decode_port_no+0x54>
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	08 c0       	rjmp	.+16     	; 0x3ab4 <decode_port_no+0x36>
    3aa4:	88 0f       	add	r24, r24
    3aa6:	38 2f       	mov	r19, r24
    3aa8:	33 0f       	add	r19, r19
    3aaa:	33 0f       	add	r19, r19
    3aac:	83 0f       	add	r24, r19
    3aae:	80 53       	subi	r24, 0x30	; 48
    3ab0:	89 0f       	add	r24, r25
    3ab2:	2f 5f       	subi	r18, 0xFF	; 255
    3ab4:	fd 01       	movw	r30, r26
    3ab6:	e2 0f       	add	r30, r18
    3ab8:	f1 1d       	adc	r31, r1
    3aba:	90 81       	ld	r25, Z
    3abc:	30 ed       	ldi	r19, 0xD0	; 208
    3abe:	39 0f       	add	r19, r25
    3ac0:	3a 30       	cpi	r19, 0x0A	; 10
    3ac2:	10 f4       	brcc	.+4      	; 0x3ac8 <decode_port_no+0x4a>
    3ac4:	91 11       	cpse	r25, r1
    3ac6:	ee cf       	rjmp	.-36     	; 0x3aa4 <decode_port_no+0x26>
    3ac8:	fb 01       	movw	r30, r22
    3aca:	20 83       	st	Z, r18
    3acc:	08 95       	ret
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	08 95       	ret
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	08 95       	ret

00003ad6 <decode_hexadecimal_string_bytes>:
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	dc 01       	movw	r26, r24
    3ae0:	ea 01       	movw	r28, r20
    3ae2:	20 97       	sbiw	r28, 0x00	; 0
    3ae4:	e1 f1       	breq	.+120    	; 0x3b5e <decode_hexadecimal_string_bytes+0x88>
    3ae6:	fa 01       	movw	r30, r20
    3ae8:	01 90       	ld	r0, Z+
    3aea:	00 20       	and	r0, r0
    3aec:	e9 f7       	brne	.-6      	; 0x3ae8 <decode_hexadecimal_string_bytes+0x12>
    3aee:	31 97       	sbiw	r30, 0x01	; 1
    3af0:	e4 1b       	sub	r30, r20
    3af2:	f5 0b       	sbc	r31, r21
    3af4:	32 97       	sbiw	r30, 0x02	; 2
    3af6:	10 f5       	brcc	.+68     	; 0x3b3c <decode_hexadecimal_string_bytes+0x66>
    3af8:	32 c0       	rjmp	.+100    	; 0x3b5e <decode_hexadecimal_string_bytes+0x88>
    3afa:	8d 01       	movw	r16, r26
    3afc:	04 0f       	add	r16, r20
    3afe:	15 1f       	adc	r17, r21
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	ae 01       	movw	r20, r28
    3b04:	42 0f       	add	r20, r18
    3b06:	53 1f       	adc	r21, r19
    3b08:	fa 01       	movw	r30, r20
    3b0a:	90 81       	ld	r25, Z
    3b0c:	91 34       	cpi	r25, 0x41	; 65
    3b0e:	28 f0       	brcs	.+10     	; 0x3b1a <decode_hexadecimal_string_bytes+0x44>
    3b10:	97 53       	subi	r25, 0x37	; 55
    3b12:	59 2f       	mov	r21, r25
    3b14:	52 95       	swap	r21
    3b16:	50 7f       	andi	r21, 0xF0	; 240
    3b18:	03 c0       	rjmp	.+6      	; 0x3b20 <decode_hexadecimal_string_bytes+0x4a>
    3b1a:	59 2f       	mov	r21, r25
    3b1c:	52 95       	swap	r21
    3b1e:	50 7f       	andi	r21, 0xF0	; 240
    3b20:	2c 0f       	add	r18, r28
    3b22:	3d 1f       	adc	r19, r29
    3b24:	f9 01       	movw	r30, r18
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	91 34       	cpi	r25, 0x41	; 65
    3b2a:	10 f0       	brcs	.+4      	; 0x3b30 <decode_hexadecimal_string_bytes+0x5a>
    3b2c:	97 53       	subi	r25, 0x37	; 55
    3b2e:	01 c0       	rjmp	.+2      	; 0x3b32 <decode_hexadecimal_string_bytes+0x5c>
    3b30:	90 53       	subi	r25, 0x30	; 48
    3b32:	95 0f       	add	r25, r21
    3b34:	f8 01       	movw	r30, r16
    3b36:	90 83       	st	Z, r25
    3b38:	8f 5f       	subi	r24, 0xFF	; 255
    3b3a:	01 c0       	rjmp	.+2      	; 0x3b3e <decode_hexadecimal_string_bytes+0x68>
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	28 2f       	mov	r18, r24
    3b40:	22 0f       	add	r18, r18
    3b42:	48 2f       	mov	r20, r24
    3b44:	50 e0       	ldi	r21, 0x00	; 0
    3b46:	fe 01       	movw	r30, r28
    3b48:	01 90       	ld	r0, Z+
    3b4a:	00 20       	and	r0, r0
    3b4c:	e9 f7       	brne	.-6      	; 0x3b48 <decode_hexadecimal_string_bytes+0x72>
    3b4e:	31 97       	sbiw	r30, 0x01	; 1
    3b50:	ec 1b       	sub	r30, r28
    3b52:	fd 0b       	sbc	r31, r29
    3b54:	4e 17       	cp	r20, r30
    3b56:	5f 07       	cpc	r21, r31
    3b58:	10 f4       	brcc	.+4      	; 0x3b5e <decode_hexadecimal_string_bytes+0x88>
    3b5a:	86 13       	cpse	r24, r22
    3b5c:	ce cf       	rjmp	.-100    	; 0x3afa <decode_hexadecimal_string_bytes+0x24>
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	08 95       	ret

00003b68 <serial_create>:
    3b68:	2f 92       	push	r2
    3b6a:	3f 92       	push	r3
    3b6c:	4f 92       	push	r4
    3b6e:	5f 92       	push	r5
    3b70:	6f 92       	push	r6
    3b72:	7f 92       	push	r7
    3b74:	8f 92       	push	r8
    3b76:	9f 92       	push	r9
    3b78:	af 92       	push	r10
    3b7a:	cf 92       	push	r12
    3b7c:	ef 92       	push	r14
    3b7e:	ff 92       	push	r15
    3b80:	0f 93       	push	r16
    3b82:	1f 93       	push	r17
    3b84:	cf 93       	push	r28
    3b86:	df 93       	push	r29
    3b88:	cd b7       	in	r28, 0x3d	; 61
    3b8a:	de b7       	in	r29, 0x3e	; 62
    3b8c:	f8 2e       	mov	r15, r24
    3b8e:	2a 01       	movw	r4, r20
    3b90:	3b 01       	movw	r6, r22
    3b92:	88 e0       	ldi	r24, 0x08	; 8
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	0e 94 13 26 	call	0x4c26	; 0x4c26 <malloc>
    3b9a:	8c 01       	movw	r16, r24
    3b9c:	8f 2d       	mov	r24, r15
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	ee 0f       	add	r30, r30
    3ba4:	ff 1f       	adc	r31, r31
    3ba6:	ed 5b       	subi	r30, 0xBD	; 189
    3ba8:	fd 4e       	sbci	r31, 0xED	; 237
    3baa:	11 83       	std	Z+1, r17	; 0x01
    3bac:	00 83       	st	Z, r16
    3bae:	01 15       	cp	r16, r1
    3bb0:	11 05       	cpc	r17, r1
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <serial_create+0x4e>
    3bb4:	68 c0       	rjmp	.+208    	; 0x3c86 <serial_create+0x11e>
    3bb6:	88 0f       	add	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	fc 01       	movw	r30, r24
    3bbc:	e9 5f       	subi	r30, 0xF9	; 249
    3bbe:	fd 4f       	sbci	r31, 0xFD	; 253
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	d8 01       	movw	r26, r16
    3bc6:	8d 93       	st	X+, r24
    3bc8:	9c 93       	st	X, r25
    3bca:	8c 2d       	mov	r24, r12
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	88 0f       	add	r24, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	0e 94 13 26 	call	0x4c26	; 0x4c26 <malloc>
    3bda:	1c 01       	movw	r2, r24
    3bdc:	86 e0       	ldi	r24, 0x06	; 6
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 13 26 	call	0x4c26	; 0x4c26 <malloc>
    3be4:	7c 01       	movw	r14, r24
    3be6:	4c 2d       	mov	r20, r12
    3be8:	b1 01       	movw	r22, r2
    3bea:	0f d6       	rcall	.+3102   	; 0x480a <fifo_init>
    3bec:	f8 01       	movw	r30, r16
    3bee:	f5 82       	std	Z+5, r15	; 0x05
    3bf0:	e4 82       	std	Z+4, r14	; 0x04
    3bf2:	8a 2d       	mov	r24, r10
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	88 0f       	add	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	88 0f       	add	r24, r24
    3bfc:	99 1f       	adc	r25, r25
    3bfe:	0e 94 13 26 	call	0x4c26	; 0x4c26 <malloc>
    3c02:	1c 01       	movw	r2, r24
    3c04:	86 e0       	ldi	r24, 0x06	; 6
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 13 26 	call	0x4c26	; 0x4c26 <malloc>
    3c0c:	7c 01       	movw	r14, r24
    3c0e:	4a 2d       	mov	r20, r10
    3c10:	b1 01       	movw	r22, r2
    3c12:	fb d5       	rcall	.+3062   	; 0x480a <fifo_init>
    3c14:	d8 01       	movw	r26, r16
    3c16:	13 96       	adiw	r26, 0x03	; 3
    3c18:	fc 92       	st	X, r15
    3c1a:	ee 92       	st	-X, r14
    3c1c:	12 97       	sbiw	r26, 0x02	; 2
    3c1e:	17 96       	adiw	r26, 0x07	; 7
    3c20:	9c 92       	st	X, r9
    3c22:	8e 92       	st	-X, r8
    3c24:	16 97       	sbiw	r26, 0x06	; 6
    3c26:	ff b6       	in	r15, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	ed 91       	ld	r30, X+
    3c2c:	fc 91       	ld	r31, X
    3c2e:	11 97       	sbiw	r26, 0x01	; 1
    3c30:	36 97       	sbiw	r30, 0x06	; 6
    3c32:	80 81       	ld	r24, Z
    3c34:	82 60       	ori	r24, 0x02	; 2
    3c36:	80 83       	st	Z, r24
    3c38:	8d 90       	ld	r8, X+
    3c3a:	9c 90       	ld	r9, X
    3c3c:	c3 01       	movw	r24, r6
    3c3e:	b2 01       	movw	r22, r4
    3c40:	f9 d6       	rcall	.+3570   	; 0x4a34 <__floatunsisf>
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	40 e0       	ldi	r20, 0x00	; 0
    3c48:	51 e4       	ldi	r21, 0x41	; 65
    3c4a:	82 d7       	rcall	.+3844   	; 0x4b50 <__mulsf3>
    3c4c:	9b 01       	movw	r18, r22
    3c4e:	ac 01       	movw	r20, r24
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	74 e2       	ldi	r23, 0x24	; 36
    3c54:	84 e7       	ldi	r24, 0x74	; 116
    3c56:	9b e4       	ldi	r25, 0x4B	; 75
    3c58:	59 d6       	rcall	.+3250   	; 0x490c <__divsf3>
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	5f e3       	ldi	r21, 0x3F	; 63
    3c62:	ef d5       	rcall	.+3038   	; 0x4842 <__subsf3>
    3c64:	bb d6       	rcall	.+3446   	; 0x49dc <__fixunssfsi>
    3c66:	f4 01       	movw	r30, r8
    3c68:	32 97       	sbiw	r30, 0x02	; 2
    3c6a:	60 83       	st	Z, r22
    3c6c:	d8 01       	movw	r26, r16
    3c6e:	ed 91       	ld	r30, X+
    3c70:	fc 91       	ld	r31, X
    3c72:	11 97       	sbiw	r26, 0x01	; 1
    3c74:	35 97       	sbiw	r30, 0x05	; 5
    3c76:	88 e9       	ldi	r24, 0x98	; 152
    3c78:	80 83       	st	Z, r24
    3c7a:	ed 91       	ld	r30, X+
    3c7c:	fc 91       	ld	r31, X
    3c7e:	34 97       	sbiw	r30, 0x04	; 4
    3c80:	86 e0       	ldi	r24, 0x06	; 6
    3c82:	80 83       	st	Z, r24
    3c84:	ff be       	out	0x3f, r15	; 63
    3c86:	c8 01       	movw	r24, r16
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	cf 90       	pop	r12
    3c96:	af 90       	pop	r10
    3c98:	9f 90       	pop	r9
    3c9a:	8f 90       	pop	r8
    3c9c:	7f 90       	pop	r7
    3c9e:	6f 90       	pop	r6
    3ca0:	5f 90       	pop	r5
    3ca2:	4f 90       	pop	r4
    3ca4:	3f 90       	pop	r3
    3ca6:	2f 90       	pop	r2
    3ca8:	08 95       	ret

00003caa <serial_sendByte>:
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	dc 01       	movw	r26, r24
    3cb0:	89 2b       	or	r24, r25
    3cb2:	01 f1       	breq	.+64     	; 0x3cf4 <serial_sendByte+0x4a>
    3cb4:	12 96       	adiw	r26, 0x02	; 2
    3cb6:	ed 91       	ld	r30, X+
    3cb8:	fc 91       	ld	r31, X
    3cba:	13 97       	sbiw	r26, 0x03	; 3
    3cbc:	93 81       	ldd	r25, Z+3	; 0x03
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	25 81       	ldd	r18, Z+5	; 0x05
    3cc2:	98 1b       	sub	r25, r24
    3cc4:	92 23       	and	r25, r18
    3cc6:	84 81       	ldd	r24, Z+4	; 0x04
    3cc8:	98 17       	cp	r25, r24
    3cca:	b1 f0       	breq	.+44     	; 0x3cf8 <serial_sendByte+0x4e>
    3ccc:	83 81       	ldd	r24, Z+3	; 0x03
    3cce:	26 95       	lsr	r18
    3cd0:	28 23       	and	r18, r24
    3cd2:	c0 81       	ld	r28, Z
    3cd4:	d1 81       	ldd	r29, Z+1	; 0x01
    3cd6:	c2 0f       	add	r28, r18
    3cd8:	d1 1d       	adc	r29, r1
    3cda:	68 83       	st	Y, r22
    3cdc:	8f 5f       	subi	r24, 0xFF	; 255
    3cde:	95 81       	ldd	r25, Z+5	; 0x05
    3ce0:	89 23       	and	r24, r25
    3ce2:	83 83       	std	Z+3, r24	; 0x03
    3ce4:	ed 91       	ld	r30, X+
    3ce6:	fc 91       	ld	r31, X
    3ce8:	35 97       	sbiw	r30, 0x05	; 5
    3cea:	80 81       	ld	r24, Z
    3cec:	80 62       	ori	r24, 0x20	; 32
    3cee:	80 83       	st	Z, r24
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	03 c0       	rjmp	.+6      	; 0x3cfa <serial_sendByte+0x50>
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	01 c0       	rjmp	.+2      	; 0x3cfa <serial_sendByte+0x50>
    3cf8:	82 e0       	ldi	r24, 0x02	; 2
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	08 95       	ret

00003d00 <serial_sendBytes>:
    3d00:	ef 92       	push	r14
    3d02:	ff 92       	push	r15
    3d04:	0f 93       	push	r16
    3d06:	1f 93       	push	r17
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	7c 01       	movw	r14, r24
    3d0e:	00 97       	sbiw	r24, 0x00	; 0
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <serial_sendBytes+0x14>
    3d12:	41 c0       	rjmp	.+130    	; 0x3d96 <serial_sendBytes+0x96>
    3d14:	dc 01       	movw	r26, r24
    3d16:	12 96       	adiw	r26, 0x02	; 2
    3d18:	ed 91       	ld	r30, X+
    3d1a:	fc 91       	ld	r31, X
    3d1c:	13 97       	sbiw	r26, 0x03	; 3
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	82 81       	ldd	r24, Z+2	; 0x02
    3d22:	98 1b       	sub	r25, r24
    3d24:	85 81       	ldd	r24, Z+5	; 0x05
    3d26:	98 23       	and	r25, r24
    3d28:	84 81       	ldd	r24, Z+4	; 0x04
    3d2a:	89 1b       	sub	r24, r25
    3d2c:	86 17       	cp	r24, r22
    3d2e:	a8 f1       	brcs	.+106    	; 0x3d9a <serial_sendBytes+0x9a>
    3d30:	66 23       	and	r22, r22
    3d32:	41 f1       	breq	.+80     	; 0x3d84 <serial_sendBytes+0x84>
    3d34:	84 2f       	mov	r24, r20
    3d36:	95 2f       	mov	r25, r21
    3d38:	dc 01       	movw	r26, r24
    3d3a:	61 50       	subi	r22, 0x01	; 1
    3d3c:	46 2f       	mov	r20, r22
    3d3e:	50 e0       	ldi	r21, 0x00	; 0
    3d40:	4f 5f       	subi	r20, 0xFF	; 255
    3d42:	5f 4f       	sbci	r21, 0xFF	; 255
    3d44:	48 0f       	add	r20, r24
    3d46:	59 1f       	adc	r21, r25
    3d48:	e7 01       	movw	r28, r14
    3d4a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d4c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d4e:	93 81       	ldd	r25, Z+3	; 0x03
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	25 81       	ldd	r18, Z+5	; 0x05
    3d54:	98 1b       	sub	r25, r24
    3d56:	92 23       	and	r25, r18
    3d58:	84 81       	ldd	r24, Z+4	; 0x04
    3d5a:	98 17       	cp	r25, r24
    3d5c:	79 f0       	breq	.+30     	; 0x3d7c <serial_sendBytes+0x7c>
    3d5e:	8c 91       	ld	r24, X
    3d60:	93 81       	ldd	r25, Z+3	; 0x03
    3d62:	26 95       	lsr	r18
    3d64:	29 23       	and	r18, r25
    3d66:	60 81       	ld	r22, Z
    3d68:	71 81       	ldd	r23, Z+1	; 0x01
    3d6a:	8b 01       	movw	r16, r22
    3d6c:	02 0f       	add	r16, r18
    3d6e:	11 1d       	adc	r17, r1
    3d70:	e8 01       	movw	r28, r16
    3d72:	88 83       	st	Y, r24
    3d74:	9f 5f       	subi	r25, 0xFF	; 255
    3d76:	85 81       	ldd	r24, Z+5	; 0x05
    3d78:	98 23       	and	r25, r24
    3d7a:	93 83       	std	Z+3, r25	; 0x03
    3d7c:	11 96       	adiw	r26, 0x01	; 1
    3d7e:	a4 17       	cp	r26, r20
    3d80:	b5 07       	cpc	r27, r21
    3d82:	11 f7       	brne	.-60     	; 0x3d48 <serial_sendBytes+0x48>
    3d84:	d7 01       	movw	r26, r14
    3d86:	ed 91       	ld	r30, X+
    3d88:	fc 91       	ld	r31, X
    3d8a:	35 97       	sbiw	r30, 0x05	; 5
    3d8c:	80 81       	ld	r24, Z
    3d8e:	80 62       	ori	r24, 0x20	; 32
    3d90:	80 83       	st	Z, r24
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	03 c0       	rjmp	.+6      	; 0x3d9c <serial_sendBytes+0x9c>
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	01 c0       	rjmp	.+2      	; 0x3d9c <serial_sendBytes+0x9c>
    3d9a:	82 e0       	ldi	r24, 0x02	; 2
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	ff 90       	pop	r15
    3da6:	ef 90       	pop	r14
    3da8:	08 95       	ret

00003daa <serial_getByte>:
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	d1 f0       	breq	.+52     	; 0x3de2 <serial_getByte+0x38>
    3dae:	dc 01       	movw	r26, r24
    3db0:	14 96       	adiw	r26, 0x04	; 4
    3db2:	ed 91       	ld	r30, X+
    3db4:	fc 91       	ld	r31, X
    3db6:	15 97       	sbiw	r26, 0x05	; 5
    3db8:	93 81       	ldd	r25, Z+3	; 0x03
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	98 17       	cp	r25, r24
    3dbe:	99 f0       	breq	.+38     	; 0x3de6 <serial_getByte+0x3c>
    3dc0:	92 81       	ldd	r25, Z+2	; 0x02
    3dc2:	85 81       	ldd	r24, Z+5	; 0x05
    3dc4:	86 95       	lsr	r24
    3dc6:	89 23       	and	r24, r25
    3dc8:	a0 81       	ld	r26, Z
    3dca:	b1 81       	ldd	r27, Z+1	; 0x01
    3dcc:	a8 0f       	add	r26, r24
    3dce:	b1 1d       	adc	r27, r1
    3dd0:	8c 91       	ld	r24, X
    3dd2:	db 01       	movw	r26, r22
    3dd4:	8c 93       	st	X, r24
    3dd6:	9f 5f       	subi	r25, 0xFF	; 255
    3dd8:	85 81       	ldd	r24, Z+5	; 0x05
    3dda:	98 23       	and	r25, r24
    3ddc:	92 83       	std	Z+2, r25	; 0x02
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	08 95       	ret
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	08 95       	ret
    3de6:	83 e0       	ldi	r24, 0x03	; 3
    3de8:	08 95       	ret

00003dea <__vector_25>:
    3dea:	1f 92       	push	r1
    3dec:	0f 92       	push	r0
    3dee:	0f b6       	in	r0, 0x3f	; 63
    3df0:	0f 92       	push	r0
    3df2:	11 24       	eor	r1, r1
    3df4:	0b b6       	in	r0, 0x3b	; 59
    3df6:	0f 92       	push	r0
    3df8:	2f 93       	push	r18
    3dfa:	3f 93       	push	r19
    3dfc:	4f 93       	push	r20
    3dfe:	5f 93       	push	r21
    3e00:	6f 93       	push	r22
    3e02:	7f 93       	push	r23
    3e04:	8f 93       	push	r24
    3e06:	9f 93       	push	r25
    3e08:	af 93       	push	r26
    3e0a:	bf 93       	push	r27
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
    3e10:	ef 93       	push	r30
    3e12:	ff 93       	push	r31
    3e14:	a0 91 43 12 	lds	r26, 0x1243	; 0x801243 <_ser_handle>
    3e18:	b0 91 44 12 	lds	r27, 0x1244	; 0x801244 <_ser_handle+0x1>
    3e1c:	10 97       	sbiw	r26, 0x00	; 0
    3e1e:	11 f1       	breq	.+68     	; 0x3e64 <__vector_25+0x7a>
    3e20:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3e24:	14 96       	adiw	r26, 0x04	; 4
    3e26:	ed 91       	ld	r30, X+
    3e28:	fc 91       	ld	r31, X
    3e2a:	15 97       	sbiw	r26, 0x05	; 5
    3e2c:	93 81       	ldd	r25, Z+3	; 0x03
    3e2e:	82 81       	ldd	r24, Z+2	; 0x02
    3e30:	25 81       	ldd	r18, Z+5	; 0x05
    3e32:	98 1b       	sub	r25, r24
    3e34:	92 23       	and	r25, r18
    3e36:	84 81       	ldd	r24, Z+4	; 0x04
    3e38:	98 17       	cp	r25, r24
    3e3a:	61 f0       	breq	.+24     	; 0x3e54 <__vector_25+0x6a>
    3e3c:	83 81       	ldd	r24, Z+3	; 0x03
    3e3e:	26 95       	lsr	r18
    3e40:	28 23       	and	r18, r24
    3e42:	c0 81       	ld	r28, Z
    3e44:	d1 81       	ldd	r29, Z+1	; 0x01
    3e46:	c2 0f       	add	r28, r18
    3e48:	d1 1d       	adc	r29, r1
    3e4a:	68 83       	st	Y, r22
    3e4c:	8f 5f       	subi	r24, 0xFF	; 255
    3e4e:	95 81       	ldd	r25, Z+5	; 0x05
    3e50:	89 23       	and	r24, r25
    3e52:	83 83       	std	Z+3, r24	; 0x03
    3e54:	16 96       	adiw	r26, 0x06	; 6
    3e56:	ed 91       	ld	r30, X+
    3e58:	fc 91       	ld	r31, X
    3e5a:	17 97       	sbiw	r26, 0x07	; 7
    3e5c:	30 97       	sbiw	r30, 0x00	; 0
    3e5e:	11 f0       	breq	.+4      	; 0x3e64 <__vector_25+0x7a>
    3e60:	cd 01       	movw	r24, r26
    3e62:	19 95       	eicall
    3e64:	ff 91       	pop	r31
    3e66:	ef 91       	pop	r30
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	bf 91       	pop	r27
    3e6e:	af 91       	pop	r26
    3e70:	9f 91       	pop	r25
    3e72:	8f 91       	pop	r24
    3e74:	7f 91       	pop	r23
    3e76:	6f 91       	pop	r22
    3e78:	5f 91       	pop	r21
    3e7a:	4f 91       	pop	r20
    3e7c:	3f 91       	pop	r19
    3e7e:	2f 91       	pop	r18
    3e80:	0f 90       	pop	r0
    3e82:	0b be       	out	0x3b, r0	; 59
    3e84:	0f 90       	pop	r0
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	0f 90       	pop	r0
    3e8a:	1f 90       	pop	r1
    3e8c:	18 95       	reti

00003e8e <__vector_26>:
    3e8e:	1f 92       	push	r1
    3e90:	0f 92       	push	r0
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	0f 92       	push	r0
    3e96:	11 24       	eor	r1, r1
    3e98:	0b b6       	in	r0, 0x3b	; 59
    3e9a:	0f 92       	push	r0
    3e9c:	2f 93       	push	r18
    3e9e:	8f 93       	push	r24
    3ea0:	9f 93       	push	r25
    3ea2:	af 93       	push	r26
    3ea4:	bf 93       	push	r27
    3ea6:	ef 93       	push	r30
    3ea8:	ff 93       	push	r31
    3eaa:	e0 91 43 12 	lds	r30, 0x1243	; 0x801243 <_ser_handle>
    3eae:	f0 91 44 12 	lds	r31, 0x1244	; 0x801244 <_ser_handle+0x1>
    3eb2:	30 97       	sbiw	r30, 0x00	; 0
    3eb4:	b9 f0       	breq	.+46     	; 0x3ee4 <__vector_26+0x56>
    3eb6:	02 80       	ldd	r0, Z+2	; 0x02
    3eb8:	f3 81       	ldd	r31, Z+3	; 0x03
    3eba:	e0 2d       	mov	r30, r0
    3ebc:	93 81       	ldd	r25, Z+3	; 0x03
    3ebe:	82 81       	ldd	r24, Z+2	; 0x02
    3ec0:	98 17       	cp	r25, r24
    3ec2:	b1 f0       	breq	.+44     	; 0x3ef0 <__vector_26+0x62>
    3ec4:	92 81       	ldd	r25, Z+2	; 0x02
    3ec6:	85 81       	ldd	r24, Z+5	; 0x05
    3ec8:	28 2f       	mov	r18, r24
    3eca:	26 95       	lsr	r18
    3ecc:	29 23       	and	r18, r25
    3ece:	a0 81       	ld	r26, Z
    3ed0:	b1 81       	ldd	r27, Z+1	; 0x01
    3ed2:	a2 0f       	add	r26, r18
    3ed4:	b1 1d       	adc	r27, r1
    3ed6:	2c 91       	ld	r18, X
    3ed8:	9f 5f       	subi	r25, 0xFF	; 255
    3eda:	89 23       	and	r24, r25
    3edc:	82 83       	std	Z+2, r24	; 0x02
    3ede:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3ee2:	0b c0       	rjmp	.+22     	; 0x3efa <__vector_26+0x6c>
    3ee4:	e1 ec       	ldi	r30, 0xC1	; 193
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	80 81       	ld	r24, Z
    3eea:	8f 7d       	andi	r24, 0xDF	; 223
    3eec:	80 83       	st	Z, r24
    3eee:	05 c0       	rjmp	.+10     	; 0x3efa <__vector_26+0x6c>
    3ef0:	e1 ec       	ldi	r30, 0xC1	; 193
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	80 81       	ld	r24, Z
    3ef6:	8f 7d       	andi	r24, 0xDF	; 223
    3ef8:	80 83       	st	Z, r24
    3efa:	ff 91       	pop	r31
    3efc:	ef 91       	pop	r30
    3efe:	bf 91       	pop	r27
    3f00:	af 91       	pop	r26
    3f02:	9f 91       	pop	r25
    3f04:	8f 91       	pop	r24
    3f06:	2f 91       	pop	r18
    3f08:	0f 90       	pop	r0
    3f0a:	0b be       	out	0x3b, r0	; 59
    3f0c:	0f 90       	pop	r0
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	0f 90       	pop	r0
    3f12:	1f 90       	pop	r1
    3f14:	18 95       	reti

00003f16 <__vector_36>:
    3f16:	1f 92       	push	r1
    3f18:	0f 92       	push	r0
    3f1a:	0f b6       	in	r0, 0x3f	; 63
    3f1c:	0f 92       	push	r0
    3f1e:	11 24       	eor	r1, r1
    3f20:	0b b6       	in	r0, 0x3b	; 59
    3f22:	0f 92       	push	r0
    3f24:	2f 93       	push	r18
    3f26:	3f 93       	push	r19
    3f28:	4f 93       	push	r20
    3f2a:	5f 93       	push	r21
    3f2c:	6f 93       	push	r22
    3f2e:	7f 93       	push	r23
    3f30:	8f 93       	push	r24
    3f32:	9f 93       	push	r25
    3f34:	af 93       	push	r26
    3f36:	bf 93       	push	r27
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	ef 93       	push	r30
    3f3e:	ff 93       	push	r31
    3f40:	a0 91 45 12 	lds	r26, 0x1245	; 0x801245 <_ser_handle+0x2>
    3f44:	b0 91 46 12 	lds	r27, 0x1246	; 0x801246 <_ser_handle+0x3>
    3f48:	10 97       	sbiw	r26, 0x00	; 0
    3f4a:	11 f1       	breq	.+68     	; 0x3f90 <__vector_36+0x7a>
    3f4c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3f50:	14 96       	adiw	r26, 0x04	; 4
    3f52:	ed 91       	ld	r30, X+
    3f54:	fc 91       	ld	r31, X
    3f56:	15 97       	sbiw	r26, 0x05	; 5
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	82 81       	ldd	r24, Z+2	; 0x02
    3f5c:	25 81       	ldd	r18, Z+5	; 0x05
    3f5e:	98 1b       	sub	r25, r24
    3f60:	92 23       	and	r25, r18
    3f62:	84 81       	ldd	r24, Z+4	; 0x04
    3f64:	98 17       	cp	r25, r24
    3f66:	61 f0       	breq	.+24     	; 0x3f80 <__vector_36+0x6a>
    3f68:	83 81       	ldd	r24, Z+3	; 0x03
    3f6a:	26 95       	lsr	r18
    3f6c:	28 23       	and	r18, r24
    3f6e:	c0 81       	ld	r28, Z
    3f70:	d1 81       	ldd	r29, Z+1	; 0x01
    3f72:	c2 0f       	add	r28, r18
    3f74:	d1 1d       	adc	r29, r1
    3f76:	68 83       	st	Y, r22
    3f78:	8f 5f       	subi	r24, 0xFF	; 255
    3f7a:	95 81       	ldd	r25, Z+5	; 0x05
    3f7c:	89 23       	and	r24, r25
    3f7e:	83 83       	std	Z+3, r24	; 0x03
    3f80:	16 96       	adiw	r26, 0x06	; 6
    3f82:	ed 91       	ld	r30, X+
    3f84:	fc 91       	ld	r31, X
    3f86:	17 97       	sbiw	r26, 0x07	; 7
    3f88:	30 97       	sbiw	r30, 0x00	; 0
    3f8a:	11 f0       	breq	.+4      	; 0x3f90 <__vector_36+0x7a>
    3f8c:	cd 01       	movw	r24, r26
    3f8e:	19 95       	eicall
    3f90:	ff 91       	pop	r31
    3f92:	ef 91       	pop	r30
    3f94:	df 91       	pop	r29
    3f96:	cf 91       	pop	r28
    3f98:	bf 91       	pop	r27
    3f9a:	af 91       	pop	r26
    3f9c:	9f 91       	pop	r25
    3f9e:	8f 91       	pop	r24
    3fa0:	7f 91       	pop	r23
    3fa2:	6f 91       	pop	r22
    3fa4:	5f 91       	pop	r21
    3fa6:	4f 91       	pop	r20
    3fa8:	3f 91       	pop	r19
    3faa:	2f 91       	pop	r18
    3fac:	0f 90       	pop	r0
    3fae:	0b be       	out	0x3b, r0	; 59
    3fb0:	0f 90       	pop	r0
    3fb2:	0f be       	out	0x3f, r0	; 63
    3fb4:	0f 90       	pop	r0
    3fb6:	1f 90       	pop	r1
    3fb8:	18 95       	reti

00003fba <__vector_37>:
    3fba:	1f 92       	push	r1
    3fbc:	0f 92       	push	r0
    3fbe:	0f b6       	in	r0, 0x3f	; 63
    3fc0:	0f 92       	push	r0
    3fc2:	11 24       	eor	r1, r1
    3fc4:	0b b6       	in	r0, 0x3b	; 59
    3fc6:	0f 92       	push	r0
    3fc8:	2f 93       	push	r18
    3fca:	8f 93       	push	r24
    3fcc:	9f 93       	push	r25
    3fce:	af 93       	push	r26
    3fd0:	bf 93       	push	r27
    3fd2:	ef 93       	push	r30
    3fd4:	ff 93       	push	r31
    3fd6:	e0 91 45 12 	lds	r30, 0x1245	; 0x801245 <_ser_handle+0x2>
    3fda:	f0 91 46 12 	lds	r31, 0x1246	; 0x801246 <_ser_handle+0x3>
    3fde:	30 97       	sbiw	r30, 0x00	; 0
    3fe0:	b9 f0       	breq	.+46     	; 0x4010 <__vector_37+0x56>
    3fe2:	02 80       	ldd	r0, Z+2	; 0x02
    3fe4:	f3 81       	ldd	r31, Z+3	; 0x03
    3fe6:	e0 2d       	mov	r30, r0
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	82 81       	ldd	r24, Z+2	; 0x02
    3fec:	98 17       	cp	r25, r24
    3fee:	b1 f0       	breq	.+44     	; 0x401c <__vector_37+0x62>
    3ff0:	92 81       	ldd	r25, Z+2	; 0x02
    3ff2:	85 81       	ldd	r24, Z+5	; 0x05
    3ff4:	28 2f       	mov	r18, r24
    3ff6:	26 95       	lsr	r18
    3ff8:	29 23       	and	r18, r25
    3ffa:	a0 81       	ld	r26, Z
    3ffc:	b1 81       	ldd	r27, Z+1	; 0x01
    3ffe:	a2 0f       	add	r26, r18
    4000:	b1 1d       	adc	r27, r1
    4002:	2c 91       	ld	r18, X
    4004:	9f 5f       	subi	r25, 0xFF	; 255
    4006:	89 23       	and	r24, r25
    4008:	82 83       	std	Z+2, r24	; 0x02
    400a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    400e:	0b c0       	rjmp	.+22     	; 0x4026 <__vector_37+0x6c>
    4010:	e9 ec       	ldi	r30, 0xC9	; 201
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	8f 7d       	andi	r24, 0xDF	; 223
    4018:	80 83       	st	Z, r24
    401a:	05 c0       	rjmp	.+10     	; 0x4026 <__vector_37+0x6c>
    401c:	e9 ec       	ldi	r30, 0xC9	; 201
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	8f 7d       	andi	r24, 0xDF	; 223
    4024:	80 83       	st	Z, r24
    4026:	ff 91       	pop	r31
    4028:	ef 91       	pop	r30
    402a:	bf 91       	pop	r27
    402c:	af 91       	pop	r26
    402e:	9f 91       	pop	r25
    4030:	8f 91       	pop	r24
    4032:	2f 91       	pop	r18
    4034:	0f 90       	pop	r0
    4036:	0b be       	out	0x3b, r0	; 59
    4038:	0f 90       	pop	r0
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	0f 90       	pop	r0
    403e:	1f 90       	pop	r1
    4040:	18 95       	reti

00004042 <__vector_51>:
    4042:	1f 92       	push	r1
    4044:	0f 92       	push	r0
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	0f 92       	push	r0
    404a:	11 24       	eor	r1, r1
    404c:	0b b6       	in	r0, 0x3b	; 59
    404e:	0f 92       	push	r0
    4050:	2f 93       	push	r18
    4052:	3f 93       	push	r19
    4054:	4f 93       	push	r20
    4056:	5f 93       	push	r21
    4058:	6f 93       	push	r22
    405a:	7f 93       	push	r23
    405c:	8f 93       	push	r24
    405e:	9f 93       	push	r25
    4060:	af 93       	push	r26
    4062:	bf 93       	push	r27
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	ef 93       	push	r30
    406a:	ff 93       	push	r31
    406c:	a0 91 47 12 	lds	r26, 0x1247	; 0x801247 <_ser_handle+0x4>
    4070:	b0 91 48 12 	lds	r27, 0x1248	; 0x801248 <_ser_handle+0x5>
    4074:	10 97       	sbiw	r26, 0x00	; 0
    4076:	11 f1       	breq	.+68     	; 0x40bc <__vector_51+0x7a>
    4078:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    407c:	14 96       	adiw	r26, 0x04	; 4
    407e:	ed 91       	ld	r30, X+
    4080:	fc 91       	ld	r31, X
    4082:	15 97       	sbiw	r26, 0x05	; 5
    4084:	93 81       	ldd	r25, Z+3	; 0x03
    4086:	82 81       	ldd	r24, Z+2	; 0x02
    4088:	25 81       	ldd	r18, Z+5	; 0x05
    408a:	98 1b       	sub	r25, r24
    408c:	92 23       	and	r25, r18
    408e:	84 81       	ldd	r24, Z+4	; 0x04
    4090:	98 17       	cp	r25, r24
    4092:	61 f0       	breq	.+24     	; 0x40ac <__vector_51+0x6a>
    4094:	83 81       	ldd	r24, Z+3	; 0x03
    4096:	26 95       	lsr	r18
    4098:	28 23       	and	r18, r24
    409a:	c0 81       	ld	r28, Z
    409c:	d1 81       	ldd	r29, Z+1	; 0x01
    409e:	c2 0f       	add	r28, r18
    40a0:	d1 1d       	adc	r29, r1
    40a2:	68 83       	st	Y, r22
    40a4:	8f 5f       	subi	r24, 0xFF	; 255
    40a6:	95 81       	ldd	r25, Z+5	; 0x05
    40a8:	89 23       	and	r24, r25
    40aa:	83 83       	std	Z+3, r24	; 0x03
    40ac:	16 96       	adiw	r26, 0x06	; 6
    40ae:	ed 91       	ld	r30, X+
    40b0:	fc 91       	ld	r31, X
    40b2:	17 97       	sbiw	r26, 0x07	; 7
    40b4:	30 97       	sbiw	r30, 0x00	; 0
    40b6:	11 f0       	breq	.+4      	; 0x40bc <__vector_51+0x7a>
    40b8:	cd 01       	movw	r24, r26
    40ba:	19 95       	eicall
    40bc:	ff 91       	pop	r31
    40be:	ef 91       	pop	r30
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	bf 91       	pop	r27
    40c6:	af 91       	pop	r26
    40c8:	9f 91       	pop	r25
    40ca:	8f 91       	pop	r24
    40cc:	7f 91       	pop	r23
    40ce:	6f 91       	pop	r22
    40d0:	5f 91       	pop	r21
    40d2:	4f 91       	pop	r20
    40d4:	3f 91       	pop	r19
    40d6:	2f 91       	pop	r18
    40d8:	0f 90       	pop	r0
    40da:	0b be       	out	0x3b, r0	; 59
    40dc:	0f 90       	pop	r0
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	0f 90       	pop	r0
    40e2:	1f 90       	pop	r1
    40e4:	18 95       	reti

000040e6 <__vector_52>:
    40e6:	1f 92       	push	r1
    40e8:	0f 92       	push	r0
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	0f 92       	push	r0
    40ee:	11 24       	eor	r1, r1
    40f0:	0b b6       	in	r0, 0x3b	; 59
    40f2:	0f 92       	push	r0
    40f4:	2f 93       	push	r18
    40f6:	8f 93       	push	r24
    40f8:	9f 93       	push	r25
    40fa:	af 93       	push	r26
    40fc:	bf 93       	push	r27
    40fe:	ef 93       	push	r30
    4100:	ff 93       	push	r31
    4102:	e0 91 47 12 	lds	r30, 0x1247	; 0x801247 <_ser_handle+0x4>
    4106:	f0 91 48 12 	lds	r31, 0x1248	; 0x801248 <_ser_handle+0x5>
    410a:	30 97       	sbiw	r30, 0x00	; 0
    410c:	b9 f0       	breq	.+46     	; 0x413c <__vector_52+0x56>
    410e:	02 80       	ldd	r0, Z+2	; 0x02
    4110:	f3 81       	ldd	r31, Z+3	; 0x03
    4112:	e0 2d       	mov	r30, r0
    4114:	93 81       	ldd	r25, Z+3	; 0x03
    4116:	82 81       	ldd	r24, Z+2	; 0x02
    4118:	98 17       	cp	r25, r24
    411a:	b1 f0       	breq	.+44     	; 0x4148 <__vector_52+0x62>
    411c:	92 81       	ldd	r25, Z+2	; 0x02
    411e:	85 81       	ldd	r24, Z+5	; 0x05
    4120:	28 2f       	mov	r18, r24
    4122:	26 95       	lsr	r18
    4124:	29 23       	and	r18, r25
    4126:	a0 81       	ld	r26, Z
    4128:	b1 81       	ldd	r27, Z+1	; 0x01
    412a:	a2 0f       	add	r26, r18
    412c:	b1 1d       	adc	r27, r1
    412e:	2c 91       	ld	r18, X
    4130:	9f 5f       	subi	r25, 0xFF	; 255
    4132:	89 23       	and	r24, r25
    4134:	82 83       	std	Z+2, r24	; 0x02
    4136:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    413a:	0b c0       	rjmp	.+22     	; 0x4152 <__vector_52+0x6c>
    413c:	e1 ed       	ldi	r30, 0xD1	; 209
    413e:	f0 e0       	ldi	r31, 0x00	; 0
    4140:	80 81       	ld	r24, Z
    4142:	8f 7d       	andi	r24, 0xDF	; 223
    4144:	80 83       	st	Z, r24
    4146:	05 c0       	rjmp	.+10     	; 0x4152 <__vector_52+0x6c>
    4148:	e1 ed       	ldi	r30, 0xD1	; 209
    414a:	f0 e0       	ldi	r31, 0x00	; 0
    414c:	80 81       	ld	r24, Z
    414e:	8f 7d       	andi	r24, 0xDF	; 223
    4150:	80 83       	st	Z, r24
    4152:	ff 91       	pop	r31
    4154:	ef 91       	pop	r30
    4156:	bf 91       	pop	r27
    4158:	af 91       	pop	r26
    415a:	9f 91       	pop	r25
    415c:	8f 91       	pop	r24
    415e:	2f 91       	pop	r18
    4160:	0f 90       	pop	r0
    4162:	0b be       	out	0x3b, r0	; 59
    4164:	0f 90       	pop	r0
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	0f 90       	pop	r0
    416a:	1f 90       	pop	r1
    416c:	18 95       	reti

0000416e <__vector_54>:
    416e:	1f 92       	push	r1
    4170:	0f 92       	push	r0
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	0f 92       	push	r0
    4176:	11 24       	eor	r1, r1
    4178:	0b b6       	in	r0, 0x3b	; 59
    417a:	0f 92       	push	r0
    417c:	2f 93       	push	r18
    417e:	3f 93       	push	r19
    4180:	4f 93       	push	r20
    4182:	5f 93       	push	r21
    4184:	6f 93       	push	r22
    4186:	7f 93       	push	r23
    4188:	8f 93       	push	r24
    418a:	9f 93       	push	r25
    418c:	af 93       	push	r26
    418e:	bf 93       	push	r27
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	ef 93       	push	r30
    4196:	ff 93       	push	r31
    4198:	a0 91 49 12 	lds	r26, 0x1249	; 0x801249 <_ser_handle+0x6>
    419c:	b0 91 4a 12 	lds	r27, 0x124A	; 0x80124a <_ser_handle+0x7>
    41a0:	10 97       	sbiw	r26, 0x00	; 0
    41a2:	11 f1       	breq	.+68     	; 0x41e8 <__vector_54+0x7a>
    41a4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    41a8:	14 96       	adiw	r26, 0x04	; 4
    41aa:	ed 91       	ld	r30, X+
    41ac:	fc 91       	ld	r31, X
    41ae:	15 97       	sbiw	r26, 0x05	; 5
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	82 81       	ldd	r24, Z+2	; 0x02
    41b4:	25 81       	ldd	r18, Z+5	; 0x05
    41b6:	98 1b       	sub	r25, r24
    41b8:	92 23       	and	r25, r18
    41ba:	84 81       	ldd	r24, Z+4	; 0x04
    41bc:	98 17       	cp	r25, r24
    41be:	61 f0       	breq	.+24     	; 0x41d8 <__vector_54+0x6a>
    41c0:	83 81       	ldd	r24, Z+3	; 0x03
    41c2:	26 95       	lsr	r18
    41c4:	28 23       	and	r18, r24
    41c6:	c0 81       	ld	r28, Z
    41c8:	d1 81       	ldd	r29, Z+1	; 0x01
    41ca:	c2 0f       	add	r28, r18
    41cc:	d1 1d       	adc	r29, r1
    41ce:	68 83       	st	Y, r22
    41d0:	8f 5f       	subi	r24, 0xFF	; 255
    41d2:	95 81       	ldd	r25, Z+5	; 0x05
    41d4:	89 23       	and	r24, r25
    41d6:	83 83       	std	Z+3, r24	; 0x03
    41d8:	16 96       	adiw	r26, 0x06	; 6
    41da:	ed 91       	ld	r30, X+
    41dc:	fc 91       	ld	r31, X
    41de:	17 97       	sbiw	r26, 0x07	; 7
    41e0:	30 97       	sbiw	r30, 0x00	; 0
    41e2:	11 f0       	breq	.+4      	; 0x41e8 <__vector_54+0x7a>
    41e4:	cd 01       	movw	r24, r26
    41e6:	19 95       	eicall
    41e8:	ff 91       	pop	r31
    41ea:	ef 91       	pop	r30
    41ec:	df 91       	pop	r29
    41ee:	cf 91       	pop	r28
    41f0:	bf 91       	pop	r27
    41f2:	af 91       	pop	r26
    41f4:	9f 91       	pop	r25
    41f6:	8f 91       	pop	r24
    41f8:	7f 91       	pop	r23
    41fa:	6f 91       	pop	r22
    41fc:	5f 91       	pop	r21
    41fe:	4f 91       	pop	r20
    4200:	3f 91       	pop	r19
    4202:	2f 91       	pop	r18
    4204:	0f 90       	pop	r0
    4206:	0b be       	out	0x3b, r0	; 59
    4208:	0f 90       	pop	r0
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	0f 90       	pop	r0
    420e:	1f 90       	pop	r1
    4210:	18 95       	reti

00004212 <__vector_55>:
    4212:	1f 92       	push	r1
    4214:	0f 92       	push	r0
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	0f 92       	push	r0
    421a:	11 24       	eor	r1, r1
    421c:	0b b6       	in	r0, 0x3b	; 59
    421e:	0f 92       	push	r0
    4220:	2f 93       	push	r18
    4222:	8f 93       	push	r24
    4224:	9f 93       	push	r25
    4226:	af 93       	push	r26
    4228:	bf 93       	push	r27
    422a:	ef 93       	push	r30
    422c:	ff 93       	push	r31
    422e:	e0 91 49 12 	lds	r30, 0x1249	; 0x801249 <_ser_handle+0x6>
    4232:	f0 91 4a 12 	lds	r31, 0x124A	; 0x80124a <_ser_handle+0x7>
    4236:	30 97       	sbiw	r30, 0x00	; 0
    4238:	b9 f0       	breq	.+46     	; 0x4268 <__vector_55+0x56>
    423a:	02 80       	ldd	r0, Z+2	; 0x02
    423c:	f3 81       	ldd	r31, Z+3	; 0x03
    423e:	e0 2d       	mov	r30, r0
    4240:	93 81       	ldd	r25, Z+3	; 0x03
    4242:	82 81       	ldd	r24, Z+2	; 0x02
    4244:	98 17       	cp	r25, r24
    4246:	b1 f0       	breq	.+44     	; 0x4274 <__vector_55+0x62>
    4248:	92 81       	ldd	r25, Z+2	; 0x02
    424a:	85 81       	ldd	r24, Z+5	; 0x05
    424c:	28 2f       	mov	r18, r24
    424e:	26 95       	lsr	r18
    4250:	29 23       	and	r18, r25
    4252:	a0 81       	ld	r26, Z
    4254:	b1 81       	ldd	r27, Z+1	; 0x01
    4256:	a2 0f       	add	r26, r18
    4258:	b1 1d       	adc	r27, r1
    425a:	2c 91       	ld	r18, X
    425c:	9f 5f       	subi	r25, 0xFF	; 255
    425e:	89 23       	and	r24, r25
    4260:	82 83       	std	Z+2, r24	; 0x02
    4262:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4266:	0b c0       	rjmp	.+22     	; 0x427e <__vector_55+0x6c>
    4268:	e1 e3       	ldi	r30, 0x31	; 49
    426a:	f1 e0       	ldi	r31, 0x01	; 1
    426c:	80 81       	ld	r24, Z
    426e:	8f 7d       	andi	r24, 0xDF	; 223
    4270:	80 83       	st	Z, r24
    4272:	05 c0       	rjmp	.+10     	; 0x427e <__vector_55+0x6c>
    4274:	e1 e3       	ldi	r30, 0x31	; 49
    4276:	f1 e0       	ldi	r31, 0x01	; 1
    4278:	80 81       	ld	r24, Z
    427a:	8f 7d       	andi	r24, 0xDF	; 223
    427c:	80 83       	st	Z, r24
    427e:	ff 91       	pop	r31
    4280:	ef 91       	pop	r30
    4282:	bf 91       	pop	r27
    4284:	af 91       	pop	r26
    4286:	9f 91       	pop	r25
    4288:	8f 91       	pop	r24
    428a:	2f 91       	pop	r18
    428c:	0f 90       	pop	r0
    428e:	0b be       	out	0x3b, r0	; 59
    4290:	0f 90       	pop	r0
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	0f 90       	pop	r0
    4296:	1f 90       	pop	r1
    4298:	18 95       	reti

0000429a <usart_getchar>:
    429a:	cf 93       	push	r28
    429c:	df 93       	push	r29
    429e:	1f 92       	push	r1
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	be 01       	movw	r22, r28
    42a6:	6f 5f       	subi	r22, 0xFF	; 255
    42a8:	7f 4f       	sbci	r23, 0xFF	; 255
    42aa:	80 91 4b 12 	lds	r24, 0x124B	; 0x80124b <_com_serial_instance>
    42ae:	90 91 4c 12 	lds	r25, 0x124C	; 0x80124c <_com_serial_instance+0x1>
    42b2:	7b dd       	rcall	.-1290   	; 0x3daa <serial_getByte>
    42b4:	81 11       	cpse	r24, r1
    42b6:	f6 cf       	rjmp	.-20     	; 0x42a4 <usart_getchar+0xa>
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0f 90       	pop	r0
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	08 95       	ret

000042c4 <usart_putchar>:
    42c4:	68 2f       	mov	r22, r24
    42c6:	80 91 4b 12 	lds	r24, 0x124B	; 0x80124b <_com_serial_instance>
    42ca:	90 91 4c 12 	lds	r25, 0x124C	; 0x80124c <_com_serial_instance+0x1>
    42ce:	ed dc       	rcall	.-1574   	; 0x3caa <serial_sendByte>
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	08 95       	ret

000042d6 <stdio_initialise>:
    42d6:	8f 92       	push	r8
    42d8:	9f 92       	push	r9
    42da:	af 92       	push	r10
    42dc:	cf 92       	push	r12
    42de:	ef 92       	push	r14
    42e0:	0f 93       	push	r16
    42e2:	81 2c       	mov	r8, r1
    42e4:	91 2c       	mov	r9, r1
    42e6:	68 94       	set
    42e8:	aa 24       	eor	r10, r10
    42ea:	a7 f8       	bld	r10, 7
    42ec:	68 94       	set
    42ee:	cc 24       	eor	r12, r12
    42f0:	c7 f8       	bld	r12, 7
    42f2:	e1 2c       	mov	r14, r1
    42f4:	00 e0       	ldi	r16, 0x00	; 0
    42f6:	23 e0       	ldi	r18, 0x03	; 3
    42f8:	40 e0       	ldi	r20, 0x00	; 0
    42fa:	51 ee       	ldi	r21, 0xE1	; 225
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	70 e0       	ldi	r23, 0x00	; 0
    4300:	33 dc       	rcall	.-1946   	; 0x3b68 <serial_create>
    4302:	90 93 4c 12 	sts	0x124C, r25	; 0x80124c <_com_serial_instance+0x1>
    4306:	80 93 4b 12 	sts	0x124B, r24	; 0x80124b <_com_serial_instance>
    430a:	e9 e7       	ldi	r30, 0x79	; 121
    430c:	f2 e1       	ldi	r31, 0x12	; 18
    430e:	8f e0       	ldi	r24, 0x0F	; 15
    4310:	92 e0       	ldi	r25, 0x02	; 2
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
    4316:	93 83       	std	Z+3, r25	; 0x03
    4318:	82 83       	std	Z+2, r24	; 0x02
    431a:	0f 91       	pop	r16
    431c:	ef 90       	pop	r14
    431e:	cf 90       	pop	r12
    4320:	af 90       	pop	r10
    4322:	9f 90       	pop	r9
    4324:	8f 90       	pop	r8
    4326:	08 95       	ret

00004328 <_turn_off>:
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	fc 01       	movw	r30, r24
    432c:	ee 0f       	add	r30, r30
    432e:	ff 1f       	adc	r31, r31
    4330:	e8 0f       	add	r30, r24
    4332:	f9 1f       	adc	r31, r25
    4334:	ee 0f       	add	r30, r30
    4336:	ff 1f       	adc	r31, r31
    4338:	e3 5b       	subi	r30, 0xB3	; 179
    433a:	fd 4e       	sbci	r31, 0xED	; 237
    433c:	23 81       	ldd	r18, Z+3	; 0x03
    433e:	21 11       	cpse	r18, r1
    4340:	1f c0       	rjmp	.+62     	; 0x4380 <_turn_off+0x58>
    4342:	9c 01       	movw	r18, r24
    4344:	22 0f       	add	r18, r18
    4346:	33 1f       	adc	r19, r19
    4348:	f9 01       	movw	r30, r18
    434a:	e8 0f       	add	r30, r24
    434c:	f9 1f       	adc	r31, r25
    434e:	ee 0f       	add	r30, r30
    4350:	ff 1f       	adc	r31, r31
    4352:	e3 5b       	subi	r30, 0xB3	; 179
    4354:	fd 4e       	sbci	r31, 0xED	; 237
    4356:	a0 81       	ld	r26, Z
    4358:	b1 81       	ldd	r27, Z+1	; 0x01
    435a:	4c 91       	ld	r20, X
    435c:	f9 01       	movw	r30, r18
    435e:	e8 0f       	add	r30, r24
    4360:	f9 1f       	adc	r31, r25
    4362:	ee 0f       	add	r30, r30
    4364:	ff 1f       	adc	r31, r31
    4366:	e3 5b       	subi	r30, 0xB3	; 179
    4368:	fd 4e       	sbci	r31, 0xED	; 237
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	02 80       	ldd	r0, Z+2	; 0x02
    4370:	02 c0       	rjmp	.+4      	; 0x4376 <_turn_off+0x4e>
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	0a 94       	dec	r0
    4378:	e2 f7       	brpl	.-8      	; 0x4372 <_turn_off+0x4a>
    437a:	84 2b       	or	r24, r20
    437c:	8c 93       	st	X, r24
    437e:	08 95       	ret
    4380:	fc 01       	movw	r30, r24
    4382:	ee 0f       	add	r30, r30
    4384:	ff 1f       	adc	r31, r31
    4386:	df 01       	movw	r26, r30
    4388:	a8 0f       	add	r26, r24
    438a:	b9 1f       	adc	r27, r25
    438c:	aa 0f       	add	r26, r26
    438e:	bb 1f       	adc	r27, r27
    4390:	a3 5b       	subi	r26, 0xB3	; 179
    4392:	bd 4e       	sbci	r27, 0xED	; 237
    4394:	0d 90       	ld	r0, X+
    4396:	bc 91       	ld	r27, X
    4398:	a0 2d       	mov	r26, r0
    439a:	2c 91       	ld	r18, X
    439c:	e8 0f       	add	r30, r24
    439e:	f9 1f       	adc	r31, r25
    43a0:	ee 0f       	add	r30, r30
    43a2:	ff 1f       	adc	r31, r31
    43a4:	e3 5b       	subi	r30, 0xB3	; 179
    43a6:	fd 4e       	sbci	r31, 0xED	; 237
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	02 80       	ldd	r0, Z+2	; 0x02
    43ae:	02 c0       	rjmp	.+4      	; 0x43b4 <_turn_off+0x8c>
    43b0:	88 0f       	add	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	0a 94       	dec	r0
    43b6:	e2 f7       	brpl	.-8      	; 0x43b0 <_turn_off+0x88>
    43b8:	80 95       	com	r24
    43ba:	82 23       	and	r24, r18
    43bc:	8c 93       	st	X, r24
    43be:	08 95       	ret

000043c0 <_turn_on>:
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	fc 01       	movw	r30, r24
    43c4:	ee 0f       	add	r30, r30
    43c6:	ff 1f       	adc	r31, r31
    43c8:	e8 0f       	add	r30, r24
    43ca:	f9 1f       	adc	r31, r25
    43cc:	ee 0f       	add	r30, r30
    43ce:	ff 1f       	adc	r31, r31
    43d0:	e3 5b       	subi	r30, 0xB3	; 179
    43d2:	fd 4e       	sbci	r31, 0xED	; 237
    43d4:	23 81       	ldd	r18, Z+3	; 0x03
    43d6:	21 11       	cpse	r18, r1
    43d8:	20 c0       	rjmp	.+64     	; 0x441a <_turn_on+0x5a>
    43da:	9c 01       	movw	r18, r24
    43dc:	22 0f       	add	r18, r18
    43de:	33 1f       	adc	r19, r19
    43e0:	f9 01       	movw	r30, r18
    43e2:	e8 0f       	add	r30, r24
    43e4:	f9 1f       	adc	r31, r25
    43e6:	ee 0f       	add	r30, r30
    43e8:	ff 1f       	adc	r31, r31
    43ea:	e3 5b       	subi	r30, 0xB3	; 179
    43ec:	fd 4e       	sbci	r31, 0xED	; 237
    43ee:	a0 81       	ld	r26, Z
    43f0:	b1 81       	ldd	r27, Z+1	; 0x01
    43f2:	4c 91       	ld	r20, X
    43f4:	f9 01       	movw	r30, r18
    43f6:	e8 0f       	add	r30, r24
    43f8:	f9 1f       	adc	r31, r25
    43fa:	ee 0f       	add	r30, r30
    43fc:	ff 1f       	adc	r31, r31
    43fe:	e3 5b       	subi	r30, 0xB3	; 179
    4400:	fd 4e       	sbci	r31, 0xED	; 237
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	02 80       	ldd	r0, Z+2	; 0x02
    4408:	02 c0       	rjmp	.+4      	; 0x440e <_turn_on+0x4e>
    440a:	88 0f       	add	r24, r24
    440c:	99 1f       	adc	r25, r25
    440e:	0a 94       	dec	r0
    4410:	e2 f7       	brpl	.-8      	; 0x440a <_turn_on+0x4a>
    4412:	80 95       	com	r24
    4414:	84 23       	and	r24, r20
    4416:	8c 93       	st	X, r24
    4418:	08 95       	ret
    441a:	fc 01       	movw	r30, r24
    441c:	ee 0f       	add	r30, r30
    441e:	ff 1f       	adc	r31, r31
    4420:	df 01       	movw	r26, r30
    4422:	a8 0f       	add	r26, r24
    4424:	b9 1f       	adc	r27, r25
    4426:	aa 0f       	add	r26, r26
    4428:	bb 1f       	adc	r27, r27
    442a:	a3 5b       	subi	r26, 0xB3	; 179
    442c:	bd 4e       	sbci	r27, 0xED	; 237
    442e:	0d 90       	ld	r0, X+
    4430:	bc 91       	ld	r27, X
    4432:	a0 2d       	mov	r26, r0
    4434:	2c 91       	ld	r18, X
    4436:	e8 0f       	add	r30, r24
    4438:	f9 1f       	adc	r31, r25
    443a:	ee 0f       	add	r30, r30
    443c:	ff 1f       	adc	r31, r31
    443e:	e3 5b       	subi	r30, 0xB3	; 179
    4440:	fd 4e       	sbci	r31, 0xED	; 237
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	02 80       	ldd	r0, Z+2	; 0x02
    4448:	02 c0       	rjmp	.+4      	; 0x444e <_turn_on+0x8e>
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	0a 94       	dec	r0
    4450:	e2 f7       	brpl	.-8      	; 0x444a <_turn_on+0x8a>
    4452:	82 2b       	or	r24, r18
    4454:	8c 93       	st	X, r24
    4456:	08 95       	ret

00004458 <_hal_led_task>:
    4458:	cc 24       	eor	r12, r12
    445a:	c3 94       	inc	r12
    445c:	d1 2c       	mov	r13, r1
    445e:	68 94       	set
    4460:	bb 24       	eor	r11, r11
    4462:	b2 f8       	bld	r11, 2
    4464:	cd e4       	ldi	r28, 0x4D	; 77
    4466:	d2 e1       	ldi	r29, 0x12	; 18
    4468:	10 e0       	ldi	r17, 0x00	; 0
    446a:	8c 81       	ldd	r24, Y+4	; 0x04
    446c:	81 30       	cpi	r24, 0x01	; 1
    446e:	81 f0       	breq	.+32     	; 0x4490 <_hal_led_task+0x38>
    4470:	18 f1       	brcs	.+70     	; 0x44b8 <_hal_led_task+0x60>
    4472:	82 30       	cpi	r24, 0x02	; 2
    4474:	61 f5       	brne	.+88     	; 0x44ce <_hal_led_task+0x76>
    4476:	e8 81       	ld	r30, Y
    4478:	f9 81       	ldd	r31, Y+1	; 0x01
    447a:	20 81       	ld	r18, Z
    447c:	c6 01       	movw	r24, r12
    447e:	0a 80       	ldd	r0, Y+2	; 0x02
    4480:	02 c0       	rjmp	.+4      	; 0x4486 <_hal_led_task+0x2e>
    4482:	88 0f       	add	r24, r24
    4484:	99 1f       	adc	r25, r25
    4486:	0a 94       	dec	r0
    4488:	e2 f7       	brpl	.-8      	; 0x4482 <_hal_led_task+0x2a>
    448a:	82 27       	eor	r24, r18
    448c:	80 83       	st	Z, r24
    448e:	1f c0       	rjmp	.+62     	; 0x44ce <_hal_led_task+0x76>
    4490:	8d 81       	ldd	r24, Y+5	; 0x05
    4492:	8f 5f       	subi	r24, 0xFF	; 255
    4494:	8a 30       	cpi	r24, 0x0A	; 10
    4496:	10 f4       	brcc	.+4      	; 0x449c <_hal_led_task+0x44>
    4498:	8d 83       	std	Y+5, r24	; 0x05
    449a:	19 c0       	rjmp	.+50     	; 0x44ce <_hal_led_task+0x76>
    449c:	1d 82       	std	Y+5, r1	; 0x05
    449e:	e8 81       	ld	r30, Y
    44a0:	f9 81       	ldd	r31, Y+1	; 0x01
    44a2:	20 81       	ld	r18, Z
    44a4:	c6 01       	movw	r24, r12
    44a6:	0a 80       	ldd	r0, Y+2	; 0x02
    44a8:	02 c0       	rjmp	.+4      	; 0x44ae <_hal_led_task+0x56>
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	0a 94       	dec	r0
    44b0:	e2 f7       	brpl	.-8      	; 0x44aa <_hal_led_task+0x52>
    44b2:	82 27       	eor	r24, r18
    44b4:	80 83       	st	Z, r24
    44b6:	0b c0       	rjmp	.+22     	; 0x44ce <_hal_led_task+0x76>
    44b8:	0d 81       	ldd	r16, Y+5	; 0x05
    44ba:	00 23       	and	r16, r16
    44bc:	29 f0       	breq	.+10     	; 0x44c8 <_hal_led_task+0x70>
    44be:	81 2f       	mov	r24, r17
    44c0:	7f df       	rcall	.-258    	; 0x43c0 <_turn_on>
    44c2:	01 50       	subi	r16, 0x01	; 1
    44c4:	0d 83       	std	Y+5, r16	; 0x05
    44c6:	03 c0       	rjmp	.+6      	; 0x44ce <_hal_led_task+0x76>
    44c8:	bc 82       	std	Y+4, r11	; 0x04
    44ca:	81 2f       	mov	r24, r17
    44cc:	2d df       	rcall	.-422    	; 0x4328 <_turn_off>
    44ce:	1f 5f       	subi	r17, 0xFF	; 255
    44d0:	26 96       	adiw	r28, 0x06	; 6
    44d2:	14 30       	cpi	r17, 0x04	; 4
    44d4:	51 f6       	brne	.-108    	; 0x446a <_hal_led_task+0x12>
    44d6:	65 e0       	ldi	r22, 0x05	; 5
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vTaskDelay>
    44e2:	c0 cf       	rjmp	.-128    	; 0x4464 <_hal_led_task+0xc>

000044e4 <status_leds_initialise>:
    44e4:	ef 92       	push	r14
    44e6:	ff 92       	push	r15
    44e8:	0f 93       	push	r16
    44ea:	1f 93       	push	r17
    44ec:	cf 93       	push	r28
    44ee:	df 93       	push	r29
    44f0:	08 2f       	mov	r16, r24
    44f2:	80 e4       	ldi	r24, 0x40	; 64
    44f4:	87 b9       	out	0x07, r24	; 7
    44f6:	cd e4       	ldi	r28, 0x4D	; 77
    44f8:	d2 e1       	ldi	r29, 0x12	; 18
    44fa:	0f 2e       	mov	r0, r31
    44fc:	f8 e2       	ldi	r31, 0x28	; 40
    44fe:	ef 2e       	mov	r14, r31
    4500:	f1 2c       	mov	r15, r1
    4502:	f0 2d       	mov	r31, r0
    4504:	f9 82       	std	Y+1, r15	; 0x01
    4506:	e8 82       	st	Y, r14
    4508:	86 e0       	ldi	r24, 0x06	; 6
    450a:	8a 83       	std	Y+2, r24	; 0x02
    450c:	1b 82       	std	Y+3, r1	; 0x03
    450e:	14 e0       	ldi	r17, 0x04	; 4
    4510:	1c 83       	std	Y+4, r17	; 0x04
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	09 df       	rcall	.-494    	; 0x4328 <_turn_off>
    4516:	80 e8       	ldi	r24, 0x80	; 128
    4518:	87 b9       	out	0x07, r24	; 7
    451a:	ff 82       	std	Y+7, r15	; 0x07
    451c:	ee 82       	std	Y+6, r14	; 0x06
    451e:	87 e0       	ldi	r24, 0x07	; 7
    4520:	88 87       	std	Y+8, r24	; 0x08
    4522:	19 86       	std	Y+9, r1	; 0x09
    4524:	1a 87       	std	Y+10, r17	; 0x0a
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	ff de       	rcall	.-514    	; 0x4328 <_turn_off>
    452a:	80 e2       	ldi	r24, 0x20	; 32
    452c:	83 bb       	out	0x13, r24	; 19
    452e:	84 e3       	ldi	r24, 0x34	; 52
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	9d 87       	std	Y+13, r25	; 0x0d
    4534:	8c 87       	std	Y+12, r24	; 0x0c
    4536:	85 e0       	ldi	r24, 0x05	; 5
    4538:	8e 87       	std	Y+14, r24	; 0x0e
    453a:	1f 86       	std	Y+15, r1	; 0x0f
    453c:	18 8b       	std	Y+16, r17	; 0x10
    453e:	82 e0       	ldi	r24, 0x02	; 2
    4540:	f3 de       	rcall	.-538    	; 0x4328 <_turn_off>
    4542:	80 e1       	ldi	r24, 0x10	; 16
    4544:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4548:	82 e0       	ldi	r24, 0x02	; 2
    454a:	91 e0       	ldi	r25, 0x01	; 1
    454c:	9b 8b       	std	Y+19, r25	; 0x13
    454e:	8a 8b       	std	Y+18, r24	; 0x12
    4550:	1c 8b       	std	Y+20, r17	; 0x14
    4552:	1d 8a       	std	Y+21, r1	; 0x15
    4554:	1e 8b       	std	Y+22, r17	; 0x16
    4556:	83 e0       	ldi	r24, 0x03	; 3
    4558:	e7 de       	rcall	.-562    	; 0x4328 <_turn_off>
    455a:	e1 2c       	mov	r14, r1
    455c:	f1 2c       	mov	r15, r1
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 ec       	ldi	r20, 0xC0	; 192
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	6e e7       	ldi	r22, 0x7E	; 126
    4568:	76 e0       	ldi	r23, 0x06	; 6
    456a:	8c e2       	ldi	r24, 0x2C	; 44
    456c:	92 e2       	ldi	r25, 0x22	; 34
    456e:	0e 94 10 0c 	call	0x1820	; 0x1820 <xTaskCreate>
    4572:	df 91       	pop	r29
    4574:	cf 91       	pop	r28
    4576:	1f 91       	pop	r17
    4578:	0f 91       	pop	r16
    457a:	ff 90       	pop	r15
    457c:	ef 90       	pop	r14
    457e:	08 95       	ret

00004580 <status_leds_slowBlink>:
    4580:	cf 93       	push	r28
    4582:	df 93       	push	r29
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	fc 01       	movw	r30, r24
    4588:	ee 0f       	add	r30, r30
    458a:	ff 1f       	adc	r31, r31
    458c:	df 01       	movw	r26, r30
    458e:	a8 0f       	add	r26, r24
    4590:	b9 1f       	adc	r27, r25
    4592:	aa 0f       	add	r26, r26
    4594:	bb 1f       	adc	r27, r27
    4596:	a3 5b       	subi	r26, 0xB3	; 179
    4598:	bd 4e       	sbci	r27, 0xED	; 237
    459a:	cd 91       	ld	r28, X+
    459c:	dc 91       	ld	r29, X
    459e:	11 97       	sbiw	r26, 0x01	; 1
    45a0:	48 81       	ld	r20, Y
    45a2:	21 e0       	ldi	r18, 0x01	; 1
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	12 96       	adiw	r26, 0x02	; 2
    45a8:	0c 90       	ld	r0, X
    45aa:	12 97       	sbiw	r26, 0x02	; 2
    45ac:	02 c0       	rjmp	.+4      	; 0x45b2 <status_leds_slowBlink+0x32>
    45ae:	22 0f       	add	r18, r18
    45b0:	33 1f       	adc	r19, r19
    45b2:	0a 94       	dec	r0
    45b4:	e2 f7       	brpl	.-8      	; 0x45ae <status_leds_slowBlink+0x2e>
    45b6:	24 27       	eor	r18, r20
    45b8:	28 83       	st	Y, r18
    45ba:	fd 01       	movw	r30, r26
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	84 83       	std	Z+4, r24	; 0x04
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	08 95       	ret

000045c6 <status_leds_fastBlink>:
    45c6:	cf 93       	push	r28
    45c8:	df 93       	push	r29
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	fc 01       	movw	r30, r24
    45ce:	ee 0f       	add	r30, r30
    45d0:	ff 1f       	adc	r31, r31
    45d2:	df 01       	movw	r26, r30
    45d4:	a8 0f       	add	r26, r24
    45d6:	b9 1f       	adc	r27, r25
    45d8:	aa 0f       	add	r26, r26
    45da:	bb 1f       	adc	r27, r27
    45dc:	a3 5b       	subi	r26, 0xB3	; 179
    45de:	bd 4e       	sbci	r27, 0xED	; 237
    45e0:	cd 91       	ld	r28, X+
    45e2:	dc 91       	ld	r29, X
    45e4:	11 97       	sbiw	r26, 0x01	; 1
    45e6:	48 81       	ld	r20, Y
    45e8:	21 e0       	ldi	r18, 0x01	; 1
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	12 96       	adiw	r26, 0x02	; 2
    45ee:	0c 90       	ld	r0, X
    45f0:	12 97       	sbiw	r26, 0x02	; 2
    45f2:	02 c0       	rjmp	.+4      	; 0x45f8 <status_leds_fastBlink+0x32>
    45f4:	22 0f       	add	r18, r18
    45f6:	33 1f       	adc	r19, r19
    45f8:	0a 94       	dec	r0
    45fa:	e2 f7       	brpl	.-8      	; 0x45f4 <status_leds_fastBlink+0x2e>
    45fc:	24 27       	eor	r18, r20
    45fe:	28 83       	st	Y, r18
    4600:	fd 01       	movw	r30, r26
    4602:	82 e0       	ldi	r24, 0x02	; 2
    4604:	84 83       	std	Z+4, r24	; 0x04
    4606:	df 91       	pop	r29
    4608:	cf 91       	pop	r28
    460a:	08 95       	ret

0000460c <status_leds_ledOn>:
    460c:	28 2f       	mov	r18, r24
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	f9 01       	movw	r30, r18
    4612:	ee 0f       	add	r30, r30
    4614:	ff 1f       	adc	r31, r31
    4616:	e2 0f       	add	r30, r18
    4618:	f3 1f       	adc	r31, r19
    461a:	ee 0f       	add	r30, r30
    461c:	ff 1f       	adc	r31, r31
    461e:	e3 5b       	subi	r30, 0xB3	; 179
    4620:	fd 4e       	sbci	r31, 0xED	; 237
    4622:	93 e0       	ldi	r25, 0x03	; 3
    4624:	94 83       	std	Z+4, r25	; 0x04
    4626:	cc ce       	rjmp	.-616    	; 0x43c0 <_turn_on>
    4628:	08 95       	ret

0000462a <status_leds_ledOff>:
    462a:	28 2f       	mov	r18, r24
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	f9 01       	movw	r30, r18
    4630:	ee 0f       	add	r30, r30
    4632:	ff 1f       	adc	r31, r31
    4634:	e2 0f       	add	r30, r18
    4636:	f3 1f       	adc	r31, r19
    4638:	ee 0f       	add	r30, r30
    463a:	ff 1f       	adc	r31, r31
    463c:	e3 5b       	subi	r30, 0xB3	; 179
    463e:	fd 4e       	sbci	r31, 0xED	; 237
    4640:	94 e0       	ldi	r25, 0x04	; 4
    4642:	94 83       	std	Z+4, r25	; 0x04
    4644:	71 ce       	rjmp	.-798    	; 0x4328 <_turn_off>
    4646:	08 95       	ret

00004648 <status_leds_longPuls>:
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	fc 01       	movw	r30, r24
    464c:	ee 0f       	add	r30, r30
    464e:	ff 1f       	adc	r31, r31
    4650:	df 01       	movw	r26, r30
    4652:	a8 0f       	add	r26, r24
    4654:	b9 1f       	adc	r27, r25
    4656:	aa 0f       	add	r26, r26
    4658:	bb 1f       	adc	r27, r27
    465a:	a3 5b       	subi	r26, 0xB3	; 179
    465c:	bd 4e       	sbci	r27, 0xED	; 237
    465e:	24 e0       	ldi	r18, 0x04	; 4
    4660:	15 96       	adiw	r26, 0x05	; 5
    4662:	2c 93       	st	X, r18
    4664:	15 97       	sbiw	r26, 0x05	; 5
    4666:	fd 01       	movw	r30, r26
    4668:	14 82       	std	Z+4, r1	; 0x04
    466a:	08 95       	ret

0000466c <status_leds_shortPuls>:
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	fc 01       	movw	r30, r24
    4670:	ee 0f       	add	r30, r30
    4672:	ff 1f       	adc	r31, r31
    4674:	df 01       	movw	r26, r30
    4676:	a8 0f       	add	r26, r24
    4678:	b9 1f       	adc	r27, r25
    467a:	aa 0f       	add	r26, r26
    467c:	bb 1f       	adc	r27, r27
    467e:	a3 5b       	subi	r26, 0xB3	; 179
    4680:	bd 4e       	sbci	r27, 0xED	; 237
    4682:	21 e0       	ldi	r18, 0x01	; 1
    4684:	15 96       	adiw	r26, 0x05	; 5
    4686:	2c 93       	st	X, r18
    4688:	15 97       	sbiw	r26, 0x05	; 5
    468a:	fd 01       	movw	r30, r26
    468c:	14 82       	std	Z+4, r1	; 0x04
    468e:	08 95       	ret

00004690 <__vector_39>:
    4690:	1f 92       	push	r1
    4692:	0f 92       	push	r0
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	0f 92       	push	r0
    4698:	11 24       	eor	r1, r1
    469a:	0b b6       	in	r0, 0x3b	; 59
    469c:	0f 92       	push	r0
    469e:	2f 93       	push	r18
    46a0:	3f 93       	push	r19
    46a2:	4f 93       	push	r20
    46a4:	5f 93       	push	r21
    46a6:	6f 93       	push	r22
    46a8:	7f 93       	push	r23
    46aa:	8f 93       	push	r24
    46ac:	9f 93       	push	r25
    46ae:	af 93       	push	r26
    46b0:	bf 93       	push	r27
    46b2:	ef 93       	push	r30
    46b4:	ff 93       	push	r31
    46b6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    46ba:	8e 2f       	mov	r24, r30
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	fc 01       	movw	r30, r24
    46c0:	38 97       	sbiw	r30, 0x08	; 8
    46c2:	e1 35       	cpi	r30, 0x51	; 81
    46c4:	f1 05       	cpc	r31, r1
    46c6:	08 f0       	brcs	.+2      	; 0x46ca <__vector_39+0x3a>
    46c8:	75 c0       	rjmp	.+234    	; 0x47b4 <__vector_39+0x124>
    46ca:	88 27       	eor	r24, r24
    46cc:	e4 58       	subi	r30, 0x84	; 132
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	8f 4f       	sbci	r24, 0xFF	; 255
    46d2:	a1 c2       	rjmp	.+1346   	; 0x4c16 <__tablejump2__>
    46d4:	10 92 65 12 	sts	0x1265, r1	; 0x801265 <_index.1885>
    46d8:	e0 91 65 12 	lds	r30, 0x1265	; 0x801265 <_index.1885>
    46dc:	80 91 68 12 	lds	r24, 0x1268	; 0x801268 <_twiMessageLen>
    46e0:	e8 17       	cp	r30, r24
    46e2:	70 f4       	brcc	.+28     	; 0x4700 <__vector_39+0x70>
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	8e 0f       	add	r24, r30
    46e8:	80 93 65 12 	sts	0x1265, r24	; 0x801265 <_index.1885>
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	e7 59       	subi	r30, 0x97	; 151
    46f0:	fd 4e       	sbci	r31, 0xED	; 237
    46f2:	80 81       	ld	r24, Z
    46f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    46f8:	85 e8       	ldi	r24, 0x85	; 133
    46fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46fe:	72 c0       	rjmp	.+228    	; 0x47e4 <__vector_39+0x154>
    4700:	84 e9       	ldi	r24, 0x94	; 148
    4702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4706:	80 91 66 12 	lds	r24, 0x1266	; 0x801266 <_twiCurrentHandler>
    470a:	90 91 67 12 	lds	r25, 0x1267	; 0x801267 <_twiCurrentHandler+0x1>
    470e:	dc 01       	movw	r26, r24
    4710:	12 96       	adiw	r26, 0x02	; 2
    4712:	ed 91       	ld	r30, X+
    4714:	fc 91       	ld	r31, X
    4716:	13 97       	sbiw	r26, 0x03	; 3
    4718:	30 97       	sbiw	r30, 0x00	; 0
    471a:	09 f4       	brne	.+2      	; 0x471e <__vector_39+0x8e>
    471c:	63 c0       	rjmp	.+198    	; 0x47e4 <__vector_39+0x154>
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	64 e0       	ldi	r22, 0x04	; 4
    4726:	19 95       	eicall
    4728:	5d c0       	rjmp	.+186    	; 0x47e4 <__vector_39+0x154>
    472a:	e0 91 65 12 	lds	r30, 0x1265	; 0x801265 <_index.1885>
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	8e 0f       	add	r24, r30
    4732:	80 93 65 12 	sts	0x1265, r24	; 0x801265 <_index.1885>
    4736:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	e7 59       	subi	r30, 0x97	; 151
    473e:	fd 4e       	sbci	r31, 0xED	; 237
    4740:	80 83       	st	Z, r24
    4742:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4746:	80 34       	cpi	r24, 0x40	; 64
    4748:	11 f4       	brne	.+4      	; 0x474e <__vector_39+0xbe>
    474a:	10 92 65 12 	sts	0x1265, r1	; 0x801265 <_index.1885>
    474e:	20 91 65 12 	lds	r18, 0x1265	; 0x801265 <_index.1885>
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	80 91 68 12 	lds	r24, 0x1268	; 0x801268 <_twiMessageLen>
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	28 17       	cp	r18, r24
    475e:	39 07       	cpc	r19, r25
    4760:	24 f4       	brge	.+8      	; 0x476a <__vector_39+0xda>
    4762:	85 ec       	ldi	r24, 0xC5	; 197
    4764:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4768:	3d c0       	rjmp	.+122    	; 0x47e4 <__vector_39+0x154>
    476a:	85 e8       	ldi	r24, 0x85	; 133
    476c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4770:	39 c0       	rjmp	.+114    	; 0x47e4 <__vector_39+0x154>
    4772:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4776:	e0 91 65 12 	lds	r30, 0x1265	; 0x801265 <_index.1885>
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	e7 59       	subi	r30, 0x97	; 151
    477e:	fd 4e       	sbci	r31, 0xED	; 237
    4780:	80 83       	st	Z, r24
    4782:	84 e9       	ldi	r24, 0x94	; 148
    4784:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4788:	80 91 66 12 	lds	r24, 0x1266	; 0x801266 <_twiCurrentHandler>
    478c:	90 91 67 12 	lds	r25, 0x1267	; 0x801267 <_twiCurrentHandler+0x1>
    4790:	dc 01       	movw	r26, r24
    4792:	12 96       	adiw	r26, 0x02	; 2
    4794:	ed 91       	ld	r30, X+
    4796:	fc 91       	ld	r31, X
    4798:	13 97       	sbiw	r26, 0x03	; 3
    479a:	30 97       	sbiw	r30, 0x00	; 0
    479c:	19 f1       	breq	.+70     	; 0x47e4 <__vector_39+0x154>
    479e:	20 91 68 12 	lds	r18, 0x1268	; 0x801268 <_twiMessageLen>
    47a2:	49 e6       	ldi	r20, 0x69	; 105
    47a4:	52 e1       	ldi	r21, 0x12	; 18
    47a6:	65 e0       	ldi	r22, 0x05	; 5
    47a8:	19 95       	eicall
    47aa:	1c c0       	rjmp	.+56     	; 0x47e4 <__vector_39+0x154>
    47ac:	85 ea       	ldi	r24, 0xA5	; 165
    47ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47b2:	18 c0       	rjmp	.+48     	; 0x47e4 <__vector_39+0x154>
    47b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    47b8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <_twiCurrentState>
    47bc:	84 e0       	ldi	r24, 0x04	; 4
    47be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47c2:	80 91 66 12 	lds	r24, 0x1266	; 0x801266 <_twiCurrentHandler>
    47c6:	90 91 67 12 	lds	r25, 0x1267	; 0x801267 <_twiCurrentHandler+0x1>
    47ca:	dc 01       	movw	r26, r24
    47cc:	12 96       	adiw	r26, 0x02	; 2
    47ce:	ed 91       	ld	r30, X+
    47d0:	fc 91       	ld	r31, X
    47d2:	13 97       	sbiw	r26, 0x03	; 3
    47d4:	30 97       	sbiw	r30, 0x00	; 0
    47d6:	31 f0       	breq	.+12     	; 0x47e4 <__vector_39+0x154>
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	40 e0       	ldi	r20, 0x00	; 0
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <_twiCurrentState>
    47e2:	19 95       	eicall
    47e4:	ff 91       	pop	r31
    47e6:	ef 91       	pop	r30
    47e8:	bf 91       	pop	r27
    47ea:	af 91       	pop	r26
    47ec:	9f 91       	pop	r25
    47ee:	8f 91       	pop	r24
    47f0:	7f 91       	pop	r23
    47f2:	6f 91       	pop	r22
    47f4:	5f 91       	pop	r21
    47f6:	4f 91       	pop	r20
    47f8:	3f 91       	pop	r19
    47fa:	2f 91       	pop	r18
    47fc:	0f 90       	pop	r0
    47fe:	0b be       	out	0x3b, r0	; 59
    4800:	0f 90       	pop	r0
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	0f 90       	pop	r0
    4806:	1f 90       	pop	r1
    4808:	18 95       	reti

0000480a <fifo_init>:
    480a:	fc 01       	movw	r30, r24
    480c:	41 11       	cpse	r20, r1
    480e:	01 c0       	rjmp	.+2      	; 0x4812 <fifo_init+0x8>
    4810:	2b d3       	rcall	.+1622   	; 0x4e68 <abort>
    4812:	84 2f       	mov	r24, r20
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	9c 01       	movw	r18, r24
    4818:	21 50       	subi	r18, 0x01	; 1
    481a:	31 09       	sbc	r19, r1
    481c:	82 23       	and	r24, r18
    481e:	93 23       	and	r25, r19
    4820:	89 2b       	or	r24, r25
    4822:	09 f0       	breq	.+2      	; 0x4826 <fifo_init+0x1c>
    4824:	21 d3       	rcall	.+1602   	; 0x4e68 <abort>
    4826:	41 38       	cpi	r20, 0x81	; 129
    4828:	08 f0       	brcs	.+2      	; 0x482c <fifo_init+0x22>
    482a:	1e d3       	rcall	.+1596   	; 0x4e68 <abort>
    482c:	12 82       	std	Z+2, r1	; 0x02
    482e:	13 82       	std	Z+3, r1	; 0x03
    4830:	44 83       	std	Z+4, r20	; 0x04
    4832:	44 0f       	add	r20, r20
    4834:	41 50       	subi	r20, 0x01	; 1
    4836:	45 83       	std	Z+5, r20	; 0x05
    4838:	71 83       	std	Z+1, r23	; 0x01
    483a:	60 83       	st	Z, r22
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	08 95       	ret

00004842 <__subsf3>:
    4842:	50 58       	subi	r21, 0x80	; 128

00004844 <__addsf3>:
    4844:	bb 27       	eor	r27, r27
    4846:	aa 27       	eor	r26, r26
    4848:	0e d0       	rcall	.+28     	; 0x4866 <__addsf3x>
    484a:	48 c1       	rjmp	.+656    	; 0x4adc <__fp_round>
    484c:	39 d1       	rcall	.+626    	; 0x4ac0 <__fp_pscA>
    484e:	30 f0       	brcs	.+12     	; 0x485c <__addsf3+0x18>
    4850:	3e d1       	rcall	.+636    	; 0x4ace <__fp_pscB>
    4852:	20 f0       	brcs	.+8      	; 0x485c <__addsf3+0x18>
    4854:	31 f4       	brne	.+12     	; 0x4862 <__addsf3+0x1e>
    4856:	9f 3f       	cpi	r25, 0xFF	; 255
    4858:	11 f4       	brne	.+4      	; 0x485e <__addsf3+0x1a>
    485a:	1e f4       	brtc	.+6      	; 0x4862 <__addsf3+0x1e>
    485c:	2e c1       	rjmp	.+604    	; 0x4aba <__fp_nan>
    485e:	0e f4       	brtc	.+2      	; 0x4862 <__addsf3+0x1e>
    4860:	e0 95       	com	r30
    4862:	e7 fb       	bst	r30, 7
    4864:	24 c1       	rjmp	.+584    	; 0x4aae <__fp_inf>

00004866 <__addsf3x>:
    4866:	e9 2f       	mov	r30, r25
    4868:	4a d1       	rcall	.+660    	; 0x4afe <__fp_split3>
    486a:	80 f3       	brcs	.-32     	; 0x484c <__addsf3+0x8>
    486c:	ba 17       	cp	r27, r26
    486e:	62 07       	cpc	r22, r18
    4870:	73 07       	cpc	r23, r19
    4872:	84 07       	cpc	r24, r20
    4874:	95 07       	cpc	r25, r21
    4876:	18 f0       	brcs	.+6      	; 0x487e <__addsf3x+0x18>
    4878:	71 f4       	brne	.+28     	; 0x4896 <__addsf3x+0x30>
    487a:	9e f5       	brtc	.+102    	; 0x48e2 <__addsf3x+0x7c>
    487c:	62 c1       	rjmp	.+708    	; 0x4b42 <__fp_zero>
    487e:	0e f4       	brtc	.+2      	; 0x4882 <__addsf3x+0x1c>
    4880:	e0 95       	com	r30
    4882:	0b 2e       	mov	r0, r27
    4884:	ba 2f       	mov	r27, r26
    4886:	a0 2d       	mov	r26, r0
    4888:	0b 01       	movw	r0, r22
    488a:	b9 01       	movw	r22, r18
    488c:	90 01       	movw	r18, r0
    488e:	0c 01       	movw	r0, r24
    4890:	ca 01       	movw	r24, r20
    4892:	a0 01       	movw	r20, r0
    4894:	11 24       	eor	r1, r1
    4896:	ff 27       	eor	r31, r31
    4898:	59 1b       	sub	r21, r25
    489a:	99 f0       	breq	.+38     	; 0x48c2 <__addsf3x+0x5c>
    489c:	59 3f       	cpi	r21, 0xF9	; 249
    489e:	50 f4       	brcc	.+20     	; 0x48b4 <__addsf3x+0x4e>
    48a0:	50 3e       	cpi	r21, 0xE0	; 224
    48a2:	68 f1       	brcs	.+90     	; 0x48fe <__addsf3x+0x98>
    48a4:	1a 16       	cp	r1, r26
    48a6:	f0 40       	sbci	r31, 0x00	; 0
    48a8:	a2 2f       	mov	r26, r18
    48aa:	23 2f       	mov	r18, r19
    48ac:	34 2f       	mov	r19, r20
    48ae:	44 27       	eor	r20, r20
    48b0:	58 5f       	subi	r21, 0xF8	; 248
    48b2:	f3 cf       	rjmp	.-26     	; 0x489a <__addsf3x+0x34>
    48b4:	46 95       	lsr	r20
    48b6:	37 95       	ror	r19
    48b8:	27 95       	ror	r18
    48ba:	a7 95       	ror	r26
    48bc:	f0 40       	sbci	r31, 0x00	; 0
    48be:	53 95       	inc	r21
    48c0:	c9 f7       	brne	.-14     	; 0x48b4 <__addsf3x+0x4e>
    48c2:	7e f4       	brtc	.+30     	; 0x48e2 <__addsf3x+0x7c>
    48c4:	1f 16       	cp	r1, r31
    48c6:	ba 0b       	sbc	r27, r26
    48c8:	62 0b       	sbc	r22, r18
    48ca:	73 0b       	sbc	r23, r19
    48cc:	84 0b       	sbc	r24, r20
    48ce:	ba f0       	brmi	.+46     	; 0x48fe <__addsf3x+0x98>
    48d0:	91 50       	subi	r25, 0x01	; 1
    48d2:	a1 f0       	breq	.+40     	; 0x48fc <__addsf3x+0x96>
    48d4:	ff 0f       	add	r31, r31
    48d6:	bb 1f       	adc	r27, r27
    48d8:	66 1f       	adc	r22, r22
    48da:	77 1f       	adc	r23, r23
    48dc:	88 1f       	adc	r24, r24
    48de:	c2 f7       	brpl	.-16     	; 0x48d0 <__addsf3x+0x6a>
    48e0:	0e c0       	rjmp	.+28     	; 0x48fe <__addsf3x+0x98>
    48e2:	ba 0f       	add	r27, r26
    48e4:	62 1f       	adc	r22, r18
    48e6:	73 1f       	adc	r23, r19
    48e8:	84 1f       	adc	r24, r20
    48ea:	48 f4       	brcc	.+18     	; 0x48fe <__addsf3x+0x98>
    48ec:	87 95       	ror	r24
    48ee:	77 95       	ror	r23
    48f0:	67 95       	ror	r22
    48f2:	b7 95       	ror	r27
    48f4:	f7 95       	ror	r31
    48f6:	9e 3f       	cpi	r25, 0xFE	; 254
    48f8:	08 f0       	brcs	.+2      	; 0x48fc <__addsf3x+0x96>
    48fa:	b3 cf       	rjmp	.-154    	; 0x4862 <__addsf3+0x1e>
    48fc:	93 95       	inc	r25
    48fe:	88 0f       	add	r24, r24
    4900:	08 f0       	brcs	.+2      	; 0x4904 <__addsf3x+0x9e>
    4902:	99 27       	eor	r25, r25
    4904:	ee 0f       	add	r30, r30
    4906:	97 95       	ror	r25
    4908:	87 95       	ror	r24
    490a:	08 95       	ret

0000490c <__divsf3>:
    490c:	0c d0       	rcall	.+24     	; 0x4926 <__divsf3x>
    490e:	e6 c0       	rjmp	.+460    	; 0x4adc <__fp_round>
    4910:	de d0       	rcall	.+444    	; 0x4ace <__fp_pscB>
    4912:	40 f0       	brcs	.+16     	; 0x4924 <__divsf3+0x18>
    4914:	d5 d0       	rcall	.+426    	; 0x4ac0 <__fp_pscA>
    4916:	30 f0       	brcs	.+12     	; 0x4924 <__divsf3+0x18>
    4918:	21 f4       	brne	.+8      	; 0x4922 <__divsf3+0x16>
    491a:	5f 3f       	cpi	r21, 0xFF	; 255
    491c:	19 f0       	breq	.+6      	; 0x4924 <__divsf3+0x18>
    491e:	c7 c0       	rjmp	.+398    	; 0x4aae <__fp_inf>
    4920:	51 11       	cpse	r21, r1
    4922:	10 c1       	rjmp	.+544    	; 0x4b44 <__fp_szero>
    4924:	ca c0       	rjmp	.+404    	; 0x4aba <__fp_nan>

00004926 <__divsf3x>:
    4926:	eb d0       	rcall	.+470    	; 0x4afe <__fp_split3>
    4928:	98 f3       	brcs	.-26     	; 0x4910 <__divsf3+0x4>

0000492a <__divsf3_pse>:
    492a:	99 23       	and	r25, r25
    492c:	c9 f3       	breq	.-14     	; 0x4920 <__divsf3+0x14>
    492e:	55 23       	and	r21, r21
    4930:	b1 f3       	breq	.-20     	; 0x491e <__divsf3+0x12>
    4932:	95 1b       	sub	r25, r21
    4934:	55 0b       	sbc	r21, r21
    4936:	bb 27       	eor	r27, r27
    4938:	aa 27       	eor	r26, r26
    493a:	62 17       	cp	r22, r18
    493c:	73 07       	cpc	r23, r19
    493e:	84 07       	cpc	r24, r20
    4940:	38 f0       	brcs	.+14     	; 0x4950 <__divsf3_pse+0x26>
    4942:	9f 5f       	subi	r25, 0xFF	; 255
    4944:	5f 4f       	sbci	r21, 0xFF	; 255
    4946:	22 0f       	add	r18, r18
    4948:	33 1f       	adc	r19, r19
    494a:	44 1f       	adc	r20, r20
    494c:	aa 1f       	adc	r26, r26
    494e:	a9 f3       	breq	.-22     	; 0x493a <__divsf3_pse+0x10>
    4950:	33 d0       	rcall	.+102    	; 0x49b8 <__divsf3_pse+0x8e>
    4952:	0e 2e       	mov	r0, r30
    4954:	3a f0       	brmi	.+14     	; 0x4964 <__divsf3_pse+0x3a>
    4956:	e0 e8       	ldi	r30, 0x80	; 128
    4958:	30 d0       	rcall	.+96     	; 0x49ba <__divsf3_pse+0x90>
    495a:	91 50       	subi	r25, 0x01	; 1
    495c:	50 40       	sbci	r21, 0x00	; 0
    495e:	e6 95       	lsr	r30
    4960:	00 1c       	adc	r0, r0
    4962:	ca f7       	brpl	.-14     	; 0x4956 <__divsf3_pse+0x2c>
    4964:	29 d0       	rcall	.+82     	; 0x49b8 <__divsf3_pse+0x8e>
    4966:	fe 2f       	mov	r31, r30
    4968:	27 d0       	rcall	.+78     	; 0x49b8 <__divsf3_pse+0x8e>
    496a:	66 0f       	add	r22, r22
    496c:	77 1f       	adc	r23, r23
    496e:	88 1f       	adc	r24, r24
    4970:	bb 1f       	adc	r27, r27
    4972:	26 17       	cp	r18, r22
    4974:	37 07       	cpc	r19, r23
    4976:	48 07       	cpc	r20, r24
    4978:	ab 07       	cpc	r26, r27
    497a:	b0 e8       	ldi	r27, 0x80	; 128
    497c:	09 f0       	breq	.+2      	; 0x4980 <__divsf3_pse+0x56>
    497e:	bb 0b       	sbc	r27, r27
    4980:	80 2d       	mov	r24, r0
    4982:	bf 01       	movw	r22, r30
    4984:	ff 27       	eor	r31, r31
    4986:	93 58       	subi	r25, 0x83	; 131
    4988:	5f 4f       	sbci	r21, 0xFF	; 255
    498a:	2a f0       	brmi	.+10     	; 0x4996 <__divsf3_pse+0x6c>
    498c:	9e 3f       	cpi	r25, 0xFE	; 254
    498e:	51 05       	cpc	r21, r1
    4990:	68 f0       	brcs	.+26     	; 0x49ac <__divsf3_pse+0x82>
    4992:	8d c0       	rjmp	.+282    	; 0x4aae <__fp_inf>
    4994:	d7 c0       	rjmp	.+430    	; 0x4b44 <__fp_szero>
    4996:	5f 3f       	cpi	r21, 0xFF	; 255
    4998:	ec f3       	brlt	.-6      	; 0x4994 <__divsf3_pse+0x6a>
    499a:	98 3e       	cpi	r25, 0xE8	; 232
    499c:	dc f3       	brlt	.-10     	; 0x4994 <__divsf3_pse+0x6a>
    499e:	86 95       	lsr	r24
    49a0:	77 95       	ror	r23
    49a2:	67 95       	ror	r22
    49a4:	b7 95       	ror	r27
    49a6:	f7 95       	ror	r31
    49a8:	9f 5f       	subi	r25, 0xFF	; 255
    49aa:	c9 f7       	brne	.-14     	; 0x499e <__divsf3_pse+0x74>
    49ac:	88 0f       	add	r24, r24
    49ae:	91 1d       	adc	r25, r1
    49b0:	96 95       	lsr	r25
    49b2:	87 95       	ror	r24
    49b4:	97 f9       	bld	r25, 7
    49b6:	08 95       	ret
    49b8:	e1 e0       	ldi	r30, 0x01	; 1
    49ba:	66 0f       	add	r22, r22
    49bc:	77 1f       	adc	r23, r23
    49be:	88 1f       	adc	r24, r24
    49c0:	bb 1f       	adc	r27, r27
    49c2:	62 17       	cp	r22, r18
    49c4:	73 07       	cpc	r23, r19
    49c6:	84 07       	cpc	r24, r20
    49c8:	ba 07       	cpc	r27, r26
    49ca:	20 f0       	brcs	.+8      	; 0x49d4 <__divsf3_pse+0xaa>
    49cc:	62 1b       	sub	r22, r18
    49ce:	73 0b       	sbc	r23, r19
    49d0:	84 0b       	sbc	r24, r20
    49d2:	ba 0b       	sbc	r27, r26
    49d4:	ee 1f       	adc	r30, r30
    49d6:	88 f7       	brcc	.-30     	; 0x49ba <__divsf3_pse+0x90>
    49d8:	e0 95       	com	r30
    49da:	08 95       	ret

000049dc <__fixunssfsi>:
    49dc:	98 d0       	rcall	.+304    	; 0x4b0e <__fp_splitA>
    49de:	88 f0       	brcs	.+34     	; 0x4a02 <__fixunssfsi+0x26>
    49e0:	9f 57       	subi	r25, 0x7F	; 127
    49e2:	90 f0       	brcs	.+36     	; 0x4a08 <__fixunssfsi+0x2c>
    49e4:	b9 2f       	mov	r27, r25
    49e6:	99 27       	eor	r25, r25
    49e8:	b7 51       	subi	r27, 0x17	; 23
    49ea:	a0 f0       	brcs	.+40     	; 0x4a14 <__fixunssfsi+0x38>
    49ec:	d1 f0       	breq	.+52     	; 0x4a22 <__fixunssfsi+0x46>
    49ee:	66 0f       	add	r22, r22
    49f0:	77 1f       	adc	r23, r23
    49f2:	88 1f       	adc	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	1a f0       	brmi	.+6      	; 0x49fe <__fixunssfsi+0x22>
    49f8:	ba 95       	dec	r27
    49fa:	c9 f7       	brne	.-14     	; 0x49ee <__fixunssfsi+0x12>
    49fc:	12 c0       	rjmp	.+36     	; 0x4a22 <__fixunssfsi+0x46>
    49fe:	b1 30       	cpi	r27, 0x01	; 1
    4a00:	81 f0       	breq	.+32     	; 0x4a22 <__fixunssfsi+0x46>
    4a02:	9f d0       	rcall	.+318    	; 0x4b42 <__fp_zero>
    4a04:	b1 e0       	ldi	r27, 0x01	; 1
    4a06:	08 95       	ret
    4a08:	9c c0       	rjmp	.+312    	; 0x4b42 <__fp_zero>
    4a0a:	67 2f       	mov	r22, r23
    4a0c:	78 2f       	mov	r23, r24
    4a0e:	88 27       	eor	r24, r24
    4a10:	b8 5f       	subi	r27, 0xF8	; 248
    4a12:	39 f0       	breq	.+14     	; 0x4a22 <__fixunssfsi+0x46>
    4a14:	b9 3f       	cpi	r27, 0xF9	; 249
    4a16:	cc f3       	brlt	.-14     	; 0x4a0a <__fixunssfsi+0x2e>
    4a18:	86 95       	lsr	r24
    4a1a:	77 95       	ror	r23
    4a1c:	67 95       	ror	r22
    4a1e:	b3 95       	inc	r27
    4a20:	d9 f7       	brne	.-10     	; 0x4a18 <__fixunssfsi+0x3c>
    4a22:	3e f4       	brtc	.+14     	; 0x4a32 <__fixunssfsi+0x56>
    4a24:	90 95       	com	r25
    4a26:	80 95       	com	r24
    4a28:	70 95       	com	r23
    4a2a:	61 95       	neg	r22
    4a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a30:	9f 4f       	sbci	r25, 0xFF	; 255
    4a32:	08 95       	ret

00004a34 <__floatunsisf>:
    4a34:	e8 94       	clt
    4a36:	09 c0       	rjmp	.+18     	; 0x4a4a <__floatsisf+0x12>

00004a38 <__floatsisf>:
    4a38:	97 fb       	bst	r25, 7
    4a3a:	3e f4       	brtc	.+14     	; 0x4a4a <__floatsisf+0x12>
    4a3c:	90 95       	com	r25
    4a3e:	80 95       	com	r24
    4a40:	70 95       	com	r23
    4a42:	61 95       	neg	r22
    4a44:	7f 4f       	sbci	r23, 0xFF	; 255
    4a46:	8f 4f       	sbci	r24, 0xFF	; 255
    4a48:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4a:	99 23       	and	r25, r25
    4a4c:	a9 f0       	breq	.+42     	; 0x4a78 <__floatsisf+0x40>
    4a4e:	f9 2f       	mov	r31, r25
    4a50:	96 e9       	ldi	r25, 0x96	; 150
    4a52:	bb 27       	eor	r27, r27
    4a54:	93 95       	inc	r25
    4a56:	f6 95       	lsr	r31
    4a58:	87 95       	ror	r24
    4a5a:	77 95       	ror	r23
    4a5c:	67 95       	ror	r22
    4a5e:	b7 95       	ror	r27
    4a60:	f1 11       	cpse	r31, r1
    4a62:	f8 cf       	rjmp	.-16     	; 0x4a54 <__floatsisf+0x1c>
    4a64:	fa f4       	brpl	.+62     	; 0x4aa4 <__floatsisf+0x6c>
    4a66:	bb 0f       	add	r27, r27
    4a68:	11 f4       	brne	.+4      	; 0x4a6e <__floatsisf+0x36>
    4a6a:	60 ff       	sbrs	r22, 0
    4a6c:	1b c0       	rjmp	.+54     	; 0x4aa4 <__floatsisf+0x6c>
    4a6e:	6f 5f       	subi	r22, 0xFF	; 255
    4a70:	7f 4f       	sbci	r23, 0xFF	; 255
    4a72:	8f 4f       	sbci	r24, 0xFF	; 255
    4a74:	9f 4f       	sbci	r25, 0xFF	; 255
    4a76:	16 c0       	rjmp	.+44     	; 0x4aa4 <__floatsisf+0x6c>
    4a78:	88 23       	and	r24, r24
    4a7a:	11 f0       	breq	.+4      	; 0x4a80 <__floatsisf+0x48>
    4a7c:	96 e9       	ldi	r25, 0x96	; 150
    4a7e:	11 c0       	rjmp	.+34     	; 0x4aa2 <__floatsisf+0x6a>
    4a80:	77 23       	and	r23, r23
    4a82:	21 f0       	breq	.+8      	; 0x4a8c <__floatsisf+0x54>
    4a84:	9e e8       	ldi	r25, 0x8E	; 142
    4a86:	87 2f       	mov	r24, r23
    4a88:	76 2f       	mov	r23, r22
    4a8a:	05 c0       	rjmp	.+10     	; 0x4a96 <__floatsisf+0x5e>
    4a8c:	66 23       	and	r22, r22
    4a8e:	71 f0       	breq	.+28     	; 0x4aac <__floatsisf+0x74>
    4a90:	96 e8       	ldi	r25, 0x86	; 134
    4a92:	86 2f       	mov	r24, r22
    4a94:	70 e0       	ldi	r23, 0x00	; 0
    4a96:	60 e0       	ldi	r22, 0x00	; 0
    4a98:	2a f0       	brmi	.+10     	; 0x4aa4 <__floatsisf+0x6c>
    4a9a:	9a 95       	dec	r25
    4a9c:	66 0f       	add	r22, r22
    4a9e:	77 1f       	adc	r23, r23
    4aa0:	88 1f       	adc	r24, r24
    4aa2:	da f7       	brpl	.-10     	; 0x4a9a <__floatsisf+0x62>
    4aa4:	88 0f       	add	r24, r24
    4aa6:	96 95       	lsr	r25
    4aa8:	87 95       	ror	r24
    4aaa:	97 f9       	bld	r25, 7
    4aac:	08 95       	ret

00004aae <__fp_inf>:
    4aae:	97 f9       	bld	r25, 7
    4ab0:	9f 67       	ori	r25, 0x7F	; 127
    4ab2:	80 e8       	ldi	r24, 0x80	; 128
    4ab4:	70 e0       	ldi	r23, 0x00	; 0
    4ab6:	60 e0       	ldi	r22, 0x00	; 0
    4ab8:	08 95       	ret

00004aba <__fp_nan>:
    4aba:	9f ef       	ldi	r25, 0xFF	; 255
    4abc:	80 ec       	ldi	r24, 0xC0	; 192
    4abe:	08 95       	ret

00004ac0 <__fp_pscA>:
    4ac0:	00 24       	eor	r0, r0
    4ac2:	0a 94       	dec	r0
    4ac4:	16 16       	cp	r1, r22
    4ac6:	17 06       	cpc	r1, r23
    4ac8:	18 06       	cpc	r1, r24
    4aca:	09 06       	cpc	r0, r25
    4acc:	08 95       	ret

00004ace <__fp_pscB>:
    4ace:	00 24       	eor	r0, r0
    4ad0:	0a 94       	dec	r0
    4ad2:	12 16       	cp	r1, r18
    4ad4:	13 06       	cpc	r1, r19
    4ad6:	14 06       	cpc	r1, r20
    4ad8:	05 06       	cpc	r0, r21
    4ada:	08 95       	ret

00004adc <__fp_round>:
    4adc:	09 2e       	mov	r0, r25
    4ade:	03 94       	inc	r0
    4ae0:	00 0c       	add	r0, r0
    4ae2:	11 f4       	brne	.+4      	; 0x4ae8 <__fp_round+0xc>
    4ae4:	88 23       	and	r24, r24
    4ae6:	52 f0       	brmi	.+20     	; 0x4afc <__fp_round+0x20>
    4ae8:	bb 0f       	add	r27, r27
    4aea:	40 f4       	brcc	.+16     	; 0x4afc <__fp_round+0x20>
    4aec:	bf 2b       	or	r27, r31
    4aee:	11 f4       	brne	.+4      	; 0x4af4 <__fp_round+0x18>
    4af0:	60 ff       	sbrs	r22, 0
    4af2:	04 c0       	rjmp	.+8      	; 0x4afc <__fp_round+0x20>
    4af4:	6f 5f       	subi	r22, 0xFF	; 255
    4af6:	7f 4f       	sbci	r23, 0xFF	; 255
    4af8:	8f 4f       	sbci	r24, 0xFF	; 255
    4afa:	9f 4f       	sbci	r25, 0xFF	; 255
    4afc:	08 95       	ret

00004afe <__fp_split3>:
    4afe:	57 fd       	sbrc	r21, 7
    4b00:	90 58       	subi	r25, 0x80	; 128
    4b02:	44 0f       	add	r20, r20
    4b04:	55 1f       	adc	r21, r21
    4b06:	59 f0       	breq	.+22     	; 0x4b1e <__fp_splitA+0x10>
    4b08:	5f 3f       	cpi	r21, 0xFF	; 255
    4b0a:	71 f0       	breq	.+28     	; 0x4b28 <__fp_splitA+0x1a>
    4b0c:	47 95       	ror	r20

00004b0e <__fp_splitA>:
    4b0e:	88 0f       	add	r24, r24
    4b10:	97 fb       	bst	r25, 7
    4b12:	99 1f       	adc	r25, r25
    4b14:	61 f0       	breq	.+24     	; 0x4b2e <__fp_splitA+0x20>
    4b16:	9f 3f       	cpi	r25, 0xFF	; 255
    4b18:	79 f0       	breq	.+30     	; 0x4b38 <__fp_splitA+0x2a>
    4b1a:	87 95       	ror	r24
    4b1c:	08 95       	ret
    4b1e:	12 16       	cp	r1, r18
    4b20:	13 06       	cpc	r1, r19
    4b22:	14 06       	cpc	r1, r20
    4b24:	55 1f       	adc	r21, r21
    4b26:	f2 cf       	rjmp	.-28     	; 0x4b0c <__fp_split3+0xe>
    4b28:	46 95       	lsr	r20
    4b2a:	f1 df       	rcall	.-30     	; 0x4b0e <__fp_splitA>
    4b2c:	08 c0       	rjmp	.+16     	; 0x4b3e <__fp_splitA+0x30>
    4b2e:	16 16       	cp	r1, r22
    4b30:	17 06       	cpc	r1, r23
    4b32:	18 06       	cpc	r1, r24
    4b34:	99 1f       	adc	r25, r25
    4b36:	f1 cf       	rjmp	.-30     	; 0x4b1a <__fp_splitA+0xc>
    4b38:	86 95       	lsr	r24
    4b3a:	71 05       	cpc	r23, r1
    4b3c:	61 05       	cpc	r22, r1
    4b3e:	08 94       	sec
    4b40:	08 95       	ret

00004b42 <__fp_zero>:
    4b42:	e8 94       	clt

00004b44 <__fp_szero>:
    4b44:	bb 27       	eor	r27, r27
    4b46:	66 27       	eor	r22, r22
    4b48:	77 27       	eor	r23, r23
    4b4a:	cb 01       	movw	r24, r22
    4b4c:	97 f9       	bld	r25, 7
    4b4e:	08 95       	ret

00004b50 <__mulsf3>:
    4b50:	0b d0       	rcall	.+22     	; 0x4b68 <__mulsf3x>
    4b52:	c4 cf       	rjmp	.-120    	; 0x4adc <__fp_round>
    4b54:	b5 df       	rcall	.-150    	; 0x4ac0 <__fp_pscA>
    4b56:	28 f0       	brcs	.+10     	; 0x4b62 <__mulsf3+0x12>
    4b58:	ba df       	rcall	.-140    	; 0x4ace <__fp_pscB>
    4b5a:	18 f0       	brcs	.+6      	; 0x4b62 <__mulsf3+0x12>
    4b5c:	95 23       	and	r25, r21
    4b5e:	09 f0       	breq	.+2      	; 0x4b62 <__mulsf3+0x12>
    4b60:	a6 cf       	rjmp	.-180    	; 0x4aae <__fp_inf>
    4b62:	ab cf       	rjmp	.-170    	; 0x4aba <__fp_nan>
    4b64:	11 24       	eor	r1, r1
    4b66:	ee cf       	rjmp	.-36     	; 0x4b44 <__fp_szero>

00004b68 <__mulsf3x>:
    4b68:	ca df       	rcall	.-108    	; 0x4afe <__fp_split3>
    4b6a:	a0 f3       	brcs	.-24     	; 0x4b54 <__mulsf3+0x4>

00004b6c <__mulsf3_pse>:
    4b6c:	95 9f       	mul	r25, r21
    4b6e:	d1 f3       	breq	.-12     	; 0x4b64 <__mulsf3+0x14>
    4b70:	95 0f       	add	r25, r21
    4b72:	50 e0       	ldi	r21, 0x00	; 0
    4b74:	55 1f       	adc	r21, r21
    4b76:	62 9f       	mul	r22, r18
    4b78:	f0 01       	movw	r30, r0
    4b7a:	72 9f       	mul	r23, r18
    4b7c:	bb 27       	eor	r27, r27
    4b7e:	f0 0d       	add	r31, r0
    4b80:	b1 1d       	adc	r27, r1
    4b82:	63 9f       	mul	r22, r19
    4b84:	aa 27       	eor	r26, r26
    4b86:	f0 0d       	add	r31, r0
    4b88:	b1 1d       	adc	r27, r1
    4b8a:	aa 1f       	adc	r26, r26
    4b8c:	64 9f       	mul	r22, r20
    4b8e:	66 27       	eor	r22, r22
    4b90:	b0 0d       	add	r27, r0
    4b92:	a1 1d       	adc	r26, r1
    4b94:	66 1f       	adc	r22, r22
    4b96:	82 9f       	mul	r24, r18
    4b98:	22 27       	eor	r18, r18
    4b9a:	b0 0d       	add	r27, r0
    4b9c:	a1 1d       	adc	r26, r1
    4b9e:	62 1f       	adc	r22, r18
    4ba0:	73 9f       	mul	r23, r19
    4ba2:	b0 0d       	add	r27, r0
    4ba4:	a1 1d       	adc	r26, r1
    4ba6:	62 1f       	adc	r22, r18
    4ba8:	83 9f       	mul	r24, r19
    4baa:	a0 0d       	add	r26, r0
    4bac:	61 1d       	adc	r22, r1
    4bae:	22 1f       	adc	r18, r18
    4bb0:	74 9f       	mul	r23, r20
    4bb2:	33 27       	eor	r19, r19
    4bb4:	a0 0d       	add	r26, r0
    4bb6:	61 1d       	adc	r22, r1
    4bb8:	23 1f       	adc	r18, r19
    4bba:	84 9f       	mul	r24, r20
    4bbc:	60 0d       	add	r22, r0
    4bbe:	21 1d       	adc	r18, r1
    4bc0:	82 2f       	mov	r24, r18
    4bc2:	76 2f       	mov	r23, r22
    4bc4:	6a 2f       	mov	r22, r26
    4bc6:	11 24       	eor	r1, r1
    4bc8:	9f 57       	subi	r25, 0x7F	; 127
    4bca:	50 40       	sbci	r21, 0x00	; 0
    4bcc:	8a f0       	brmi	.+34     	; 0x4bf0 <__mulsf3_pse+0x84>
    4bce:	e1 f0       	breq	.+56     	; 0x4c08 <__mulsf3_pse+0x9c>
    4bd0:	88 23       	and	r24, r24
    4bd2:	4a f0       	brmi	.+18     	; 0x4be6 <__mulsf3_pse+0x7a>
    4bd4:	ee 0f       	add	r30, r30
    4bd6:	ff 1f       	adc	r31, r31
    4bd8:	bb 1f       	adc	r27, r27
    4bda:	66 1f       	adc	r22, r22
    4bdc:	77 1f       	adc	r23, r23
    4bde:	88 1f       	adc	r24, r24
    4be0:	91 50       	subi	r25, 0x01	; 1
    4be2:	50 40       	sbci	r21, 0x00	; 0
    4be4:	a9 f7       	brne	.-22     	; 0x4bd0 <__mulsf3_pse+0x64>
    4be6:	9e 3f       	cpi	r25, 0xFE	; 254
    4be8:	51 05       	cpc	r21, r1
    4bea:	70 f0       	brcs	.+28     	; 0x4c08 <__mulsf3_pse+0x9c>
    4bec:	60 cf       	rjmp	.-320    	; 0x4aae <__fp_inf>
    4bee:	aa cf       	rjmp	.-172    	; 0x4b44 <__fp_szero>
    4bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    4bf2:	ec f3       	brlt	.-6      	; 0x4bee <__mulsf3_pse+0x82>
    4bf4:	98 3e       	cpi	r25, 0xE8	; 232
    4bf6:	dc f3       	brlt	.-10     	; 0x4bee <__mulsf3_pse+0x82>
    4bf8:	86 95       	lsr	r24
    4bfa:	77 95       	ror	r23
    4bfc:	67 95       	ror	r22
    4bfe:	b7 95       	ror	r27
    4c00:	f7 95       	ror	r31
    4c02:	e7 95       	ror	r30
    4c04:	9f 5f       	subi	r25, 0xFF	; 255
    4c06:	c1 f7       	brne	.-16     	; 0x4bf8 <__mulsf3_pse+0x8c>
    4c08:	fe 2b       	or	r31, r30
    4c0a:	88 0f       	add	r24, r24
    4c0c:	91 1d       	adc	r25, r1
    4c0e:	96 95       	lsr	r25
    4c10:	87 95       	ror	r24
    4c12:	97 f9       	bld	r25, 7
    4c14:	08 95       	ret

00004c16 <__tablejump2__>:
    4c16:	ee 0f       	add	r30, r30
    4c18:	ff 1f       	adc	r31, r31
    4c1a:	88 1f       	adc	r24, r24
    4c1c:	8b bf       	out	0x3b, r24	; 59
    4c1e:	07 90       	elpm	r0, Z+
    4c20:	f6 91       	elpm	r31, Z
    4c22:	e0 2d       	mov	r30, r0
    4c24:	19 94       	eijmp

00004c26 <malloc>:
    4c26:	0f 93       	push	r16
    4c28:	1f 93       	push	r17
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	82 30       	cpi	r24, 0x02	; 2
    4c30:	91 05       	cpc	r25, r1
    4c32:	10 f4       	brcc	.+4      	; 0x4c38 <malloc+0x12>
    4c34:	82 e0       	ldi	r24, 0x02	; 2
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	e0 91 77 12 	lds	r30, 0x1277	; 0x801277 <__flp>
    4c3c:	f0 91 78 12 	lds	r31, 0x1278	; 0x801278 <__flp+0x1>
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	a0 e0       	ldi	r26, 0x00	; 0
    4c46:	b0 e0       	ldi	r27, 0x00	; 0
    4c48:	30 97       	sbiw	r30, 0x00	; 0
    4c4a:	19 f1       	breq	.+70     	; 0x4c92 <malloc+0x6c>
    4c4c:	40 81       	ld	r20, Z
    4c4e:	51 81       	ldd	r21, Z+1	; 0x01
    4c50:	02 81       	ldd	r16, Z+2	; 0x02
    4c52:	13 81       	ldd	r17, Z+3	; 0x03
    4c54:	48 17       	cp	r20, r24
    4c56:	59 07       	cpc	r21, r25
    4c58:	c8 f0       	brcs	.+50     	; 0x4c8c <malloc+0x66>
    4c5a:	84 17       	cp	r24, r20
    4c5c:	95 07       	cpc	r25, r21
    4c5e:	69 f4       	brne	.+26     	; 0x4c7a <malloc+0x54>
    4c60:	10 97       	sbiw	r26, 0x00	; 0
    4c62:	31 f0       	breq	.+12     	; 0x4c70 <malloc+0x4a>
    4c64:	12 96       	adiw	r26, 0x02	; 2
    4c66:	0c 93       	st	X, r16
    4c68:	12 97       	sbiw	r26, 0x02	; 2
    4c6a:	13 96       	adiw	r26, 0x03	; 3
    4c6c:	1c 93       	st	X, r17
    4c6e:	27 c0       	rjmp	.+78     	; 0x4cbe <malloc+0x98>
    4c70:	00 93 77 12 	sts	0x1277, r16	; 0x801277 <__flp>
    4c74:	10 93 78 12 	sts	0x1278, r17	; 0x801278 <__flp+0x1>
    4c78:	22 c0       	rjmp	.+68     	; 0x4cbe <malloc+0x98>
    4c7a:	21 15       	cp	r18, r1
    4c7c:	31 05       	cpc	r19, r1
    4c7e:	19 f0       	breq	.+6      	; 0x4c86 <malloc+0x60>
    4c80:	42 17       	cp	r20, r18
    4c82:	53 07       	cpc	r21, r19
    4c84:	18 f4       	brcc	.+6      	; 0x4c8c <malloc+0x66>
    4c86:	9a 01       	movw	r18, r20
    4c88:	bd 01       	movw	r22, r26
    4c8a:	ef 01       	movw	r28, r30
    4c8c:	df 01       	movw	r26, r30
    4c8e:	f8 01       	movw	r30, r16
    4c90:	db cf       	rjmp	.-74     	; 0x4c48 <malloc+0x22>
    4c92:	21 15       	cp	r18, r1
    4c94:	31 05       	cpc	r19, r1
    4c96:	f9 f0       	breq	.+62     	; 0x4cd6 <malloc+0xb0>
    4c98:	28 1b       	sub	r18, r24
    4c9a:	39 0b       	sbc	r19, r25
    4c9c:	24 30       	cpi	r18, 0x04	; 4
    4c9e:	31 05       	cpc	r19, r1
    4ca0:	80 f4       	brcc	.+32     	; 0x4cc2 <malloc+0x9c>
    4ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ca6:	61 15       	cp	r22, r1
    4ca8:	71 05       	cpc	r23, r1
    4caa:	21 f0       	breq	.+8      	; 0x4cb4 <malloc+0x8e>
    4cac:	fb 01       	movw	r30, r22
    4cae:	93 83       	std	Z+3, r25	; 0x03
    4cb0:	82 83       	std	Z+2, r24	; 0x02
    4cb2:	04 c0       	rjmp	.+8      	; 0x4cbc <malloc+0x96>
    4cb4:	90 93 78 12 	sts	0x1278, r25	; 0x801278 <__flp+0x1>
    4cb8:	80 93 77 12 	sts	0x1277, r24	; 0x801277 <__flp>
    4cbc:	fe 01       	movw	r30, r28
    4cbe:	32 96       	adiw	r30, 0x02	; 2
    4cc0:	44 c0       	rjmp	.+136    	; 0x4d4a <malloc+0x124>
    4cc2:	fe 01       	movw	r30, r28
    4cc4:	e2 0f       	add	r30, r18
    4cc6:	f3 1f       	adc	r31, r19
    4cc8:	81 93       	st	Z+, r24
    4cca:	91 93       	st	Z+, r25
    4ccc:	22 50       	subi	r18, 0x02	; 2
    4cce:	31 09       	sbc	r19, r1
    4cd0:	39 83       	std	Y+1, r19	; 0x01
    4cd2:	28 83       	st	Y, r18
    4cd4:	3a c0       	rjmp	.+116    	; 0x4d4a <malloc+0x124>
    4cd6:	20 91 75 12 	lds	r18, 0x1275	; 0x801275 <__brkval>
    4cda:	30 91 76 12 	lds	r19, 0x1276	; 0x801276 <__brkval+0x1>
    4cde:	23 2b       	or	r18, r19
    4ce0:	41 f4       	brne	.+16     	; 0x4cf2 <malloc+0xcc>
    4ce2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4ce6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4cea:	30 93 76 12 	sts	0x1276, r19	; 0x801276 <__brkval+0x1>
    4cee:	20 93 75 12 	sts	0x1275, r18	; 0x801275 <__brkval>
    4cf2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4cf6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4cfa:	21 15       	cp	r18, r1
    4cfc:	31 05       	cpc	r19, r1
    4cfe:	41 f4       	brne	.+16     	; 0x4d10 <malloc+0xea>
    4d00:	2d b7       	in	r18, 0x3d	; 61
    4d02:	3e b7       	in	r19, 0x3e	; 62
    4d04:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4d08:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4d0c:	24 1b       	sub	r18, r20
    4d0e:	35 0b       	sbc	r19, r21
    4d10:	e0 91 75 12 	lds	r30, 0x1275	; 0x801275 <__brkval>
    4d14:	f0 91 76 12 	lds	r31, 0x1276	; 0x801276 <__brkval+0x1>
    4d18:	e2 17       	cp	r30, r18
    4d1a:	f3 07       	cpc	r31, r19
    4d1c:	a0 f4       	brcc	.+40     	; 0x4d46 <malloc+0x120>
    4d1e:	2e 1b       	sub	r18, r30
    4d20:	3f 0b       	sbc	r19, r31
    4d22:	28 17       	cp	r18, r24
    4d24:	39 07       	cpc	r19, r25
    4d26:	78 f0       	brcs	.+30     	; 0x4d46 <malloc+0x120>
    4d28:	ac 01       	movw	r20, r24
    4d2a:	4e 5f       	subi	r20, 0xFE	; 254
    4d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d2e:	24 17       	cp	r18, r20
    4d30:	35 07       	cpc	r19, r21
    4d32:	48 f0       	brcs	.+18     	; 0x4d46 <malloc+0x120>
    4d34:	4e 0f       	add	r20, r30
    4d36:	5f 1f       	adc	r21, r31
    4d38:	50 93 76 12 	sts	0x1276, r21	; 0x801276 <__brkval+0x1>
    4d3c:	40 93 75 12 	sts	0x1275, r20	; 0x801275 <__brkval>
    4d40:	81 93       	st	Z+, r24
    4d42:	91 93       	st	Z+, r25
    4d44:	02 c0       	rjmp	.+4      	; 0x4d4a <malloc+0x124>
    4d46:	e0 e0       	ldi	r30, 0x00	; 0
    4d48:	f0 e0       	ldi	r31, 0x00	; 0
    4d4a:	cf 01       	movw	r24, r30
    4d4c:	df 91       	pop	r29
    4d4e:	cf 91       	pop	r28
    4d50:	1f 91       	pop	r17
    4d52:	0f 91       	pop	r16
    4d54:	08 95       	ret

00004d56 <free>:
    4d56:	cf 93       	push	r28
    4d58:	df 93       	push	r29
    4d5a:	00 97       	sbiw	r24, 0x00	; 0
    4d5c:	09 f4       	brne	.+2      	; 0x4d60 <free+0xa>
    4d5e:	81 c0       	rjmp	.+258    	; 0x4e62 <free+0x10c>
    4d60:	fc 01       	movw	r30, r24
    4d62:	32 97       	sbiw	r30, 0x02	; 2
    4d64:	13 82       	std	Z+3, r1	; 0x03
    4d66:	12 82       	std	Z+2, r1	; 0x02
    4d68:	a0 91 77 12 	lds	r26, 0x1277	; 0x801277 <__flp>
    4d6c:	b0 91 78 12 	lds	r27, 0x1278	; 0x801278 <__flp+0x1>
    4d70:	10 97       	sbiw	r26, 0x00	; 0
    4d72:	81 f4       	brne	.+32     	; 0x4d94 <free+0x3e>
    4d74:	20 81       	ld	r18, Z
    4d76:	31 81       	ldd	r19, Z+1	; 0x01
    4d78:	82 0f       	add	r24, r18
    4d7a:	93 1f       	adc	r25, r19
    4d7c:	20 91 75 12 	lds	r18, 0x1275	; 0x801275 <__brkval>
    4d80:	30 91 76 12 	lds	r19, 0x1276	; 0x801276 <__brkval+0x1>
    4d84:	28 17       	cp	r18, r24
    4d86:	39 07       	cpc	r19, r25
    4d88:	51 f5       	brne	.+84     	; 0x4dde <free+0x88>
    4d8a:	f0 93 76 12 	sts	0x1276, r31	; 0x801276 <__brkval+0x1>
    4d8e:	e0 93 75 12 	sts	0x1275, r30	; 0x801275 <__brkval>
    4d92:	67 c0       	rjmp	.+206    	; 0x4e62 <free+0x10c>
    4d94:	ed 01       	movw	r28, r26
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	ce 17       	cp	r28, r30
    4d9c:	df 07       	cpc	r29, r31
    4d9e:	40 f4       	brcc	.+16     	; 0x4db0 <free+0x5a>
    4da0:	4a 81       	ldd	r20, Y+2	; 0x02
    4da2:	5b 81       	ldd	r21, Y+3	; 0x03
    4da4:	9e 01       	movw	r18, r28
    4da6:	41 15       	cp	r20, r1
    4da8:	51 05       	cpc	r21, r1
    4daa:	f1 f0       	breq	.+60     	; 0x4de8 <free+0x92>
    4dac:	ea 01       	movw	r28, r20
    4dae:	f5 cf       	rjmp	.-22     	; 0x4d9a <free+0x44>
    4db0:	d3 83       	std	Z+3, r29	; 0x03
    4db2:	c2 83       	std	Z+2, r28	; 0x02
    4db4:	40 81       	ld	r20, Z
    4db6:	51 81       	ldd	r21, Z+1	; 0x01
    4db8:	84 0f       	add	r24, r20
    4dba:	95 1f       	adc	r25, r21
    4dbc:	c8 17       	cp	r28, r24
    4dbe:	d9 07       	cpc	r29, r25
    4dc0:	59 f4       	brne	.+22     	; 0x4dd8 <free+0x82>
    4dc2:	88 81       	ld	r24, Y
    4dc4:	99 81       	ldd	r25, Y+1	; 0x01
    4dc6:	84 0f       	add	r24, r20
    4dc8:	95 1f       	adc	r25, r21
    4dca:	02 96       	adiw	r24, 0x02	; 2
    4dcc:	91 83       	std	Z+1, r25	; 0x01
    4dce:	80 83       	st	Z, r24
    4dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd4:	93 83       	std	Z+3, r25	; 0x03
    4dd6:	82 83       	std	Z+2, r24	; 0x02
    4dd8:	21 15       	cp	r18, r1
    4dda:	31 05       	cpc	r19, r1
    4ddc:	29 f4       	brne	.+10     	; 0x4de8 <free+0x92>
    4dde:	f0 93 78 12 	sts	0x1278, r31	; 0x801278 <__flp+0x1>
    4de2:	e0 93 77 12 	sts	0x1277, r30	; 0x801277 <__flp>
    4de6:	3d c0       	rjmp	.+122    	; 0x4e62 <free+0x10c>
    4de8:	e9 01       	movw	r28, r18
    4dea:	fb 83       	std	Y+3, r31	; 0x03
    4dec:	ea 83       	std	Y+2, r30	; 0x02
    4dee:	49 91       	ld	r20, Y+
    4df0:	59 91       	ld	r21, Y+
    4df2:	c4 0f       	add	r28, r20
    4df4:	d5 1f       	adc	r29, r21
    4df6:	ec 17       	cp	r30, r28
    4df8:	fd 07       	cpc	r31, r29
    4dfa:	61 f4       	brne	.+24     	; 0x4e14 <free+0xbe>
    4dfc:	80 81       	ld	r24, Z
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	84 0f       	add	r24, r20
    4e02:	95 1f       	adc	r25, r21
    4e04:	02 96       	adiw	r24, 0x02	; 2
    4e06:	e9 01       	movw	r28, r18
    4e08:	99 83       	std	Y+1, r25	; 0x01
    4e0a:	88 83       	st	Y, r24
    4e0c:	82 81       	ldd	r24, Z+2	; 0x02
    4e0e:	93 81       	ldd	r25, Z+3	; 0x03
    4e10:	9b 83       	std	Y+3, r25	; 0x03
    4e12:	8a 83       	std	Y+2, r24	; 0x02
    4e14:	e0 e0       	ldi	r30, 0x00	; 0
    4e16:	f0 e0       	ldi	r31, 0x00	; 0
    4e18:	12 96       	adiw	r26, 0x02	; 2
    4e1a:	8d 91       	ld	r24, X+
    4e1c:	9c 91       	ld	r25, X
    4e1e:	13 97       	sbiw	r26, 0x03	; 3
    4e20:	00 97       	sbiw	r24, 0x00	; 0
    4e22:	19 f0       	breq	.+6      	; 0x4e2a <free+0xd4>
    4e24:	fd 01       	movw	r30, r26
    4e26:	dc 01       	movw	r26, r24
    4e28:	f7 cf       	rjmp	.-18     	; 0x4e18 <free+0xc2>
    4e2a:	8d 91       	ld	r24, X+
    4e2c:	9c 91       	ld	r25, X
    4e2e:	11 97       	sbiw	r26, 0x01	; 1
    4e30:	9d 01       	movw	r18, r26
    4e32:	2e 5f       	subi	r18, 0xFE	; 254
    4e34:	3f 4f       	sbci	r19, 0xFF	; 255
    4e36:	82 0f       	add	r24, r18
    4e38:	93 1f       	adc	r25, r19
    4e3a:	20 91 75 12 	lds	r18, 0x1275	; 0x801275 <__brkval>
    4e3e:	30 91 76 12 	lds	r19, 0x1276	; 0x801276 <__brkval+0x1>
    4e42:	28 17       	cp	r18, r24
    4e44:	39 07       	cpc	r19, r25
    4e46:	69 f4       	brne	.+26     	; 0x4e62 <free+0x10c>
    4e48:	30 97       	sbiw	r30, 0x00	; 0
    4e4a:	29 f4       	brne	.+10     	; 0x4e56 <free+0x100>
    4e4c:	10 92 78 12 	sts	0x1278, r1	; 0x801278 <__flp+0x1>
    4e50:	10 92 77 12 	sts	0x1277, r1	; 0x801277 <__flp>
    4e54:	02 c0       	rjmp	.+4      	; 0x4e5a <free+0x104>
    4e56:	13 82       	std	Z+3, r1	; 0x03
    4e58:	12 82       	std	Z+2, r1	; 0x02
    4e5a:	b0 93 76 12 	sts	0x1276, r27	; 0x801276 <__brkval+0x1>
    4e5e:	a0 93 75 12 	sts	0x1275, r26	; 0x801275 <__brkval>
    4e62:	df 91       	pop	r29
    4e64:	cf 91       	pop	r28
    4e66:	08 95       	ret

00004e68 <abort>:
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	f8 94       	cli
    4e6e:	7d c3       	rjmp	.+1786   	; 0x556a <_exit>

00004e70 <memcpy>:
    4e70:	fb 01       	movw	r30, r22
    4e72:	dc 01       	movw	r26, r24
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <memcpy+0xa>
    4e76:	01 90       	ld	r0, Z+
    4e78:	0d 92       	st	X+, r0
    4e7a:	41 50       	subi	r20, 0x01	; 1
    4e7c:	50 40       	sbci	r21, 0x00	; 0
    4e7e:	d8 f7       	brcc	.-10     	; 0x4e76 <memcpy+0x6>
    4e80:	08 95       	ret

00004e82 <memset>:
    4e82:	dc 01       	movw	r26, r24
    4e84:	01 c0       	rjmp	.+2      	; 0x4e88 <memset+0x6>
    4e86:	6d 93       	st	X+, r22
    4e88:	41 50       	subi	r20, 0x01	; 1
    4e8a:	50 40       	sbci	r21, 0x00	; 0
    4e8c:	e0 f7       	brcc	.-8      	; 0x4e86 <memset+0x4>
    4e8e:	08 95       	ret

00004e90 <strcasestr>:
    4e90:	fb 01       	movw	r30, r22
    4e92:	51 91       	ld	r21, Z+
    4e94:	55 23       	and	r21, r21
    4e96:	b1 f0       	breq	.+44     	; 0x4ec4 <strcasestr+0x34>
    4e98:	bf 01       	movw	r22, r30
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	05 2e       	mov	r0, r21
    4e9e:	4d 91       	ld	r20, X+
    4ea0:	44 23       	and	r20, r20
    4ea2:	69 f0       	breq	.+26     	; 0x4ebe <strcasestr+0x2e>
    4ea4:	10 d0       	rcall	.+32     	; 0x4ec6 <strcasestr+0x36>
    4ea6:	d9 f7       	brne	.-10     	; 0x4e9e <strcasestr+0xe>
    4ea8:	cd 01       	movw	r24, r26
    4eaa:	01 90       	ld	r0, Z+
    4eac:	00 20       	and	r0, r0
    4eae:	49 f0       	breq	.+18     	; 0x4ec2 <strcasestr+0x32>
    4eb0:	4d 91       	ld	r20, X+
    4eb2:	41 11       	cpse	r20, r1
    4eb4:	08 d0       	rcall	.+16     	; 0x4ec6 <strcasestr+0x36>
    4eb6:	c9 f3       	breq	.-14     	; 0x4eaa <strcasestr+0x1a>
    4eb8:	fb 01       	movw	r30, r22
    4eba:	41 11       	cpse	r20, r1
    4ebc:	ee cf       	rjmp	.-36     	; 0x4e9a <strcasestr+0xa>
    4ebe:	81 e0       	ldi	r24, 0x01	; 1
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	08 95       	ret
    4ec6:	40 25       	eor	r20, r0
    4ec8:	39 f0       	breq	.+14     	; 0x4ed8 <strcasestr+0x48>
    4eca:	40 32       	cpi	r20, 0x20	; 32
    4ecc:	29 f4       	brne	.+10     	; 0x4ed8 <strcasestr+0x48>
    4ece:	40 29       	or	r20, r0
    4ed0:	4b 57       	subi	r20, 0x7B	; 123
    4ed2:	46 5e       	subi	r20, 0xE6	; 230
    4ed4:	08 f0       	brcs	.+2      	; 0x4ed8 <strcasestr+0x48>
    4ed6:	18 94       	sez
    4ed8:	08 95       	ret

00004eda <strcat>:
    4eda:	fb 01       	movw	r30, r22
    4edc:	dc 01       	movw	r26, r24
    4ede:	0d 90       	ld	r0, X+
    4ee0:	00 20       	and	r0, r0
    4ee2:	e9 f7       	brne	.-6      	; 0x4ede <strcat+0x4>
    4ee4:	11 97       	sbiw	r26, 0x01	; 1
    4ee6:	01 90       	ld	r0, Z+
    4ee8:	0d 92       	st	X+, r0
    4eea:	00 20       	and	r0, r0
    4eec:	e1 f7       	brne	.-8      	; 0x4ee6 <strcat+0xc>
    4eee:	08 95       	ret

00004ef0 <strcpy>:
    4ef0:	fb 01       	movw	r30, r22
    4ef2:	dc 01       	movw	r26, r24
    4ef4:	01 90       	ld	r0, Z+
    4ef6:	0d 92       	st	X+, r0
    4ef8:	00 20       	and	r0, r0
    4efa:	e1 f7       	brne	.-8      	; 0x4ef4 <strcpy+0x4>
    4efc:	08 95       	ret

00004efe <strncasecmp>:
    4efe:	fb 01       	movw	r30, r22
    4f00:	dc 01       	movw	r26, r24
    4f02:	41 50       	subi	r20, 0x01	; 1
    4f04:	50 40       	sbci	r21, 0x00	; 0
    4f06:	88 f0       	brcs	.+34     	; 0x4f2a <strncasecmp+0x2c>
    4f08:	8d 91       	ld	r24, X+
    4f0a:	81 34       	cpi	r24, 0x41	; 65
    4f0c:	1c f0       	brlt	.+6      	; 0x4f14 <strncasecmp+0x16>
    4f0e:	8b 35       	cpi	r24, 0x5B	; 91
    4f10:	0c f4       	brge	.+2      	; 0x4f14 <strncasecmp+0x16>
    4f12:	80 5e       	subi	r24, 0xE0	; 224
    4f14:	61 91       	ld	r22, Z+
    4f16:	61 34       	cpi	r22, 0x41	; 65
    4f18:	1c f0       	brlt	.+6      	; 0x4f20 <strncasecmp+0x22>
    4f1a:	6b 35       	cpi	r22, 0x5B	; 91
    4f1c:	0c f4       	brge	.+2      	; 0x4f20 <strncasecmp+0x22>
    4f1e:	60 5e       	subi	r22, 0xE0	; 224
    4f20:	86 1b       	sub	r24, r22
    4f22:	61 11       	cpse	r22, r1
    4f24:	71 f3       	breq	.-36     	; 0x4f02 <strncasecmp+0x4>
    4f26:	99 0b       	sbc	r25, r25
    4f28:	08 95       	ret
    4f2a:	88 1b       	sub	r24, r24
    4f2c:	fc cf       	rjmp	.-8      	; 0x4f26 <strncasecmp+0x28>

00004f2e <printf>:
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	ae 01       	movw	r20, r28
    4f38:	4a 5f       	subi	r20, 0xFA	; 250
    4f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f3c:	fa 01       	movw	r30, r20
    4f3e:	61 91       	ld	r22, Z+
    4f40:	71 91       	ld	r23, Z+
    4f42:	af 01       	movw	r20, r30
    4f44:	80 91 7b 12 	lds	r24, 0x127B	; 0x80127b <__iob+0x2>
    4f48:	90 91 7c 12 	lds	r25, 0x127C	; 0x80127c <__iob+0x3>
    4f4c:	61 d0       	rcall	.+194    	; 0x5010 <vfprintf>
    4f4e:	df 91       	pop	r29
    4f50:	cf 91       	pop	r28
    4f52:	08 95       	ret

00004f54 <puts>:
    4f54:	0f 93       	push	r16
    4f56:	1f 93       	push	r17
    4f58:	cf 93       	push	r28
    4f5a:	df 93       	push	r29
    4f5c:	e0 91 7b 12 	lds	r30, 0x127B	; 0x80127b <__iob+0x2>
    4f60:	f0 91 7c 12 	lds	r31, 0x127C	; 0x80127c <__iob+0x3>
    4f64:	23 81       	ldd	r18, Z+3	; 0x03
    4f66:	21 ff       	sbrs	r18, 1
    4f68:	1b c0       	rjmp	.+54     	; 0x4fa0 <puts+0x4c>
    4f6a:	8c 01       	movw	r16, r24
    4f6c:	d0 e0       	ldi	r29, 0x00	; 0
    4f6e:	c0 e0       	ldi	r28, 0x00	; 0
    4f70:	f8 01       	movw	r30, r16
    4f72:	81 91       	ld	r24, Z+
    4f74:	8f 01       	movw	r16, r30
    4f76:	60 91 7b 12 	lds	r22, 0x127B	; 0x80127b <__iob+0x2>
    4f7a:	70 91 7c 12 	lds	r23, 0x127C	; 0x80127c <__iob+0x3>
    4f7e:	db 01       	movw	r26, r22
    4f80:	18 96       	adiw	r26, 0x08	; 8
    4f82:	ed 91       	ld	r30, X+
    4f84:	fc 91       	ld	r31, X
    4f86:	19 97       	sbiw	r26, 0x09	; 9
    4f88:	88 23       	and	r24, r24
    4f8a:	31 f0       	breq	.+12     	; 0x4f98 <puts+0x44>
    4f8c:	19 95       	eicall
    4f8e:	89 2b       	or	r24, r25
    4f90:	79 f3       	breq	.-34     	; 0x4f70 <puts+0x1c>
    4f92:	df ef       	ldi	r29, 0xFF	; 255
    4f94:	cf ef       	ldi	r28, 0xFF	; 255
    4f96:	ec cf       	rjmp	.-40     	; 0x4f70 <puts+0x1c>
    4f98:	8a e0       	ldi	r24, 0x0A	; 10
    4f9a:	19 95       	eicall
    4f9c:	89 2b       	or	r24, r25
    4f9e:	19 f0       	breq	.+6      	; 0x4fa6 <puts+0x52>
    4fa0:	8f ef       	ldi	r24, 0xFF	; 255
    4fa2:	9f ef       	ldi	r25, 0xFF	; 255
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <puts+0x56>
    4fa6:	8d 2f       	mov	r24, r29
    4fa8:	9c 2f       	mov	r25, r28
    4faa:	df 91       	pop	r29
    4fac:	cf 91       	pop	r28
    4fae:	1f 91       	pop	r17
    4fb0:	0f 91       	pop	r16
    4fb2:	08 95       	ret

00004fb4 <sprintf>:
    4fb4:	0f 93       	push	r16
    4fb6:	1f 93       	push	r17
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	2e 97       	sbiw	r28, 0x0e	; 14
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	0e 89       	ldd	r16, Y+22	; 0x16
    4fce:	1f 89       	ldd	r17, Y+23	; 0x17
    4fd0:	86 e0       	ldi	r24, 0x06	; 6
    4fd2:	8c 83       	std	Y+4, r24	; 0x04
    4fd4:	1a 83       	std	Y+2, r17	; 0x02
    4fd6:	09 83       	std	Y+1, r16	; 0x01
    4fd8:	8f ef       	ldi	r24, 0xFF	; 255
    4fda:	9f e7       	ldi	r25, 0x7F	; 127
    4fdc:	9e 83       	std	Y+6, r25	; 0x06
    4fde:	8d 83       	std	Y+5, r24	; 0x05
    4fe0:	ae 01       	movw	r20, r28
    4fe2:	46 5e       	subi	r20, 0xE6	; 230
    4fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    4fe6:	68 8d       	ldd	r22, Y+24	; 0x18
    4fe8:	79 8d       	ldd	r23, Y+25	; 0x19
    4fea:	ce 01       	movw	r24, r28
    4fec:	01 96       	adiw	r24, 0x01	; 1
    4fee:	10 d0       	rcall	.+32     	; 0x5010 <vfprintf>
    4ff0:	ef 81       	ldd	r30, Y+7	; 0x07
    4ff2:	f8 85       	ldd	r31, Y+8	; 0x08
    4ff4:	e0 0f       	add	r30, r16
    4ff6:	f1 1f       	adc	r31, r17
    4ff8:	10 82       	st	Z, r1
    4ffa:	2e 96       	adiw	r28, 0x0e	; 14
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	f8 94       	cli
    5000:	de bf       	out	0x3e, r29	; 62
    5002:	0f be       	out	0x3f, r0	; 63
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	df 91       	pop	r29
    5008:	cf 91       	pop	r28
    500a:	1f 91       	pop	r17
    500c:	0f 91       	pop	r16
    500e:	08 95       	ret

00005010 <vfprintf>:
    5010:	2f 92       	push	r2
    5012:	3f 92       	push	r3
    5014:	4f 92       	push	r4
    5016:	5f 92       	push	r5
    5018:	6f 92       	push	r6
    501a:	7f 92       	push	r7
    501c:	8f 92       	push	r8
    501e:	9f 92       	push	r9
    5020:	af 92       	push	r10
    5022:	bf 92       	push	r11
    5024:	cf 92       	push	r12
    5026:	df 92       	push	r13
    5028:	ef 92       	push	r14
    502a:	ff 92       	push	r15
    502c:	0f 93       	push	r16
    502e:	1f 93       	push	r17
    5030:	cf 93       	push	r28
    5032:	df 93       	push	r29
    5034:	cd b7       	in	r28, 0x3d	; 61
    5036:	de b7       	in	r29, 0x3e	; 62
    5038:	2b 97       	sbiw	r28, 0x0b	; 11
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	f8 94       	cli
    503e:	de bf       	out	0x3e, r29	; 62
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	cd bf       	out	0x3d, r28	; 61
    5044:	6c 01       	movw	r12, r24
    5046:	7b 01       	movw	r14, r22
    5048:	8a 01       	movw	r16, r20
    504a:	fc 01       	movw	r30, r24
    504c:	17 82       	std	Z+7, r1	; 0x07
    504e:	16 82       	std	Z+6, r1	; 0x06
    5050:	83 81       	ldd	r24, Z+3	; 0x03
    5052:	81 ff       	sbrs	r24, 1
    5054:	bf c1       	rjmp	.+894    	; 0x53d4 <vfprintf+0x3c4>
    5056:	ce 01       	movw	r24, r28
    5058:	01 96       	adiw	r24, 0x01	; 1
    505a:	3c 01       	movw	r6, r24
    505c:	f6 01       	movw	r30, r12
    505e:	93 81       	ldd	r25, Z+3	; 0x03
    5060:	f7 01       	movw	r30, r14
    5062:	93 fd       	sbrc	r25, 3
    5064:	85 91       	lpm	r24, Z+
    5066:	93 ff       	sbrs	r25, 3
    5068:	81 91       	ld	r24, Z+
    506a:	7f 01       	movw	r14, r30
    506c:	88 23       	and	r24, r24
    506e:	09 f4       	brne	.+2      	; 0x5072 <vfprintf+0x62>
    5070:	ad c1       	rjmp	.+858    	; 0x53cc <vfprintf+0x3bc>
    5072:	85 32       	cpi	r24, 0x25	; 37
    5074:	39 f4       	brne	.+14     	; 0x5084 <vfprintf+0x74>
    5076:	93 fd       	sbrc	r25, 3
    5078:	85 91       	lpm	r24, Z+
    507a:	93 ff       	sbrs	r25, 3
    507c:	81 91       	ld	r24, Z+
    507e:	7f 01       	movw	r14, r30
    5080:	85 32       	cpi	r24, 0x25	; 37
    5082:	21 f4       	brne	.+8      	; 0x508c <vfprintf+0x7c>
    5084:	b6 01       	movw	r22, r12
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	d6 d1       	rcall	.+940    	; 0x5436 <fputc>
    508a:	e8 cf       	rjmp	.-48     	; 0x505c <vfprintf+0x4c>
    508c:	91 2c       	mov	r9, r1
    508e:	21 2c       	mov	r2, r1
    5090:	31 2c       	mov	r3, r1
    5092:	ff e1       	ldi	r31, 0x1F	; 31
    5094:	f3 15       	cp	r31, r3
    5096:	d8 f0       	brcs	.+54     	; 0x50ce <vfprintf+0xbe>
    5098:	8b 32       	cpi	r24, 0x2B	; 43
    509a:	79 f0       	breq	.+30     	; 0x50ba <vfprintf+0xaa>
    509c:	38 f4       	brcc	.+14     	; 0x50ac <vfprintf+0x9c>
    509e:	80 32       	cpi	r24, 0x20	; 32
    50a0:	79 f0       	breq	.+30     	; 0x50c0 <vfprintf+0xb0>
    50a2:	83 32       	cpi	r24, 0x23	; 35
    50a4:	a1 f4       	brne	.+40     	; 0x50ce <vfprintf+0xbe>
    50a6:	23 2d       	mov	r18, r3
    50a8:	20 61       	ori	r18, 0x10	; 16
    50aa:	1d c0       	rjmp	.+58     	; 0x50e6 <vfprintf+0xd6>
    50ac:	8d 32       	cpi	r24, 0x2D	; 45
    50ae:	61 f0       	breq	.+24     	; 0x50c8 <vfprintf+0xb8>
    50b0:	80 33       	cpi	r24, 0x30	; 48
    50b2:	69 f4       	brne	.+26     	; 0x50ce <vfprintf+0xbe>
    50b4:	23 2d       	mov	r18, r3
    50b6:	21 60       	ori	r18, 0x01	; 1
    50b8:	16 c0       	rjmp	.+44     	; 0x50e6 <vfprintf+0xd6>
    50ba:	83 2d       	mov	r24, r3
    50bc:	82 60       	ori	r24, 0x02	; 2
    50be:	38 2e       	mov	r3, r24
    50c0:	e3 2d       	mov	r30, r3
    50c2:	e4 60       	ori	r30, 0x04	; 4
    50c4:	3e 2e       	mov	r3, r30
    50c6:	2a c0       	rjmp	.+84     	; 0x511c <vfprintf+0x10c>
    50c8:	f3 2d       	mov	r31, r3
    50ca:	f8 60       	ori	r31, 0x08	; 8
    50cc:	1d c0       	rjmp	.+58     	; 0x5108 <vfprintf+0xf8>
    50ce:	37 fc       	sbrc	r3, 7
    50d0:	2d c0       	rjmp	.+90     	; 0x512c <vfprintf+0x11c>
    50d2:	20 ed       	ldi	r18, 0xD0	; 208
    50d4:	28 0f       	add	r18, r24
    50d6:	2a 30       	cpi	r18, 0x0A	; 10
    50d8:	40 f0       	brcs	.+16     	; 0x50ea <vfprintf+0xda>
    50da:	8e 32       	cpi	r24, 0x2E	; 46
    50dc:	b9 f4       	brne	.+46     	; 0x510c <vfprintf+0xfc>
    50de:	36 fc       	sbrc	r3, 6
    50e0:	75 c1       	rjmp	.+746    	; 0x53cc <vfprintf+0x3bc>
    50e2:	23 2d       	mov	r18, r3
    50e4:	20 64       	ori	r18, 0x40	; 64
    50e6:	32 2e       	mov	r3, r18
    50e8:	19 c0       	rjmp	.+50     	; 0x511c <vfprintf+0x10c>
    50ea:	36 fe       	sbrs	r3, 6
    50ec:	06 c0       	rjmp	.+12     	; 0x50fa <vfprintf+0xea>
    50ee:	8a e0       	ldi	r24, 0x0A	; 10
    50f0:	98 9e       	mul	r9, r24
    50f2:	20 0d       	add	r18, r0
    50f4:	11 24       	eor	r1, r1
    50f6:	92 2e       	mov	r9, r18
    50f8:	11 c0       	rjmp	.+34     	; 0x511c <vfprintf+0x10c>
    50fa:	ea e0       	ldi	r30, 0x0A	; 10
    50fc:	2e 9e       	mul	r2, r30
    50fe:	20 0d       	add	r18, r0
    5100:	11 24       	eor	r1, r1
    5102:	22 2e       	mov	r2, r18
    5104:	f3 2d       	mov	r31, r3
    5106:	f0 62       	ori	r31, 0x20	; 32
    5108:	3f 2e       	mov	r3, r31
    510a:	08 c0       	rjmp	.+16     	; 0x511c <vfprintf+0x10c>
    510c:	8c 36       	cpi	r24, 0x6C	; 108
    510e:	21 f4       	brne	.+8      	; 0x5118 <vfprintf+0x108>
    5110:	83 2d       	mov	r24, r3
    5112:	80 68       	ori	r24, 0x80	; 128
    5114:	38 2e       	mov	r3, r24
    5116:	02 c0       	rjmp	.+4      	; 0x511c <vfprintf+0x10c>
    5118:	88 36       	cpi	r24, 0x68	; 104
    511a:	41 f4       	brne	.+16     	; 0x512c <vfprintf+0x11c>
    511c:	f7 01       	movw	r30, r14
    511e:	93 fd       	sbrc	r25, 3
    5120:	85 91       	lpm	r24, Z+
    5122:	93 ff       	sbrs	r25, 3
    5124:	81 91       	ld	r24, Z+
    5126:	7f 01       	movw	r14, r30
    5128:	81 11       	cpse	r24, r1
    512a:	b3 cf       	rjmp	.-154    	; 0x5092 <vfprintf+0x82>
    512c:	98 2f       	mov	r25, r24
    512e:	9f 7d       	andi	r25, 0xDF	; 223
    5130:	95 54       	subi	r25, 0x45	; 69
    5132:	93 30       	cpi	r25, 0x03	; 3
    5134:	28 f4       	brcc	.+10     	; 0x5140 <vfprintf+0x130>
    5136:	0c 5f       	subi	r16, 0xFC	; 252
    5138:	1f 4f       	sbci	r17, 0xFF	; 255
    513a:	9f e3       	ldi	r25, 0x3F	; 63
    513c:	99 83       	std	Y+1, r25	; 0x01
    513e:	0d c0       	rjmp	.+26     	; 0x515a <vfprintf+0x14a>
    5140:	83 36       	cpi	r24, 0x63	; 99
    5142:	31 f0       	breq	.+12     	; 0x5150 <vfprintf+0x140>
    5144:	83 37       	cpi	r24, 0x73	; 115
    5146:	71 f0       	breq	.+28     	; 0x5164 <vfprintf+0x154>
    5148:	83 35       	cpi	r24, 0x53	; 83
    514a:	09 f0       	breq	.+2      	; 0x514e <vfprintf+0x13e>
    514c:	55 c0       	rjmp	.+170    	; 0x51f8 <vfprintf+0x1e8>
    514e:	20 c0       	rjmp	.+64     	; 0x5190 <vfprintf+0x180>
    5150:	f8 01       	movw	r30, r16
    5152:	80 81       	ld	r24, Z
    5154:	89 83       	std	Y+1, r24	; 0x01
    5156:	0e 5f       	subi	r16, 0xFE	; 254
    5158:	1f 4f       	sbci	r17, 0xFF	; 255
    515a:	88 24       	eor	r8, r8
    515c:	83 94       	inc	r8
    515e:	91 2c       	mov	r9, r1
    5160:	53 01       	movw	r10, r6
    5162:	12 c0       	rjmp	.+36     	; 0x5188 <vfprintf+0x178>
    5164:	28 01       	movw	r4, r16
    5166:	f2 e0       	ldi	r31, 0x02	; 2
    5168:	4f 0e       	add	r4, r31
    516a:	51 1c       	adc	r5, r1
    516c:	f8 01       	movw	r30, r16
    516e:	a0 80       	ld	r10, Z
    5170:	b1 80       	ldd	r11, Z+1	; 0x01
    5172:	36 fe       	sbrs	r3, 6
    5174:	03 c0       	rjmp	.+6      	; 0x517c <vfprintf+0x16c>
    5176:	69 2d       	mov	r22, r9
    5178:	70 e0       	ldi	r23, 0x00	; 0
    517a:	02 c0       	rjmp	.+4      	; 0x5180 <vfprintf+0x170>
    517c:	6f ef       	ldi	r22, 0xFF	; 255
    517e:	7f ef       	ldi	r23, 0xFF	; 255
    5180:	c5 01       	movw	r24, r10
    5182:	4e d1       	rcall	.+668    	; 0x5420 <strnlen>
    5184:	4c 01       	movw	r8, r24
    5186:	82 01       	movw	r16, r4
    5188:	f3 2d       	mov	r31, r3
    518a:	ff 77       	andi	r31, 0x7F	; 127
    518c:	3f 2e       	mov	r3, r31
    518e:	15 c0       	rjmp	.+42     	; 0x51ba <vfprintf+0x1aa>
    5190:	28 01       	movw	r4, r16
    5192:	22 e0       	ldi	r18, 0x02	; 2
    5194:	42 0e       	add	r4, r18
    5196:	51 1c       	adc	r5, r1
    5198:	f8 01       	movw	r30, r16
    519a:	a0 80       	ld	r10, Z
    519c:	b1 80       	ldd	r11, Z+1	; 0x01
    519e:	36 fe       	sbrs	r3, 6
    51a0:	03 c0       	rjmp	.+6      	; 0x51a8 <vfprintf+0x198>
    51a2:	69 2d       	mov	r22, r9
    51a4:	70 e0       	ldi	r23, 0x00	; 0
    51a6:	02 c0       	rjmp	.+4      	; 0x51ac <vfprintf+0x19c>
    51a8:	6f ef       	ldi	r22, 0xFF	; 255
    51aa:	7f ef       	ldi	r23, 0xFF	; 255
    51ac:	c5 01       	movw	r24, r10
    51ae:	2d d1       	rcall	.+602    	; 0x540a <strnlen_P>
    51b0:	4c 01       	movw	r8, r24
    51b2:	f3 2d       	mov	r31, r3
    51b4:	f0 68       	ori	r31, 0x80	; 128
    51b6:	3f 2e       	mov	r3, r31
    51b8:	82 01       	movw	r16, r4
    51ba:	33 fc       	sbrc	r3, 3
    51bc:	19 c0       	rjmp	.+50     	; 0x51f0 <vfprintf+0x1e0>
    51be:	82 2d       	mov	r24, r2
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	88 16       	cp	r8, r24
    51c4:	99 06       	cpc	r9, r25
    51c6:	a0 f4       	brcc	.+40     	; 0x51f0 <vfprintf+0x1e0>
    51c8:	b6 01       	movw	r22, r12
    51ca:	80 e2       	ldi	r24, 0x20	; 32
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	33 d1       	rcall	.+614    	; 0x5436 <fputc>
    51d0:	2a 94       	dec	r2
    51d2:	f5 cf       	rjmp	.-22     	; 0x51be <vfprintf+0x1ae>
    51d4:	f5 01       	movw	r30, r10
    51d6:	37 fc       	sbrc	r3, 7
    51d8:	85 91       	lpm	r24, Z+
    51da:	37 fe       	sbrs	r3, 7
    51dc:	81 91       	ld	r24, Z+
    51de:	5f 01       	movw	r10, r30
    51e0:	b6 01       	movw	r22, r12
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	28 d1       	rcall	.+592    	; 0x5436 <fputc>
    51e6:	21 10       	cpse	r2, r1
    51e8:	2a 94       	dec	r2
    51ea:	21 e0       	ldi	r18, 0x01	; 1
    51ec:	82 1a       	sub	r8, r18
    51ee:	91 08       	sbc	r9, r1
    51f0:	81 14       	cp	r8, r1
    51f2:	91 04       	cpc	r9, r1
    51f4:	79 f7       	brne	.-34     	; 0x51d4 <vfprintf+0x1c4>
    51f6:	e1 c0       	rjmp	.+450    	; 0x53ba <vfprintf+0x3aa>
    51f8:	84 36       	cpi	r24, 0x64	; 100
    51fa:	11 f0       	breq	.+4      	; 0x5200 <vfprintf+0x1f0>
    51fc:	89 36       	cpi	r24, 0x69	; 105
    51fe:	39 f5       	brne	.+78     	; 0x524e <vfprintf+0x23e>
    5200:	f8 01       	movw	r30, r16
    5202:	37 fe       	sbrs	r3, 7
    5204:	07 c0       	rjmp	.+14     	; 0x5214 <vfprintf+0x204>
    5206:	60 81       	ld	r22, Z
    5208:	71 81       	ldd	r23, Z+1	; 0x01
    520a:	82 81       	ldd	r24, Z+2	; 0x02
    520c:	93 81       	ldd	r25, Z+3	; 0x03
    520e:	0c 5f       	subi	r16, 0xFC	; 252
    5210:	1f 4f       	sbci	r17, 0xFF	; 255
    5212:	08 c0       	rjmp	.+16     	; 0x5224 <vfprintf+0x214>
    5214:	60 81       	ld	r22, Z
    5216:	71 81       	ldd	r23, Z+1	; 0x01
    5218:	07 2e       	mov	r0, r23
    521a:	00 0c       	add	r0, r0
    521c:	88 0b       	sbc	r24, r24
    521e:	99 0b       	sbc	r25, r25
    5220:	0e 5f       	subi	r16, 0xFE	; 254
    5222:	1f 4f       	sbci	r17, 0xFF	; 255
    5224:	f3 2d       	mov	r31, r3
    5226:	ff 76       	andi	r31, 0x6F	; 111
    5228:	3f 2e       	mov	r3, r31
    522a:	97 ff       	sbrs	r25, 7
    522c:	09 c0       	rjmp	.+18     	; 0x5240 <vfprintf+0x230>
    522e:	90 95       	com	r25
    5230:	80 95       	com	r24
    5232:	70 95       	com	r23
    5234:	61 95       	neg	r22
    5236:	7f 4f       	sbci	r23, 0xFF	; 255
    5238:	8f 4f       	sbci	r24, 0xFF	; 255
    523a:	9f 4f       	sbci	r25, 0xFF	; 255
    523c:	f0 68       	ori	r31, 0x80	; 128
    523e:	3f 2e       	mov	r3, r31
    5240:	2a e0       	ldi	r18, 0x0A	; 10
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	a3 01       	movw	r20, r6
    5246:	33 d1       	rcall	.+614    	; 0x54ae <__ultoa_invert>
    5248:	88 2e       	mov	r8, r24
    524a:	86 18       	sub	r8, r6
    524c:	44 c0       	rjmp	.+136    	; 0x52d6 <vfprintf+0x2c6>
    524e:	85 37       	cpi	r24, 0x75	; 117
    5250:	31 f4       	brne	.+12     	; 0x525e <vfprintf+0x24e>
    5252:	23 2d       	mov	r18, r3
    5254:	2f 7e       	andi	r18, 0xEF	; 239
    5256:	b2 2e       	mov	r11, r18
    5258:	2a e0       	ldi	r18, 0x0A	; 10
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	25 c0       	rjmp	.+74     	; 0x52a8 <vfprintf+0x298>
    525e:	93 2d       	mov	r25, r3
    5260:	99 7f       	andi	r25, 0xF9	; 249
    5262:	b9 2e       	mov	r11, r25
    5264:	8f 36       	cpi	r24, 0x6F	; 111
    5266:	c1 f0       	breq	.+48     	; 0x5298 <vfprintf+0x288>
    5268:	18 f4       	brcc	.+6      	; 0x5270 <vfprintf+0x260>
    526a:	88 35       	cpi	r24, 0x58	; 88
    526c:	79 f0       	breq	.+30     	; 0x528c <vfprintf+0x27c>
    526e:	ae c0       	rjmp	.+348    	; 0x53cc <vfprintf+0x3bc>
    5270:	80 37       	cpi	r24, 0x70	; 112
    5272:	19 f0       	breq	.+6      	; 0x527a <vfprintf+0x26a>
    5274:	88 37       	cpi	r24, 0x78	; 120
    5276:	21 f0       	breq	.+8      	; 0x5280 <vfprintf+0x270>
    5278:	a9 c0       	rjmp	.+338    	; 0x53cc <vfprintf+0x3bc>
    527a:	e9 2f       	mov	r30, r25
    527c:	e0 61       	ori	r30, 0x10	; 16
    527e:	be 2e       	mov	r11, r30
    5280:	b4 fe       	sbrs	r11, 4
    5282:	0d c0       	rjmp	.+26     	; 0x529e <vfprintf+0x28e>
    5284:	fb 2d       	mov	r31, r11
    5286:	f4 60       	ori	r31, 0x04	; 4
    5288:	bf 2e       	mov	r11, r31
    528a:	09 c0       	rjmp	.+18     	; 0x529e <vfprintf+0x28e>
    528c:	34 fe       	sbrs	r3, 4
    528e:	0a c0       	rjmp	.+20     	; 0x52a4 <vfprintf+0x294>
    5290:	29 2f       	mov	r18, r25
    5292:	26 60       	ori	r18, 0x06	; 6
    5294:	b2 2e       	mov	r11, r18
    5296:	06 c0       	rjmp	.+12     	; 0x52a4 <vfprintf+0x294>
    5298:	28 e0       	ldi	r18, 0x08	; 8
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	05 c0       	rjmp	.+10     	; 0x52a8 <vfprintf+0x298>
    529e:	20 e1       	ldi	r18, 0x10	; 16
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	02 c0       	rjmp	.+4      	; 0x52a8 <vfprintf+0x298>
    52a4:	20 e1       	ldi	r18, 0x10	; 16
    52a6:	32 e0       	ldi	r19, 0x02	; 2
    52a8:	f8 01       	movw	r30, r16
    52aa:	b7 fe       	sbrs	r11, 7
    52ac:	07 c0       	rjmp	.+14     	; 0x52bc <vfprintf+0x2ac>
    52ae:	60 81       	ld	r22, Z
    52b0:	71 81       	ldd	r23, Z+1	; 0x01
    52b2:	82 81       	ldd	r24, Z+2	; 0x02
    52b4:	93 81       	ldd	r25, Z+3	; 0x03
    52b6:	0c 5f       	subi	r16, 0xFC	; 252
    52b8:	1f 4f       	sbci	r17, 0xFF	; 255
    52ba:	06 c0       	rjmp	.+12     	; 0x52c8 <vfprintf+0x2b8>
    52bc:	60 81       	ld	r22, Z
    52be:	71 81       	ldd	r23, Z+1	; 0x01
    52c0:	80 e0       	ldi	r24, 0x00	; 0
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	0e 5f       	subi	r16, 0xFE	; 254
    52c6:	1f 4f       	sbci	r17, 0xFF	; 255
    52c8:	a3 01       	movw	r20, r6
    52ca:	f1 d0       	rcall	.+482    	; 0x54ae <__ultoa_invert>
    52cc:	88 2e       	mov	r8, r24
    52ce:	86 18       	sub	r8, r6
    52d0:	fb 2d       	mov	r31, r11
    52d2:	ff 77       	andi	r31, 0x7F	; 127
    52d4:	3f 2e       	mov	r3, r31
    52d6:	36 fe       	sbrs	r3, 6
    52d8:	0d c0       	rjmp	.+26     	; 0x52f4 <vfprintf+0x2e4>
    52da:	23 2d       	mov	r18, r3
    52dc:	2e 7f       	andi	r18, 0xFE	; 254
    52de:	a2 2e       	mov	r10, r18
    52e0:	89 14       	cp	r8, r9
    52e2:	58 f4       	brcc	.+22     	; 0x52fa <vfprintf+0x2ea>
    52e4:	34 fe       	sbrs	r3, 4
    52e6:	0b c0       	rjmp	.+22     	; 0x52fe <vfprintf+0x2ee>
    52e8:	32 fc       	sbrc	r3, 2
    52ea:	09 c0       	rjmp	.+18     	; 0x52fe <vfprintf+0x2ee>
    52ec:	83 2d       	mov	r24, r3
    52ee:	8e 7e       	andi	r24, 0xEE	; 238
    52f0:	a8 2e       	mov	r10, r24
    52f2:	05 c0       	rjmp	.+10     	; 0x52fe <vfprintf+0x2ee>
    52f4:	b8 2c       	mov	r11, r8
    52f6:	a3 2c       	mov	r10, r3
    52f8:	03 c0       	rjmp	.+6      	; 0x5300 <vfprintf+0x2f0>
    52fa:	b8 2c       	mov	r11, r8
    52fc:	01 c0       	rjmp	.+2      	; 0x5300 <vfprintf+0x2f0>
    52fe:	b9 2c       	mov	r11, r9
    5300:	a4 fe       	sbrs	r10, 4
    5302:	0f c0       	rjmp	.+30     	; 0x5322 <vfprintf+0x312>
    5304:	fe 01       	movw	r30, r28
    5306:	e8 0d       	add	r30, r8
    5308:	f1 1d       	adc	r31, r1
    530a:	80 81       	ld	r24, Z
    530c:	80 33       	cpi	r24, 0x30	; 48
    530e:	21 f4       	brne	.+8      	; 0x5318 <vfprintf+0x308>
    5310:	9a 2d       	mov	r25, r10
    5312:	99 7e       	andi	r25, 0xE9	; 233
    5314:	a9 2e       	mov	r10, r25
    5316:	09 c0       	rjmp	.+18     	; 0x532a <vfprintf+0x31a>
    5318:	a2 fe       	sbrs	r10, 2
    531a:	06 c0       	rjmp	.+12     	; 0x5328 <vfprintf+0x318>
    531c:	b3 94       	inc	r11
    531e:	b3 94       	inc	r11
    5320:	04 c0       	rjmp	.+8      	; 0x532a <vfprintf+0x31a>
    5322:	8a 2d       	mov	r24, r10
    5324:	86 78       	andi	r24, 0x86	; 134
    5326:	09 f0       	breq	.+2      	; 0x532a <vfprintf+0x31a>
    5328:	b3 94       	inc	r11
    532a:	a3 fc       	sbrc	r10, 3
    532c:	10 c0       	rjmp	.+32     	; 0x534e <vfprintf+0x33e>
    532e:	a0 fe       	sbrs	r10, 0
    5330:	06 c0       	rjmp	.+12     	; 0x533e <vfprintf+0x32e>
    5332:	b2 14       	cp	r11, r2
    5334:	80 f4       	brcc	.+32     	; 0x5356 <vfprintf+0x346>
    5336:	28 0c       	add	r2, r8
    5338:	92 2c       	mov	r9, r2
    533a:	9b 18       	sub	r9, r11
    533c:	0d c0       	rjmp	.+26     	; 0x5358 <vfprintf+0x348>
    533e:	b2 14       	cp	r11, r2
    5340:	58 f4       	brcc	.+22     	; 0x5358 <vfprintf+0x348>
    5342:	b6 01       	movw	r22, r12
    5344:	80 e2       	ldi	r24, 0x20	; 32
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	76 d0       	rcall	.+236    	; 0x5436 <fputc>
    534a:	b3 94       	inc	r11
    534c:	f8 cf       	rjmp	.-16     	; 0x533e <vfprintf+0x32e>
    534e:	b2 14       	cp	r11, r2
    5350:	18 f4       	brcc	.+6      	; 0x5358 <vfprintf+0x348>
    5352:	2b 18       	sub	r2, r11
    5354:	02 c0       	rjmp	.+4      	; 0x535a <vfprintf+0x34a>
    5356:	98 2c       	mov	r9, r8
    5358:	21 2c       	mov	r2, r1
    535a:	a4 fe       	sbrs	r10, 4
    535c:	0f c0       	rjmp	.+30     	; 0x537c <vfprintf+0x36c>
    535e:	b6 01       	movw	r22, r12
    5360:	80 e3       	ldi	r24, 0x30	; 48
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	68 d0       	rcall	.+208    	; 0x5436 <fputc>
    5366:	a2 fe       	sbrs	r10, 2
    5368:	16 c0       	rjmp	.+44     	; 0x5396 <vfprintf+0x386>
    536a:	a1 fc       	sbrc	r10, 1
    536c:	03 c0       	rjmp	.+6      	; 0x5374 <vfprintf+0x364>
    536e:	88 e7       	ldi	r24, 0x78	; 120
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	02 c0       	rjmp	.+4      	; 0x5378 <vfprintf+0x368>
    5374:	88 e5       	ldi	r24, 0x58	; 88
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	b6 01       	movw	r22, r12
    537a:	0c c0       	rjmp	.+24     	; 0x5394 <vfprintf+0x384>
    537c:	8a 2d       	mov	r24, r10
    537e:	86 78       	andi	r24, 0x86	; 134
    5380:	51 f0       	breq	.+20     	; 0x5396 <vfprintf+0x386>
    5382:	a1 fe       	sbrs	r10, 1
    5384:	02 c0       	rjmp	.+4      	; 0x538a <vfprintf+0x37a>
    5386:	8b e2       	ldi	r24, 0x2B	; 43
    5388:	01 c0       	rjmp	.+2      	; 0x538c <vfprintf+0x37c>
    538a:	80 e2       	ldi	r24, 0x20	; 32
    538c:	a7 fc       	sbrc	r10, 7
    538e:	8d e2       	ldi	r24, 0x2D	; 45
    5390:	b6 01       	movw	r22, r12
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	50 d0       	rcall	.+160    	; 0x5436 <fputc>
    5396:	89 14       	cp	r8, r9
    5398:	30 f4       	brcc	.+12     	; 0x53a6 <vfprintf+0x396>
    539a:	b6 01       	movw	r22, r12
    539c:	80 e3       	ldi	r24, 0x30	; 48
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	4a d0       	rcall	.+148    	; 0x5436 <fputc>
    53a2:	9a 94       	dec	r9
    53a4:	f8 cf       	rjmp	.-16     	; 0x5396 <vfprintf+0x386>
    53a6:	8a 94       	dec	r8
    53a8:	f3 01       	movw	r30, r6
    53aa:	e8 0d       	add	r30, r8
    53ac:	f1 1d       	adc	r31, r1
    53ae:	80 81       	ld	r24, Z
    53b0:	b6 01       	movw	r22, r12
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	40 d0       	rcall	.+128    	; 0x5436 <fputc>
    53b6:	81 10       	cpse	r8, r1
    53b8:	f6 cf       	rjmp	.-20     	; 0x53a6 <vfprintf+0x396>
    53ba:	22 20       	and	r2, r2
    53bc:	09 f4       	brne	.+2      	; 0x53c0 <vfprintf+0x3b0>
    53be:	4e ce       	rjmp	.-868    	; 0x505c <vfprintf+0x4c>
    53c0:	b6 01       	movw	r22, r12
    53c2:	80 e2       	ldi	r24, 0x20	; 32
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	37 d0       	rcall	.+110    	; 0x5436 <fputc>
    53c8:	2a 94       	dec	r2
    53ca:	f7 cf       	rjmp	.-18     	; 0x53ba <vfprintf+0x3aa>
    53cc:	f6 01       	movw	r30, r12
    53ce:	86 81       	ldd	r24, Z+6	; 0x06
    53d0:	97 81       	ldd	r25, Z+7	; 0x07
    53d2:	02 c0       	rjmp	.+4      	; 0x53d8 <vfprintf+0x3c8>
    53d4:	8f ef       	ldi	r24, 0xFF	; 255
    53d6:	9f ef       	ldi	r25, 0xFF	; 255
    53d8:	2b 96       	adiw	r28, 0x0b	; 11
    53da:	0f b6       	in	r0, 0x3f	; 63
    53dc:	f8 94       	cli
    53de:	de bf       	out	0x3e, r29	; 62
    53e0:	0f be       	out	0x3f, r0	; 63
    53e2:	cd bf       	out	0x3d, r28	; 61
    53e4:	df 91       	pop	r29
    53e6:	cf 91       	pop	r28
    53e8:	1f 91       	pop	r17
    53ea:	0f 91       	pop	r16
    53ec:	ff 90       	pop	r15
    53ee:	ef 90       	pop	r14
    53f0:	df 90       	pop	r13
    53f2:	cf 90       	pop	r12
    53f4:	bf 90       	pop	r11
    53f6:	af 90       	pop	r10
    53f8:	9f 90       	pop	r9
    53fa:	8f 90       	pop	r8
    53fc:	7f 90       	pop	r7
    53fe:	6f 90       	pop	r6
    5400:	5f 90       	pop	r5
    5402:	4f 90       	pop	r4
    5404:	3f 90       	pop	r3
    5406:	2f 90       	pop	r2
    5408:	08 95       	ret

0000540a <strnlen_P>:
    540a:	fc 01       	movw	r30, r24
    540c:	05 90       	lpm	r0, Z+
    540e:	61 50       	subi	r22, 0x01	; 1
    5410:	70 40       	sbci	r23, 0x00	; 0
    5412:	01 10       	cpse	r0, r1
    5414:	d8 f7       	brcc	.-10     	; 0x540c <strnlen_P+0x2>
    5416:	80 95       	com	r24
    5418:	90 95       	com	r25
    541a:	8e 0f       	add	r24, r30
    541c:	9f 1f       	adc	r25, r31
    541e:	08 95       	ret

00005420 <strnlen>:
    5420:	fc 01       	movw	r30, r24
    5422:	61 50       	subi	r22, 0x01	; 1
    5424:	70 40       	sbci	r23, 0x00	; 0
    5426:	01 90       	ld	r0, Z+
    5428:	01 10       	cpse	r0, r1
    542a:	d8 f7       	brcc	.-10     	; 0x5422 <strnlen+0x2>
    542c:	80 95       	com	r24
    542e:	90 95       	com	r25
    5430:	8e 0f       	add	r24, r30
    5432:	9f 1f       	adc	r25, r31
    5434:	08 95       	ret

00005436 <fputc>:
    5436:	0f 93       	push	r16
    5438:	1f 93       	push	r17
    543a:	cf 93       	push	r28
    543c:	df 93       	push	r29
    543e:	fb 01       	movw	r30, r22
    5440:	23 81       	ldd	r18, Z+3	; 0x03
    5442:	21 fd       	sbrc	r18, 1
    5444:	03 c0       	rjmp	.+6      	; 0x544c <fputc+0x16>
    5446:	8f ef       	ldi	r24, 0xFF	; 255
    5448:	9f ef       	ldi	r25, 0xFF	; 255
    544a:	2c c0       	rjmp	.+88     	; 0x54a4 <fputc+0x6e>
    544c:	22 ff       	sbrs	r18, 2
    544e:	16 c0       	rjmp	.+44     	; 0x547c <fputc+0x46>
    5450:	46 81       	ldd	r20, Z+6	; 0x06
    5452:	57 81       	ldd	r21, Z+7	; 0x07
    5454:	24 81       	ldd	r18, Z+4	; 0x04
    5456:	35 81       	ldd	r19, Z+5	; 0x05
    5458:	42 17       	cp	r20, r18
    545a:	53 07       	cpc	r21, r19
    545c:	44 f4       	brge	.+16     	; 0x546e <fputc+0x38>
    545e:	a0 81       	ld	r26, Z
    5460:	b1 81       	ldd	r27, Z+1	; 0x01
    5462:	9d 01       	movw	r18, r26
    5464:	2f 5f       	subi	r18, 0xFF	; 255
    5466:	3f 4f       	sbci	r19, 0xFF	; 255
    5468:	31 83       	std	Z+1, r19	; 0x01
    546a:	20 83       	st	Z, r18
    546c:	8c 93       	st	X, r24
    546e:	26 81       	ldd	r18, Z+6	; 0x06
    5470:	37 81       	ldd	r19, Z+7	; 0x07
    5472:	2f 5f       	subi	r18, 0xFF	; 255
    5474:	3f 4f       	sbci	r19, 0xFF	; 255
    5476:	37 83       	std	Z+7, r19	; 0x07
    5478:	26 83       	std	Z+6, r18	; 0x06
    547a:	14 c0       	rjmp	.+40     	; 0x54a4 <fputc+0x6e>
    547c:	8b 01       	movw	r16, r22
    547e:	ec 01       	movw	r28, r24
    5480:	fb 01       	movw	r30, r22
    5482:	00 84       	ldd	r0, Z+8	; 0x08
    5484:	f1 85       	ldd	r31, Z+9	; 0x09
    5486:	e0 2d       	mov	r30, r0
    5488:	19 95       	eicall
    548a:	89 2b       	or	r24, r25
    548c:	e1 f6       	brne	.-72     	; 0x5446 <fputc+0x10>
    548e:	d8 01       	movw	r26, r16
    5490:	16 96       	adiw	r26, 0x06	; 6
    5492:	8d 91       	ld	r24, X+
    5494:	9c 91       	ld	r25, X
    5496:	17 97       	sbiw	r26, 0x07	; 7
    5498:	01 96       	adiw	r24, 0x01	; 1
    549a:	17 96       	adiw	r26, 0x07	; 7
    549c:	9c 93       	st	X, r25
    549e:	8e 93       	st	-X, r24
    54a0:	16 97       	sbiw	r26, 0x06	; 6
    54a2:	ce 01       	movw	r24, r28
    54a4:	df 91       	pop	r29
    54a6:	cf 91       	pop	r28
    54a8:	1f 91       	pop	r17
    54aa:	0f 91       	pop	r16
    54ac:	08 95       	ret

000054ae <__ultoa_invert>:
    54ae:	fa 01       	movw	r30, r20
    54b0:	aa 27       	eor	r26, r26
    54b2:	28 30       	cpi	r18, 0x08	; 8
    54b4:	51 f1       	breq	.+84     	; 0x550a <__ultoa_invert+0x5c>
    54b6:	20 31       	cpi	r18, 0x10	; 16
    54b8:	81 f1       	breq	.+96     	; 0x551a <__ultoa_invert+0x6c>
    54ba:	e8 94       	clt
    54bc:	6f 93       	push	r22
    54be:	6e 7f       	andi	r22, 0xFE	; 254
    54c0:	6e 5f       	subi	r22, 0xFE	; 254
    54c2:	7f 4f       	sbci	r23, 0xFF	; 255
    54c4:	8f 4f       	sbci	r24, 0xFF	; 255
    54c6:	9f 4f       	sbci	r25, 0xFF	; 255
    54c8:	af 4f       	sbci	r26, 0xFF	; 255
    54ca:	b1 e0       	ldi	r27, 0x01	; 1
    54cc:	3e d0       	rcall	.+124    	; 0x554a <__ultoa_invert+0x9c>
    54ce:	b4 e0       	ldi	r27, 0x04	; 4
    54d0:	3c d0       	rcall	.+120    	; 0x554a <__ultoa_invert+0x9c>
    54d2:	67 0f       	add	r22, r23
    54d4:	78 1f       	adc	r23, r24
    54d6:	89 1f       	adc	r24, r25
    54d8:	9a 1f       	adc	r25, r26
    54da:	a1 1d       	adc	r26, r1
    54dc:	68 0f       	add	r22, r24
    54de:	79 1f       	adc	r23, r25
    54e0:	8a 1f       	adc	r24, r26
    54e2:	91 1d       	adc	r25, r1
    54e4:	a1 1d       	adc	r26, r1
    54e6:	6a 0f       	add	r22, r26
    54e8:	71 1d       	adc	r23, r1
    54ea:	81 1d       	adc	r24, r1
    54ec:	91 1d       	adc	r25, r1
    54ee:	a1 1d       	adc	r26, r1
    54f0:	20 d0       	rcall	.+64     	; 0x5532 <__ultoa_invert+0x84>
    54f2:	09 f4       	brne	.+2      	; 0x54f6 <__ultoa_invert+0x48>
    54f4:	68 94       	set
    54f6:	3f 91       	pop	r19
    54f8:	2a e0       	ldi	r18, 0x0A	; 10
    54fa:	26 9f       	mul	r18, r22
    54fc:	11 24       	eor	r1, r1
    54fe:	30 19       	sub	r19, r0
    5500:	30 5d       	subi	r19, 0xD0	; 208
    5502:	31 93       	st	Z+, r19
    5504:	de f6       	brtc	.-74     	; 0x54bc <__ultoa_invert+0xe>
    5506:	cf 01       	movw	r24, r30
    5508:	08 95       	ret
    550a:	46 2f       	mov	r20, r22
    550c:	47 70       	andi	r20, 0x07	; 7
    550e:	40 5d       	subi	r20, 0xD0	; 208
    5510:	41 93       	st	Z+, r20
    5512:	b3 e0       	ldi	r27, 0x03	; 3
    5514:	0f d0       	rcall	.+30     	; 0x5534 <__ultoa_invert+0x86>
    5516:	c9 f7       	brne	.-14     	; 0x550a <__ultoa_invert+0x5c>
    5518:	f6 cf       	rjmp	.-20     	; 0x5506 <__ultoa_invert+0x58>
    551a:	46 2f       	mov	r20, r22
    551c:	4f 70       	andi	r20, 0x0F	; 15
    551e:	40 5d       	subi	r20, 0xD0	; 208
    5520:	4a 33       	cpi	r20, 0x3A	; 58
    5522:	18 f0       	brcs	.+6      	; 0x552a <__ultoa_invert+0x7c>
    5524:	49 5d       	subi	r20, 0xD9	; 217
    5526:	31 fd       	sbrc	r19, 1
    5528:	40 52       	subi	r20, 0x20	; 32
    552a:	41 93       	st	Z+, r20
    552c:	02 d0       	rcall	.+4      	; 0x5532 <__ultoa_invert+0x84>
    552e:	a9 f7       	brne	.-22     	; 0x551a <__ultoa_invert+0x6c>
    5530:	ea cf       	rjmp	.-44     	; 0x5506 <__ultoa_invert+0x58>
    5532:	b4 e0       	ldi	r27, 0x04	; 4
    5534:	a6 95       	lsr	r26
    5536:	97 95       	ror	r25
    5538:	87 95       	ror	r24
    553a:	77 95       	ror	r23
    553c:	67 95       	ror	r22
    553e:	ba 95       	dec	r27
    5540:	c9 f7       	brne	.-14     	; 0x5534 <__ultoa_invert+0x86>
    5542:	00 97       	sbiw	r24, 0x00	; 0
    5544:	61 05       	cpc	r22, r1
    5546:	71 05       	cpc	r23, r1
    5548:	08 95       	ret
    554a:	9b 01       	movw	r18, r22
    554c:	ac 01       	movw	r20, r24
    554e:	0a 2e       	mov	r0, r26
    5550:	06 94       	lsr	r0
    5552:	57 95       	ror	r21
    5554:	47 95       	ror	r20
    5556:	37 95       	ror	r19
    5558:	27 95       	ror	r18
    555a:	ba 95       	dec	r27
    555c:	c9 f7       	brne	.-14     	; 0x5550 <__ultoa_invert+0xa2>
    555e:	62 0f       	add	r22, r18
    5560:	73 1f       	adc	r23, r19
    5562:	84 1f       	adc	r24, r20
    5564:	95 1f       	adc	r25, r21
    5566:	a0 1d       	adc	r26, r0
    5568:	08 95       	ret

0000556a <_exit>:
    556a:	f8 94       	cli

0000556c <__stop_program>:
    556c:	ff cf       	rjmp	.-2      	; 0x556c <__stop_program>
